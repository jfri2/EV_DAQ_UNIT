
EV_DAQ_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  00000582  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000113a  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b0  00000000  00000000  0000180e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000532  00000000  00000000  00001ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  000023f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038d  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006bd  00000000  00000000  0000298d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000304a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ee e0       	ldi	r30, 0x0E	; 14
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 30       	cpi	r26, 0x00	; 0
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ab 30       	cpi	r26, 0x0B	; 11
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 6d 01 	call	0x2da	; 0x2da <main>
  ea:	0c 94 85 02 	jmp	0x50a	; 0x50a <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <gpio_init>:
* @brief Initialize GPIO for EV DAQ UNIT project
* @return void
*/
void gpio_init(void) {
    /* Setup Switches */
    clrbits(SW_DDR, ((1<<SW1)|(1<<SW2))); // Set switches to input
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	8c 7f       	andi	r24, 0xFC	; 252
  f6:	84 b9       	out	0x04, r24	; 4
    sbits(SW_PORT, ((1<<SW1)|(1<<SW2)));  // Turn on pullups on switches
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	83 60       	ori	r24, 0x03	; 3
  fc:	85 b9       	out	0x05, r24	; 5
    
    /* Setup LEDs */
    sbits(LED_DDR, ((1<<LED_RED)|(1<<LED_YLW)));  // LEDs as output
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	80 6c       	ori	r24, 0xC0	; 192
 102:	8a b9       	out	0x0a, r24	; 10
    
    /* Setup LCD /RST */
    sbit(LCD_RST_DDR, LCD_RST);     // Set LCD_RST to output
 104:	22 9a       	sbi	0x04, 2	; 4
    sbit(LCD_RST_PORT, LCD_RST);    // Drive LCD_RST high    
 106:	2a 9a       	sbi	0x05, 2	; 5
 108:	08 95       	ret

0000010a <i2c1_init>:
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return uint8_t   Division factor
*/
uint8_t i2c_calc_br_div(uint32_t cpu_freq, uint32_t i2c_freq) {
    return((uint8_t)(((cpu_freq/i2c_freq) - 16)>>1));
 10a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__udivmodsi4>
 10e:	da 01       	movw	r26, r20
 110:	c9 01       	movw	r24, r18
 112:	40 97       	sbiw	r24, 0x10	; 16
 114:	a1 09       	sbc	r26, r1
 116:	b1 09       	sbc	r27, r1
 118:	b6 95       	lsr	r27
 11a:	a7 95       	ror	r26
 11c:	97 95       	ror	r25
 11e:	87 95       	ror	r24
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return void
*/
void i2c1_init(uint32_t cpu_freq, uint32_t i2c_freq) {
    TWBR1 = i2c_calc_br_div(cpu_freq, i2c_freq);   // Set I2C SCL to correct value
 120:	80 93 d8 00 	sts	0x00D8, r24
    TWCR1 |= (1<<TWIE); // Enable TWI interrupt
 124:	ec ed       	ldi	r30, 0xDC	; 220
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <i2c1_tx>:
* @brief Start I2C master tx event
* @param[in] i2c_event   Type of I2C event
* @return uint8_t I2C status register
*/
uint8_t i2c1_tx(uint8_t i2c_event) {
    switch(i2c_event) {
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	69 f0       	breq	.+26     	; 0x14e <i2c1_tx+0x1e>
 134:	18 f0       	brcs	.+6      	; 0x13c <i2c1_tx+0xc>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	99 f0       	breq	.+38     	; 0x160 <i2c1_tx+0x30>
 13a:	1a c0       	rjmp	.+52     	; 0x170 <i2c1_tx+0x40>
        case I2C_START:
            TWCR1 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);    // Tx start condition
 13c:	84 ea       	ldi	r24, 0xA4	; 164
 13e:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWINT))); // Wait for current request to process            
 142:	ec ed       	ldi	r30, 0xDC	; 220
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	ec f7       	brge	.-6      	; 0x146 <i2c1_tx+0x16>
 14c:	11 c0       	rjmp	.+34     	; 0x170 <i2c1_tx+0x40>
            break;
        case I2C_DATA:
            TWCR1 = (1<<TWINT) | (1<<TWEN);                 // Tx data
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWINT))); // Wait for current request to process
 154:	ec ed       	ldi	r30, 0xDC	; 220
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	ec f7       	brge	.-6      	; 0x158 <i2c1_tx+0x28>
 15e:	08 c0       	rjmp	.+16     	; 0x170 <i2c1_tx+0x40>
            break;
        case I2C_STOP:
            TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);    // Tx stop condition
 160:	84 e9       	ldi	r24, 0x94	; 148
 162:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWSTO))); // Wait for current request to process
 166:	ec ed       	ldi	r30, 0xDC	; 220
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	84 ff       	sbrs	r24, 4
 16e:	fd cf       	rjmp	.-6      	; 0x16a <i2c1_tx+0x3a>
            break;
    }
    return(TWSR1 & I2C_STATUS_REG_MASK);     // Return only status bits in status reg
 170:	80 91 d9 00 	lds	r24, 0x00D9
}
 174:	88 7f       	andi	r24, 0xF8	; 248
 176:	08 95       	ret

00000178 <lcd_test>:

/*!
* @brief Test LCD
* @return void
*/
void lcd_test(void) {
 178:	ff 92       	push	r15
 17a:	0f 93       	push	r16
 17c:	1f 93       	push	r17
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
    /* Initialization Routine */
    i2c1_tx(I2C_START);    
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    /* First few bytes to send */
    TWDR1 = 0x7C; // Slave Addr
 188:	cb ed       	ldi	r28, 0xDB	; 219
 18a:	d0 e0       	ldi	r29, 0x00	; 0
 18c:	1c e7       	ldi	r17, 0x7C	; 124
 18e:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);    
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x00; // Comsend
 196:	18 82       	st	Y, r1
    i2c1_tx(I2C_DATA);    
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x38;
 19e:	88 e3       	ldi	r24, 0x38	; 56
 1a0:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);    
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    delay(10);    
 1a8:	8a e0       	ldi	r24, 0x0A	; 10
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 49 02 	call	0x492	; 0x492 <delay>
    /* Next byte to send */
    TWDR1 = 0x39;
 1b0:	0f 2e       	mov	r0, r31
 1b2:	f9 e3       	ldi	r31, 0x39	; 57
 1b4:	ff 2e       	mov	r15, r31
 1b6:	f0 2d       	mov	r31, r0
 1b8:	f8 82       	st	Y, r15
    i2c1_tx(I2C_DATA);    
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    delay(10);    
 1c0:	8a e0       	ldi	r24, 0x0A	; 10
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 49 02 	call	0x492	; 0x492 <delay>
    /* Last few bytes of initialization data */
    TWDR1 = 0x14;
 1c8:	84 e1       	ldi	r24, 0x14	; 20
 1ca:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x78;
 1d2:	88 e7       	ldi	r24, 0x78	; 120
 1d4:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x5E;
 1dc:	8e e5       	ldi	r24, 0x5E	; 94
 1de:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x6D;
 1e6:	8d e6       	ldi	r24, 0x6D	; 109
 1e8:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);  // This command changed the screen
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x0C;
 1f0:	8c e0       	ldi	r24, 0x0C	; 12
 1f2:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x01;
 1fa:	01 e0       	ldi	r16, 0x01	; 1
 1fc:	08 83       	st	Y, r16
    i2c1_tx(I2C_DATA);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x06;
 204:	86 e0       	ldi	r24, 0x06	; 6
 206:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    delay(10);    
 20e:	8a e0       	ldi	r24, 0x0A	; 10
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 49 02 	call	0x492	; 0x492 <delay>
    i2c1_tx(I2C_STOP);  // Issue with sending the stop condition (waiting on ACK)
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    
    delay(100);
 21c:	84 e6       	ldi	r24, 0x64	; 100
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 49 02 	call	0x492	; 0x492 <delay>
//     TWDR1 = 0x00;   
//     i2c1_tx(I2C_STOP);
//     delay(10);        
    
    /* Set cursor back home */
    i2c1_tx(I2C_START);    
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    delay(10);
 22a:	8a e0       	ldi	r24, 0x0A	; 10
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 49 02 	call	0x492	; 0x492 <delay>
    TWDR1 = 0x7C; // Slave Addr
 232:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x00; // Comsend
 23a:	18 82       	st	Y, r1
    i2c1_tx(I2C_DATA);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x39;
 242:	f8 82       	st	Y, r15
    i2c1_tx(I2C_DATA);
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x01;
 24a:	08 83       	st	Y, r16
    i2c1_tx(I2C_DATA);    
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    i2c1_tx(I2C_STOP);
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    delay(10);
 258:	8a e0       	ldi	r24, 0x0A	; 10
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 49 02 	call	0x492	; 0x492 <delay>
    
    /* Display test string */
    i2c1_tx(I2C_START);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    
    delay(10);
 266:	8a e0       	ldi	r24, 0x0A	; 10
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 49 02 	call	0x492	; 0x492 <delay>
    TWDR1 = 0x7C; // Slave Addr
 26e:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x00; // Comsend
 276:	18 82       	st	Y, r1
    i2c1_tx(I2C_DATA);    
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>

    TWDR1 = 0x46;
 27e:	86 e4       	ldi	r24, 0x46	; 70
 280:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x20;
 288:	10 e2       	ldi	r17, 0x20	; 32
 28a:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x55;
 292:	85 e5       	ldi	r24, 0x55	; 85
 294:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x20;
 29c:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x43;
 2a4:	83 e4       	ldi	r24, 0x43	; 67
 2a6:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x20;
 2ae:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = 0x4b;
 2b6:	8b e4       	ldi	r24, 0x4B	; 75
 2b8:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>


    i2c1_tx(I2C_STOP);
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    delay(10);   
 2c6:	8a e0       	ldi	r24, 0x0A	; 10
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	0e 94 49 02 	call	0x492	; 0x492 <delay>
}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	ff 90       	pop	r15
 2d8:	08 95       	ret

000002da <main>:
uint16_t lc_adc_val = 0;
uint8_t lcd_temp[] = { 0x40, 0x46, 0x72, 0x69, 0x74, 0x7a }; // Sets line 1, Print "FRITZ"

int main(void) {
    /* Initialization Routines */
    timer1_1ms_init();
 2da:	0e 94 2d 02 	call	0x45a	; 0x45a <timer1_1ms_init>
    gpio_init();
 2de:	0e 94 79 00 	call	0xf2	; 0xf2 <gpio_init>
    i2c1_init(F_CPU, I2C_SCL_FREQ);
 2e2:	20 ea       	ldi	r18, 0xA0	; 160
 2e4:	36 e8       	ldi	r19, 0x86	; 134
 2e6:	41 e0       	ldi	r20, 0x01	; 1
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	74 e2       	ldi	r23, 0x24	; 36
 2ee:	84 ef       	ldi	r24, 0xF4	; 244
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 85 00 	call	0x10a	; 0x10a <i2c1_init>
    sei();
 2f6:	78 94       	sei
    tbit(LED_PORT, LED_YLW);
 2f8:	8b b1       	in	r24, 0x0b	; 11
 2fa:	80 58       	subi	r24, 0x80	; 128
 2fc:	8b b9       	out	0x0b, r24	; 11

    while(1) {
        // Status LED blink
        delay(500);
        tbits(LED_PORT, ((1<<LED_YLW)|(1<<LED_RED)));     
 2fe:	c0 ec       	ldi	r28, 0xC0	; 192
    sei();
    tbit(LED_PORT, LED_YLW);

    while(1) {
        // Status LED blink
        delay(500);
 300:	84 ef       	ldi	r24, 0xF4	; 244
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 49 02 	call	0x492	; 0x492 <delay>
        tbits(LED_PORT, ((1<<LED_YLW)|(1<<LED_RED)));     
 308:	8b b1       	in	r24, 0x0b	; 11
 30a:	8c 27       	eor	r24, r28
 30c:	8b b9       	out	0x0b, r24	; 11
         
        // Reset LCD on SW2 press
        if((chkbit(SW_PIN, SW2) == 0)) {
 30e:	19 99       	sbic	0x03, 1	; 3
 310:	1e c0       	rjmp	.+60     	; 0x34e <main+0x74>
            clrbit(LCD_RST_PORT, LCD_RST);
 312:	2a 98       	cbi	0x05, 2	; 5
            delay(100);
 314:	84 e6       	ldi	r24, 0x64	; 100
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	0e 94 49 02 	call	0x492	; 0x492 <delay>
            sbit(LCD_RST_PORT, LCD_RST);
 31c:	2a 9a       	sbi	0x05, 2	; 5
            sbits(LED_PORT, (LED_ALL));
 31e:	8b b1       	in	r24, 0x0b	; 11
 320:	80 6c       	ori	r24, 0xC0	; 192
 322:	8b b9       	out	0x0b, r24	; 11
            delay(100);
 324:	84 e6       	ldi	r24, 0x64	; 100
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 49 02 	call	0x492	; 0x492 <delay>
            tbits(LED_PORT, (LED_ALL));
 32c:	8b b1       	in	r24, 0x0b	; 11
 32e:	8c 27       	eor	r24, r28
 330:	8b b9       	out	0x0b, r24	; 11
            delay(100);
 332:	84 e6       	ldi	r24, 0x64	; 100
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 49 02 	call	0x492	; 0x492 <delay>
            tbits(LED_PORT, (LED_ALL));
 33a:	8b b1       	in	r24, 0x0b	; 11
 33c:	8c 27       	eor	r24, r28
 33e:	8b b9       	out	0x0b, r24	; 11
            delay(100);
 340:	84 e6       	ldi	r24, 0x64	; 100
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 49 02 	call	0x492	; 0x492 <delay>
            tbit(LED_PORT, (LED_YLW));          
 348:	8b b1       	in	r24, 0x0b	; 11
 34a:	80 58       	subi	r24, 0x80	; 128
 34c:	8b b9       	out	0x0b, r24	; 11
         }
         
         // Run LCD Test on SW1 press
        if((chkbit(SW_PIN, SW1) == 0)) {
 34e:	18 99       	sbic	0x03, 0	; 3
 350:	d7 cf       	rjmp	.-82     	; 0x300 <main+0x26>
            lcd_test();
 352:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_test>
            delay(50);
 356:	82 e3       	ldi	r24, 0x32	; 50
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 49 02 	call	0x492	; 0x492 <delay>
            sbits(LED_PORT, (LED_ALL));
 35e:	8b b1       	in	r24, 0x0b	; 11
 360:	80 6c       	ori	r24, 0xC0	; 192
 362:	8b b9       	out	0x0b, r24	; 11
            delay(50);
 364:	82 e3       	ldi	r24, 0x32	; 50
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 49 02 	call	0x492	; 0x492 <delay>
            tbits(LED_PORT, (LED_ALL));
 36c:	8b b1       	in	r24, 0x0b	; 11
 36e:	8c 27       	eor	r24, r28
 370:	8b b9       	out	0x0b, r24	; 11
            delay(50);
 372:	82 e3       	ldi	r24, 0x32	; 50
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 49 02 	call	0x492	; 0x492 <delay>
            tbits(LED_PORT, (LED_ALL));
 37a:	8b b1       	in	r24, 0x0b	; 11
 37c:	8c 27       	eor	r24, r28
 37e:	8b b9       	out	0x0b, r24	; 11
            delay(50);
 380:	82 e3       	ldi	r24, 0x32	; 50
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 49 02 	call	0x492	; 0x492 <delay>
            tbit(LED_PORT, (LED_YLW));
 388:	8b b1       	in	r24, 0x0b	; 11
 38a:	80 58       	subi	r24, 0x80	; 128
 38c:	8b b9       	out	0x0b, r24	; 11
 38e:	b8 cf       	rjmp	.-144    	; 0x300 <main+0x26>

00000390 <__vector_11>:
volatile uint8_t systime_s = 0;
volatile uint8_t systime_m = 0;
volatile uint8_t systime_h = 0;
volatile uint16_t systime_d = 0;

ISR(TIMER1_COMPA_vect) {
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	2f 93       	push	r18
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
 3a0:	af 93       	push	r26
 3a2:	bf 93       	push	r27
    /* Increment systck global vars to keep system time */
    systck++;
 3a4:	80 91 07 01 	lds	r24, 0x0107
 3a8:	90 91 08 01 	lds	r25, 0x0108
 3ac:	a0 91 09 01 	lds	r26, 0x0109
 3b0:	b0 91 0a 01 	lds	r27, 0x010A
 3b4:	01 96       	adiw	r24, 0x01	; 1
 3b6:	a1 1d       	adc	r26, r1
 3b8:	b1 1d       	adc	r27, r1
 3ba:	80 93 07 01 	sts	0x0107, r24
 3be:	90 93 08 01 	sts	0x0108, r25
 3c2:	a0 93 09 01 	sts	0x0109, r26
 3c6:	b0 93 0a 01 	sts	0x010A, r27
    systime_ms++;
 3ca:	80 91 05 01 	lds	r24, 0x0105
 3ce:	90 91 06 01 	lds	r25, 0x0106
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	90 93 06 01 	sts	0x0106, r25
 3d8:	80 93 05 01 	sts	0x0105, r24
    if(systime_ms >= 1000) {
 3dc:	80 91 05 01 	lds	r24, 0x0105
 3e0:	90 91 06 01 	lds	r25, 0x0106
 3e4:	88 3e       	cpi	r24, 0xE8	; 232
 3e6:	93 40       	sbci	r25, 0x03	; 3
 3e8:	70 f1       	brcs	.+92     	; 0x446 <__vector_11+0xb6>
        systime_ms = 0;
 3ea:	10 92 06 01 	sts	0x0106, r1
 3ee:	10 92 05 01 	sts	0x0105, r1
        systime_s++;
 3f2:	80 91 04 01 	lds	r24, 0x0104
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
 3f8:	80 93 04 01 	sts	0x0104, r24
        if(systime_s >= 60) {
 3fc:	80 91 04 01 	lds	r24, 0x0104
 400:	8c 33       	cpi	r24, 0x3C	; 60
 402:	08 f1       	brcs	.+66     	; 0x446 <__vector_11+0xb6>
            systime_s = 0;
 404:	10 92 04 01 	sts	0x0104, r1
            systime_m++;
 408:	80 91 03 01 	lds	r24, 0x0103
 40c:	8f 5f       	subi	r24, 0xFF	; 255
 40e:	80 93 03 01 	sts	0x0103, r24
            if(systime_m >= 60) {
 412:	80 91 03 01 	lds	r24, 0x0103
 416:	8c 33       	cpi	r24, 0x3C	; 60
 418:	b0 f0       	brcs	.+44     	; 0x446 <__vector_11+0xb6>
                systime_m = 0;
 41a:	10 92 03 01 	sts	0x0103, r1
                systime_h++;
 41e:	80 91 02 01 	lds	r24, 0x0102
 422:	8f 5f       	subi	r24, 0xFF	; 255
 424:	80 93 02 01 	sts	0x0102, r24
                if(systime_h >= 24) {
 428:	80 91 02 01 	lds	r24, 0x0102
 42c:	88 31       	cpi	r24, 0x18	; 24
 42e:	58 f0       	brcs	.+22     	; 0x446 <__vector_11+0xb6>
                    systime_h = 0;
 430:	10 92 02 01 	sts	0x0102, r1
                    systime_d++;
 434:	80 91 00 01 	lds	r24, 0x0100
 438:	90 91 01 01 	lds	r25, 0x0101
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	90 93 01 01 	sts	0x0101, r25
 442:	80 93 00 01 	sts	0x0100, r24
                }
            }
        }        
    }
}
 446:	bf 91       	pop	r27
 448:	af 91       	pop	r26
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	2f 91       	pop	r18
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	1f 90       	pop	r1
 458:	18 95       	reti

0000045a <timer1_1ms_init>:
/*!
* @brief Disable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_disable(void) {
    TIMSK1 &= ~(1<<OCIE1A); // Disable Output compare Interrupt on Match A
 45a:	af e6       	ldi	r26, 0x6F	; 111
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	8c 91       	ld	r24, X
 460:	8d 7f       	andi	r24, 0xFD	; 253
 462:	8c 93       	st	X, r24
    TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10)); // Disable timer1 clock source (disables timer)
 464:	e1 e8       	ldi	r30, 0x81	; 129
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	80 81       	ld	r24, Z
 46a:	88 7f       	andi	r24, 0xF8	; 248
 46c:	80 83       	st	Z, r24
*/
void timer1_1ms_init(void) {
    static uint16_t timer1_1ms_compare_value = 250-1;
        
    timer1_disable();
    TCCR1A = 0x00;  // Make sure no pins are set to output
 46e:	10 92 80 00 	sts	0x0080, r1
    TCCR1B |= (1<<WGM12) | TIMER1_PRESCALE_MASK;  // Set CTC, prescalar to clk(io)/64 (250 counts per 1ms)
 472:	80 81       	ld	r24, Z
 474:	8b 60       	ori	r24, 0x0B	; 11
 476:	80 83       	st	Z, r24
    OCR1A = timer1_1ms_compare_value;    
 478:	89 ef       	ldi	r24, 0xF9	; 249
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	90 93 89 00 	sts	0x0089, r25
 480:	80 93 88 00 	sts	0x0088, r24
/*!
* @brief Enable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_enable(void) {
    TIMSK1 |= (1<<OCIE1A);  // Enable Output Compare Interrupt on Match A
 484:	8c 91       	ld	r24, X
 486:	82 60       	ori	r24, 0x02	; 2
 488:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_PRESCALE_MASK; // Enable timer1 clock source (disables timer)
 48a:	80 81       	ld	r24, Z
 48c:	83 60       	ori	r24, 0x03	; 3
 48e:	80 83       	st	Z, r24
 490:	08 95       	ret

00000492 <delay>:
* @brief Delay milliseconds
* @param uint16_t delay_ms  Time to delay in milliseconds
* @return void
*/
void delay(uint16_t delay_ms) {
    uint32_t systck_1 = systck;
 492:	40 91 07 01 	lds	r20, 0x0107
 496:	50 91 08 01 	lds	r21, 0x0108
 49a:	60 91 09 01 	lds	r22, 0x0109
 49e:	70 91 0a 01 	lds	r23, 0x010A
    while(systck < (systck_1 + delay_ms));  // delay
 4a2:	48 0f       	add	r20, r24
 4a4:	59 1f       	adc	r21, r25
 4a6:	61 1d       	adc	r22, r1
 4a8:	71 1d       	adc	r23, r1
 4aa:	80 91 07 01 	lds	r24, 0x0107
 4ae:	90 91 08 01 	lds	r25, 0x0108
 4b2:	a0 91 09 01 	lds	r26, 0x0109
 4b6:	b0 91 0a 01 	lds	r27, 0x010A
 4ba:	84 17       	cp	r24, r20
 4bc:	95 07       	cpc	r25, r21
 4be:	a6 07       	cpc	r26, r22
 4c0:	b7 07       	cpc	r27, r23
 4c2:	98 f3       	brcs	.-26     	; 0x4aa <delay+0x18>
 4c4:	08 95       	ret

000004c6 <__udivmodsi4>:
 4c6:	a1 e2       	ldi	r26, 0x21	; 33
 4c8:	1a 2e       	mov	r1, r26
 4ca:	aa 1b       	sub	r26, r26
 4cc:	bb 1b       	sub	r27, r27
 4ce:	fd 01       	movw	r30, r26
 4d0:	0d c0       	rjmp	.+26     	; 0x4ec <__udivmodsi4_ep>

000004d2 <__udivmodsi4_loop>:
 4d2:	aa 1f       	adc	r26, r26
 4d4:	bb 1f       	adc	r27, r27
 4d6:	ee 1f       	adc	r30, r30
 4d8:	ff 1f       	adc	r31, r31
 4da:	a2 17       	cp	r26, r18
 4dc:	b3 07       	cpc	r27, r19
 4de:	e4 07       	cpc	r30, r20
 4e0:	f5 07       	cpc	r31, r21
 4e2:	20 f0       	brcs	.+8      	; 0x4ec <__udivmodsi4_ep>
 4e4:	a2 1b       	sub	r26, r18
 4e6:	b3 0b       	sbc	r27, r19
 4e8:	e4 0b       	sbc	r30, r20
 4ea:	f5 0b       	sbc	r31, r21

000004ec <__udivmodsi4_ep>:
 4ec:	66 1f       	adc	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	88 1f       	adc	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	1a 94       	dec	r1
 4f6:	69 f7       	brne	.-38     	; 0x4d2 <__udivmodsi4_loop>
 4f8:	60 95       	com	r22
 4fa:	70 95       	com	r23
 4fc:	80 95       	com	r24
 4fe:	90 95       	com	r25
 500:	9b 01       	movw	r18, r22
 502:	ac 01       	movw	r20, r24
 504:	bd 01       	movw	r22, r26
 506:	cf 01       	movw	r24, r30
 508:	08 95       	ret

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>
