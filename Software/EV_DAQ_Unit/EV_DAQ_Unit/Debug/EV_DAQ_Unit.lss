
EV_DAQ_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000152  00800100  00000b96  00000c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800252  00800252  00000d7c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecf  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000801  00000000  00000000  00001e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000696  00000000  00000000  00002630  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000308  00000000  00000000  00002cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000429  00000000  00000000  00002fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b4d  00000000  00000000  000033f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003f46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 fc 01 	jmp	0x3f8	; 0x3f8 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	12 e0       	ldi	r17, 0x02	; 2
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e9       	ldi	r30, 0x96	; 150
  c8:	fb e0       	ldi	r31, 0x0B	; 11
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 35       	cpi	r26, 0x52	; 82
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	a2 e5       	ldi	r26, 0x52	; 82
  da:	b2 e0       	ldi	r27, 0x02	; 2
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ad 35       	cpi	r26, 0x5D	; 93
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <main>
  ea:	0c 94 c9 05 	jmp	0xb92	; 0xb92 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <adc_init>:
* @param[in] adc_dig_disable  Digital input disable mask. ADC7=Bit7, ADC0=Bit0
* @param[in] adc_div          ADC prescalar (clock divider)
* @return void
*/
void adc_init(uint8_t adc_dig_disable, uint8_t adc_div) {
    DIDR0 = adc_dig_disable;    // Disable digital input buffer (saves power and causes PIN to always read 0)
  f2:	80 93 7e 00 	sts	0x007E, r24
  f6:	68 30       	cpi	r22, 0x08	; 8
  f8:	08 f0       	brcs	.+2      	; 0xfc <adc_init+0xa>
  fa:	67 e0       	ldi	r22, 0x07	; 7
    if(adc_div > ADC_DIV_128) {
        adc_div = ADC_DIV_128;    // Handle invalid prescalars by forcing to 128 division 
    }   
         
    ADCSRA = ((1<<ADEN) | (adc_div));   // Enable ADC and set proper prescale
  fc:	60 68       	ori	r22, 0x80	; 128
  fe:	60 93 7a 00 	sts	0x007A, r22
 102:	08 95       	ret

00000104 <i2c1_init>:
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return uint8_t   Division factor
*/
uint8_t i2c_calc_br_div(uint32_t cpu_freq, uint32_t i2c_freq) {
    return((uint8_t)(((cpu_freq/i2c_freq) - 16)>>1));
 104:	0e 94 ac 02 	call	0x558	; 0x558 <__udivmodsi4>
 108:	da 01       	movw	r26, r20
 10a:	c9 01       	movw	r24, r18
 10c:	40 97       	sbiw	r24, 0x10	; 16
 10e:	a1 09       	sbc	r26, r1
 110:	b1 09       	sbc	r27, r1
 112:	b6 95       	lsr	r27
 114:	a7 95       	ror	r26
 116:	97 95       	ror	r25
 118:	87 95       	ror	r24
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return void
*/
void i2c1_init(uint32_t cpu_freq, uint32_t i2c_freq) {
    TWBR1 = i2c_calc_br_div(cpu_freq, i2c_freq);   // Set I2C SCL to correct value
 11a:	80 93 d8 00 	sts	0x00D8, r24
    TWCR1 |= (1<<TWIE); // Enable TWI interrupt
 11e:	ec ed       	ldi	r30, 0xDC	; 220
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	81 60       	ori	r24, 0x01	; 1
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <i2c1_tx>:
* @brief Start I2C master tx event
* @param[in] i2c_event   Type of I2C event
* @return uint8_t I2C status register
*/
uint8_t i2c1_tx(uint8_t i2c_event) {
    switch(i2c_event) {
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	41 f0       	breq	.+16     	; 0x13e <i2c1_tx+0x14>
 12e:	18 f0       	brcs	.+6      	; 0x136 <i2c1_tx+0xc>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	49 f0       	breq	.+18     	; 0x146 <i2c1_tx+0x1c>
 134:	0b c0       	rjmp	.+22     	; 0x14c <i2c1_tx+0x22>
        case I2C_START:
            TWCR1 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);    // Tx start condition
 136:	84 ea       	ldi	r24, 0xA4	; 164
 138:	80 93 dc 00 	sts	0x00DC, r24
            break;
 13c:	07 c0       	rjmp	.+14     	; 0x14c <i2c1_tx+0x22>
        case I2C_DATA:
            TWCR1 = (1<<TWINT) | (1<<TWEN);                 // Tx data
 13e:	84 e8       	ldi	r24, 0x84	; 132
 140:	80 93 dc 00 	sts	0x00DC, r24
            break;
 144:	03 c0       	rjmp	.+6      	; 0x14c <i2c1_tx+0x22>
        case I2C_STOP:
            TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);    // Tx stop condition
 146:	84 e9       	ldi	r24, 0x94	; 148
 148:	80 93 dc 00 	sts	0x00DC, r24
            break;
    }
    while (!(TWCR1 & (1 << TWINT))); // Wait for current request to process
 14c:	ec ed       	ldi	r30, 0xDC	; 220
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 23       	and	r24, r24
 154:	ec f7       	brge	.-6      	; 0x150 <i2c1_tx+0x26>
    return(TWSR1 & I2C_STATUS_REG_MASK);     // Return only status bits in status reg
 156:	80 91 d9 00 	lds	r24, 0x00D9
}
 15a:	88 7f       	andi	r24, 0xF8	; 248
 15c:	08 95       	ret

0000015e <i2c1_write>:
* @param[in] i2c_device_addr  I2C Device Address (7-bit, right justified)
* @param[in] p_i2c_data       Pointer to I2C message to write
* @param[in] num_i2c_bytes    Number of data bytes to write to I2C device (not counting I2C device address)
* @return uint8_t I2C status. 0x00 if write was successful, others=I2C Status register value on failure
*/
uint8_t i2c1_write(uint8_t i2c_device_addr, uint8_t *p_i2c_data, uint32_t num_i2c_bytes) {
 15e:	8f 92       	push	r8
 160:	9f 92       	push	r9
 162:	af 92       	push	r10
 164:	bf 92       	push	r11
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	c8 2f       	mov	r28, r24
 178:	06 2f       	mov	r16, r22
 17a:	17 2f       	mov	r17, r23
 17c:	69 01       	movw	r12, r18
 17e:	7a 01       	movw	r14, r20
    uint8_t i2c_status = 0;
    
    // I2C Start
    i2c_status = i2c1_tx(I2C_START);  // Start I2C Event
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 95 00 	call	0x12a	; 0x12a <i2c1_tx>
    if(i2c_status != I2C_STATUS_START) {
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	11 f0       	breq	.+4      	; 0x18e <i2c1_write+0x30>
        return(i2c_status | I2C_STATUS_FAIL_MASK);    // Break from function if I2C start condition isn't reflected in status reg
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	2f c0       	rjmp	.+94     	; 0x1ec <i2c1_write+0x8e>
    }   
     
    // I2C SLA+R/W
    TWDR1 = ((i2c_device_addr<<1) | I2C_WRITE);    // Set destination addr to device addr (7-bit, left justified), set I2C write condition
 18e:	cc 0f       	add	r28, r28
 190:	c0 93 db 00 	sts	0x00DB, r28
    i2c_status = i2c1_tx(I2C_DATA);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	0e 94 95 00 	call	0x12a	; 0x12a <i2c1_tx>
    if(i2c_status != I2C_STATUS_DATA_ACK) {
 19a:	88 32       	cpi	r24, 0x28	; 40
 19c:	31 f4       	brne	.+12     	; 0x1aa <i2c1_write+0x4c>
        return(i2c_status | I2C_STATUS_FAIL_MASK);    // Break from function if I2C data ack isn't reflected in status reg
    }
    
    // I2C Data Transfer
    for(uint32_t i = 0; i < num_i2c_bytes; i++) {
 19e:	c1 14       	cp	r12, r1
 1a0:	d1 04       	cpc	r13, r1
 1a2:	e1 04       	cpc	r14, r1
 1a4:	f1 04       	cpc	r15, r1
 1a6:	19 f4       	brne	.+6      	; 0x1ae <i2c1_write+0x50>
 1a8:	1d c0       	rjmp	.+58     	; 0x1e4 <i2c1_write+0x86>
     
    // I2C SLA+R/W
    TWDR1 = ((i2c_device_addr<<1) | I2C_WRITE);    // Set destination addr to device addr (7-bit, left justified), set I2C write condition
    i2c_status = i2c1_tx(I2C_DATA);
    if(i2c_status != I2C_STATUS_DATA_ACK) {
        return(i2c_status | I2C_STATUS_FAIL_MASK);    // Break from function if I2C data ack isn't reflected in status reg
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	1f c0       	rjmp	.+62     	; 0x1ec <i2c1_write+0x8e>
 1ae:	c0 2f       	mov	r28, r16
 1b0:	d1 2f       	mov	r29, r17
    }
    
    // I2C Data Transfer
    for(uint32_t i = 0; i < num_i2c_bytes; i++) {
 1b2:	81 2c       	mov	r8, r1
 1b4:	91 2c       	mov	r9, r1
 1b6:	54 01       	movw	r10, r8
        TWDR1 = p_i2c_data[i];    // Load I2C data into register
 1b8:	0b ed       	ldi	r16, 0xDB	; 219
 1ba:	10 e0       	ldi	r17, 0x00	; 0
 1bc:	89 91       	ld	r24, Y+
 1be:	f8 01       	movw	r30, r16
 1c0:	80 83       	st	Z, r24
        i2c_status = i2c1_tx(I2C_DATA);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 95 00 	call	0x12a	; 0x12a <i2c1_tx>
        if(i2c_status != I2C_STATUS_DATA_ACK) {
 1c8:	88 32       	cpi	r24, 0x28	; 40
 1ca:	11 f0       	breq	.+4      	; 0x1d0 <i2c1_write+0x72>
            return(i2c_status | I2C_STATUS_FAIL_MASK);    // Break from function if I2C data ack isn't reflected in status reg
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	0e c0       	rjmp	.+28     	; 0x1ec <i2c1_write+0x8e>
    if(i2c_status != I2C_STATUS_DATA_ACK) {
        return(i2c_status | I2C_STATUS_FAIL_MASK);    // Break from function if I2C data ack isn't reflected in status reg
    }
    
    // I2C Data Transfer
    for(uint32_t i = 0; i < num_i2c_bytes; i++) {
 1d0:	ff ef       	ldi	r31, 0xFF	; 255
 1d2:	8f 1a       	sub	r8, r31
 1d4:	9f 0a       	sbc	r9, r31
 1d6:	af 0a       	sbc	r10, r31
 1d8:	bf 0a       	sbc	r11, r31
 1da:	8c 14       	cp	r8, r12
 1dc:	9d 04       	cpc	r9, r13
 1de:	ae 04       	cpc	r10, r14
 1e0:	bf 04       	cpc	r11, r15
 1e2:	61 f7       	brne	.-40     	; 0x1bc <i2c1_write+0x5e>
            return(i2c_status | I2C_STATUS_FAIL_MASK);    // Break from function if I2C data ack isn't reflected in status reg
        }
    }    
    
    // I2C Stop Condition
    i2c_status = i2c1_tx(I2C_STOP);
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	0e 94 95 00 	call	0x12a	; 0x12a <i2c1_tx>
    return(0);  // Return 0 if write operation was successful
 1ea:	80 e0       	ldi	r24, 0x00	; 0
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	0f 91       	pop	r16
 1f4:	ff 90       	pop	r15
 1f6:	ef 90       	pop	r14
 1f8:	df 90       	pop	r13
 1fa:	cf 90       	pop	r12
 1fc:	bf 90       	pop	r11
 1fe:	af 90       	pop	r10
 200:	9f 90       	pop	r9
 202:	8f 90       	pop	r8
 204:	08 95       	ret

00000206 <lcd_init>:

/*!
* @brief Initialize LCD
* @return void
*/
void lcd_init(void) {
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	cd b7       	in	r28, 0x3d	; 61
 20c:	de b7       	in	r29, 0x3e	; 62
 20e:	2a 97       	sbiw	r28, 0x0a	; 10
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	f8 94       	cli
 214:	de bf       	out	0x3e, r29	; 62
 216:	0f be       	out	0x3f, r0	; 63
 218:	cd bf       	out	0x3d, r28	; 61
    // This function isn't quite right, needs updating once hardware is in
    uint32_t temp_ms = 0;
    
    uint8_t lcd_config_1[2] = {0x00, 0x38};
 21a:	19 82       	std	Y+1, r1	; 0x01
 21c:	88 e3       	ldi	r24, 0x38	; 56
 21e:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t lcd_config_2[1] = {0x39};
 220:	89 e3       	ldi	r24, 0x39	; 57
 222:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t lcd_config_3[7] = {0x14, 0x78, 0x5E, 0x6D, 0x0C, 0x01, 0x06};
 224:	87 e0       	ldi	r24, 0x07	; 7
 226:	ee e0       	ldi	r30, 0x0E	; 14
 228:	f1 e0       	ldi	r31, 0x01	; 1
 22a:	de 01       	movw	r26, r28
 22c:	14 96       	adiw	r26, 0x04	; 4
 22e:	01 90       	ld	r0, Z+
 230:	0d 92       	st	X+, r0
 232:	8a 95       	dec	r24
 234:	e1 f7       	brne	.-8      	; 0x22e <lcd_init+0x28>
        
    i2c1_write(LCD_I2C_ADDR, lcd_config_1, 2);  // Write first commands
 236:	22 e0       	ldi	r18, 0x02	; 2
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	be 01       	movw	r22, r28
 240:	6f 5f       	subi	r22, 0xFF	; 255
 242:	7f 4f       	sbci	r23, 0xFF	; 255
 244:	8c e7       	ldi	r24, 0x7C	; 124
 246:	0e 94 af 00 	call	0x15e	; 0x15e <i2c1_write>
    temp_ms = systck;   // Get current time
 24a:	80 91 59 02 	lds	r24, 0x0259
 24e:	90 91 5a 02 	lds	r25, 0x025A
 252:	a0 91 5b 02 	lds	r26, 0x025B
 256:	b0 91 5c 02 	lds	r27, 0x025C
    while(systck < (temp_ms + 10));     // Wait for command to process
 25a:	ac 01       	movw	r20, r24
 25c:	bd 01       	movw	r22, r26
 25e:	46 5f       	subi	r20, 0xF6	; 246
 260:	5f 4f       	sbci	r21, 0xFF	; 255
 262:	6f 4f       	sbci	r22, 0xFF	; 255
 264:	7f 4f       	sbci	r23, 0xFF	; 255
 266:	84 17       	cp	r24, r20
 268:	95 07       	cpc	r25, r21
 26a:	a6 07       	cpc	r26, r22
 26c:	b7 07       	cpc	r27, r23
 26e:	d8 f3       	brcs	.-10     	; 0x266 <lcd_init+0x60>
    
    i2c1_write(LCD_I2C_ADDR, lcd_config_2, 1);  // Write second commands
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	be 01       	movw	r22, r28
 27a:	6d 5f       	subi	r22, 0xFD	; 253
 27c:	7f 4f       	sbci	r23, 0xFF	; 255
 27e:	8c e7       	ldi	r24, 0x7C	; 124
 280:	0e 94 af 00 	call	0x15e	; 0x15e <i2c1_write>
    temp_ms = systck;   // Get current time
 284:	80 91 59 02 	lds	r24, 0x0259
 288:	90 91 5a 02 	lds	r25, 0x025A
 28c:	a0 91 5b 02 	lds	r26, 0x025B
 290:	b0 91 5c 02 	lds	r27, 0x025C
    while(systck < (temp_ms + 10));     // Wait for command to process
 294:	ac 01       	movw	r20, r24
 296:	bd 01       	movw	r22, r26
 298:	46 5f       	subi	r20, 0xF6	; 246
 29a:	5f 4f       	sbci	r21, 0xFF	; 255
 29c:	6f 4f       	sbci	r22, 0xFF	; 255
 29e:	7f 4f       	sbci	r23, 0xFF	; 255
 2a0:	84 17       	cp	r24, r20
 2a2:	95 07       	cpc	r25, r21
 2a4:	a6 07       	cpc	r26, r22
 2a6:	b7 07       	cpc	r27, r23
 2a8:	d8 f3       	brcs	.-10     	; 0x2a0 <lcd_init+0x9a>
    
    i2c1_write(LCD_I2C_ADDR, lcd_config_3, 7);  // Write third commands
 2aa:	27 e0       	ldi	r18, 0x07	; 7
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	50 e0       	ldi	r21, 0x00	; 0
 2b2:	be 01       	movw	r22, r28
 2b4:	6c 5f       	subi	r22, 0xFC	; 252
 2b6:	7f 4f       	sbci	r23, 0xFF	; 255
 2b8:	8c e7       	ldi	r24, 0x7C	; 124
 2ba:	0e 94 af 00 	call	0x15e	; 0x15e <i2c1_write>
}
 2be:	2a 96       	adiw	r28, 0x0a	; 10
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
 2ca:	df 91       	pop	r29
 2cc:	cf 91       	pop	r28
 2ce:	08 95       	ret

000002d0 <main>:
                                
#define PRINT_SYSTIME(interface)        { fprintf(interface, "\n%d %02d:%02d:%02d:%03d    ", systime_d, systime_h, systime_m, systime_s, systime_ms); }

int main(void) {
    /* Initialization Routines */
    timer1_1ms_init();
 2d0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <timer1_1ms_init>
    uart0_init(F_CPU, UART_BAUD);
 2d4:	20 e0       	ldi	r18, 0x00	; 0
 2d6:	32 ec       	ldi	r19, 0xC2	; 194
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	50 e0       	ldi	r21, 0x00	; 0
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	74 e2       	ldi	r23, 0x24	; 36
 2e0:	84 ef       	ldi	r24, 0xF4	; 244
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <uart0_init>
    i2c1_init(F_CPU, I2C_SCL_FREQ);
 2e8:	20 ea       	ldi	r18, 0xA0	; 160
 2ea:	36 e8       	ldi	r19, 0x86	; 134
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	60 e0       	ldi	r22, 0x00	; 0
 2f2:	74 e2       	ldi	r23, 0x24	; 36
 2f4:	84 ef       	ldi	r24, 0xF4	; 244
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	0e 94 82 00 	call	0x104	; 0x104 <i2c1_init>
    adc_init((ADC_DIG_DIS_LC | ADC_DIG_DIS_HE), ADC_DIV_128);
 2fc:	67 e0       	ldi	r22, 0x07	; 7
 2fe:	87 ec       	ldi	r24, 0xC7	; 199
 300:	0e 94 79 00 	call	0xf2	; 0xf2 <adc_init>
    lcd_init();
 304:	0e 94 03 01 	call	0x206	; 0x206 <lcd_init>
    
    PRINT_PROJECT_HEADER(STDIO_UART);
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	31 e0       	ldi	r19, 0x01	; 1
 30c:	4f e2       	ldi	r20, 0x2F	; 47
 30e:	50 e0       	ldi	r21, 0x00	; 0
 310:	61 e0       	ldi	r22, 0x01	; 1
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	85 e1       	ldi	r24, 0x15	; 21
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <fwrite>
 31c:	20 e0       	ldi	r18, 0x00	; 0
 31e:	31 e0       	ldi	r19, 0x01	; 1
 320:	4f e2       	ldi	r20, 0x2F	; 47
 322:	50 e0       	ldi	r21, 0x00	; 0
 324:	61 e0       	ldi	r22, 0x01	; 1
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	85 e4       	ldi	r24, 0x45	; 69
 32a:	91 e0       	ldi	r25, 0x01	; 1
 32c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <fwrite>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	31 e0       	ldi	r19, 0x01	; 1
 334:	4f e2       	ldi	r20, 0x2F	; 47
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	85 e7       	ldi	r24, 0x75	; 117
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <fwrite>
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	31 e0       	ldi	r19, 0x01	; 1
 348:	4f e2       	ldi	r20, 0x2F	; 47
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	61 e0       	ldi	r22, 0x01	; 1
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	85 ea       	ldi	r24, 0xA5	; 165
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <fwrite>
 358:	20 e0       	ldi	r18, 0x00	; 0
 35a:	31 e0       	ldi	r19, 0x01	; 1
 35c:	4f e2       	ldi	r20, 0x2F	; 47
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	85 e7       	ldi	r24, 0x75	; 117
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <fwrite>
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	31 e0       	ldi	r19, 0x01	; 1
 370:	4f e2       	ldi	r20, 0x2F	; 47
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	61 e0       	ldi	r22, 0x01	; 1
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	85 ed       	ldi	r24, 0xD5	; 213
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <fwrite>
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	31 e0       	ldi	r19, 0x01	; 1
 384:	40 e3       	ldi	r20, 0x30	; 48
 386:	50 e0       	ldi	r21, 0x00	; 0
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	70 e0       	ldi	r23, 0x00	; 0
 38c:	85 e0       	ldi	r24, 0x05	; 5
 38e:	92 e0       	ldi	r25, 0x02	; 2
 390:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <fwrite>
    
    while (1) {
        PRINT_SYSTIME(STDIO_UART);
 394:	06 e3       	ldi	r16, 0x36	; 54
 396:	12 e0       	ldi	r17, 0x02	; 2
 398:	c0 e0       	ldi	r28, 0x00	; 0
 39a:	d1 e0       	ldi	r29, 0x01	; 1
 39c:	80 91 58 02 	lds	r24, 0x0258
 3a0:	8f 93       	push	r24
 3a2:	80 91 57 02 	lds	r24, 0x0257
 3a6:	8f 93       	push	r24
 3a8:	80 91 56 02 	lds	r24, 0x0256
 3ac:	1f 92       	push	r1
 3ae:	8f 93       	push	r24
 3b0:	80 91 55 02 	lds	r24, 0x0255
 3b4:	1f 92       	push	r1
 3b6:	8f 93       	push	r24
 3b8:	80 91 54 02 	lds	r24, 0x0254
 3bc:	1f 92       	push	r1
 3be:	8f 93       	push	r24
 3c0:	80 91 53 02 	lds	r24, 0x0253
 3c4:	8f 93       	push	r24
 3c6:	80 91 52 02 	lds	r24, 0x0252
 3ca:	8f 93       	push	r24
 3cc:	1f 93       	push	r17
 3ce:	0f 93       	push	r16
 3d0:	df 93       	push	r29
 3d2:	cf 93       	push	r28
 3d4:	0e 94 ce 02 	call	0x59c	; 0x59c <fprintf>
    }
 3d8:	8d b7       	in	r24, 0x3d	; 61
 3da:	9e b7       	in	r25, 0x3e	; 62
 3dc:	0e 96       	adiw	r24, 0x0e	; 14
 3de:	0f b6       	in	r0, 0x3f	; 63
 3e0:	f8 94       	cli
 3e2:	9e bf       	out	0x3e, r25	; 62
 3e4:	0f be       	out	0x3f, r0	; 63
 3e6:	8d bf       	out	0x3d, r24	; 61
 3e8:	d9 cf       	rjmp	.-78     	; 0x39c <main+0xcc>

000003ea <stdio_uart_put>:
* @param[in] uint8_t ch     Character to write
* @param[in] FILE *stream   Pointer to stream location for stdio
* @return uint8_t
*/
uint8_t stdio_uart_put(uint8_t ch, FILE *stream) {
    uart0_put(ch);
 3ea:	0e 94 9c 02 	call	0x538	; 0x538 <uart0_put>
    return(0);
}
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	08 95       	ret

000003f2 <stdio_uart_get>:
* @brief Read data over UART0 (stdio)
* @param[in] FILE *stream   Pointer to stream location for stdio
* @return uint8_t
*/
uint8_t stdio_uart_get(FILE *stream) {
    uint8_t ch = uart0_get();
 3f2:	0e 94 a4 02 	call	0x548	; 0x548 <uart0_get>
    return(ch);
}
 3f6:	08 95       	ret

000003f8 <__vector_11>:
uint8_t systime_s = 0;
uint8_t systime_m = 0;
uint8_t systime_h = 0;
uint16_t systime_d = 0;

ISR(TIMER1_COMPA_vect) {
 3f8:	1f 92       	push	r1
 3fa:	0f 92       	push	r0
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	2f 93       	push	r18
 404:	8f 93       	push	r24
 406:	9f 93       	push	r25
 408:	af 93       	push	r26
 40a:	bf 93       	push	r27
    /* Increment systck global vars to keep system time */
    systck++;
 40c:	80 91 59 02 	lds	r24, 0x0259
 410:	90 91 5a 02 	lds	r25, 0x025A
 414:	a0 91 5b 02 	lds	r26, 0x025B
 418:	b0 91 5c 02 	lds	r27, 0x025C
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	a1 1d       	adc	r26, r1
 420:	b1 1d       	adc	r27, r1
 422:	80 93 59 02 	sts	0x0259, r24
 426:	90 93 5a 02 	sts	0x025A, r25
 42a:	a0 93 5b 02 	sts	0x025B, r26
 42e:	b0 93 5c 02 	sts	0x025C, r27
    systime_ms++;
 432:	80 91 57 02 	lds	r24, 0x0257
 436:	90 91 58 02 	lds	r25, 0x0258
 43a:	01 96       	adiw	r24, 0x01	; 1
    if(systime_ms >= 1000) {
 43c:	88 3e       	cpi	r24, 0xE8	; 232
 43e:	23 e0       	ldi	r18, 0x03	; 3
 440:	92 07       	cpc	r25, r18
 442:	28 f4       	brcc	.+10     	; 0x44e <__vector_11+0x56>
uint16_t systime_d = 0;

ISR(TIMER1_COMPA_vect) {
    /* Increment systck global vars to keep system time */
    systck++;
    systime_ms++;
 444:	90 93 58 02 	sts	0x0258, r25
 448:	80 93 57 02 	sts	0x0257, r24
 44c:	2b c0       	rjmp	.+86     	; 0x4a4 <__vector_11+0xac>
    if(systime_ms >= 1000) {
        systime_ms = 0;
 44e:	10 92 58 02 	sts	0x0258, r1
 452:	10 92 57 02 	sts	0x0257, r1
        systime_s++;
 456:	80 91 56 02 	lds	r24, 0x0256
 45a:	8f 5f       	subi	r24, 0xFF	; 255
        if(systime_s >= 60) {
 45c:	8c 33       	cpi	r24, 0x3C	; 60
 45e:	18 f4       	brcc	.+6      	; 0x466 <__vector_11+0x6e>
    /* Increment systck global vars to keep system time */
    systck++;
    systime_ms++;
    if(systime_ms >= 1000) {
        systime_ms = 0;
        systime_s++;
 460:	80 93 56 02 	sts	0x0256, r24
 464:	1f c0       	rjmp	.+62     	; 0x4a4 <__vector_11+0xac>
        if(systime_s >= 60) {
            systime_s = 0;
 466:	10 92 56 02 	sts	0x0256, r1
            systime_m++;
 46a:	80 91 55 02 	lds	r24, 0x0255
 46e:	8f 5f       	subi	r24, 0xFF	; 255
            if(systime_m >= 60) {
 470:	8c 33       	cpi	r24, 0x3C	; 60
 472:	18 f4       	brcc	.+6      	; 0x47a <__vector_11+0x82>
    if(systime_ms >= 1000) {
        systime_ms = 0;
        systime_s++;
        if(systime_s >= 60) {
            systime_s = 0;
            systime_m++;
 474:	80 93 55 02 	sts	0x0255, r24
 478:	15 c0       	rjmp	.+42     	; 0x4a4 <__vector_11+0xac>
            if(systime_m >= 60) {
                systime_m = 0;
 47a:	10 92 55 02 	sts	0x0255, r1
                systime_h++;
 47e:	80 91 54 02 	lds	r24, 0x0254
 482:	8f 5f       	subi	r24, 0xFF	; 255
                if(systime_h >= 24) {
 484:	88 31       	cpi	r24, 0x18	; 24
 486:	18 f4       	brcc	.+6      	; 0x48e <__vector_11+0x96>
        if(systime_s >= 60) {
            systime_s = 0;
            systime_m++;
            if(systime_m >= 60) {
                systime_m = 0;
                systime_h++;
 488:	80 93 54 02 	sts	0x0254, r24
 48c:	0b c0       	rjmp	.+22     	; 0x4a4 <__vector_11+0xac>
                if(systime_h >= 24) {
                    systime_h = 0;
 48e:	10 92 54 02 	sts	0x0254, r1
                    systime_d++;                    
 492:	80 91 52 02 	lds	r24, 0x0252
 496:	90 91 53 02 	lds	r25, 0x0253
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	90 93 53 02 	sts	0x0253, r25
 4a0:	80 93 52 02 	sts	0x0252, r24
                }
            }
        }        
    }
}
 4a4:	bf 91       	pop	r27
 4a6:	af 91       	pop	r26
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <timer1_1ms_init>:
/*!
* @brief Disable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_disable(void) {
    TIMSK1 &= ~(1<<OCIE1A); // Disable Output compare Interrupt on Match A
 4b8:	af e6       	ldi	r26, 0x6F	; 111
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	8c 91       	ld	r24, X
 4be:	8d 7f       	andi	r24, 0xFD	; 253
 4c0:	8c 93       	st	X, r24
    TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10)); // Disable timer1 clock source (disables timer)
 4c2:	e1 e8       	ldi	r30, 0x81	; 129
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	88 7f       	andi	r24, 0xF8	; 248
 4ca:	80 83       	st	Z, r24
*/
void timer1_1ms_init(void) {
    static uint16_t timer1_1ms_compare_value = 250-1;
        
    timer1_disable();
    TCCR1A = 0x00;  // Make sure no pins are set to output
 4cc:	10 92 80 00 	sts	0x0080, r1
    TCCR1B |= (1<<WGM12) | TIMER1_PRESCALE_MASK;  // Set CTC, prescalar to clk(io)/64 (250 counts per 1ms)
 4d0:	80 81       	ld	r24, Z
 4d2:	8b 60       	ori	r24, 0x0B	; 11
 4d4:	80 83       	st	Z, r24
    OCR1A = timer1_1ms_compare_value;    
 4d6:	89 ef       	ldi	r24, 0xF9	; 249
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	90 93 89 00 	sts	0x0089, r25
 4de:	80 93 88 00 	sts	0x0088, r24
/*!
* @brief Enable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_enable(void) {
    TIMSK1 |= (1<<OCIE1A);  // Enable Output Compare Interrupt on Match A
 4e2:	8c 91       	ld	r24, X
 4e4:	82 60       	ori	r24, 0x02	; 2
 4e6:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_PRESCALE_MASK; // Enable timer1 clock source (disables timer)
 4e8:	80 81       	ld	r24, Z
 4ea:	83 60       	ori	r24, 0x03	; 3
 4ec:	80 83       	st	Z, r24
 4ee:	08 95       	ret

000004f0 <uart0_init>:
* @return void
*/
void uart0_init(uint32_t cpu_freq, uint32_t uart_baud) {    
    // Set UART0 to no parity, 8 data bits, 1 stop bit
    // Enable Tx & Rx UART
    UCSR0A = 0x00;
 4f0:	10 92 c0 00 	sts	0x00C0, r1
    UCSR0B = 0x18;
 4f4:	e8 e1       	ldi	r30, 0x18	; 24
 4f6:	e0 93 c1 00 	sts	0x00C1, r30
    UCSR0C = 0x06;
 4fa:	e6 e0       	ldi	r30, 0x06	; 6
 4fc:	e0 93 c2 00 	sts	0x00C2, r30
    
    // Set UART0 Baud Rate
    UBRR0H = (((cpu_freq/uart_baud)/32)-1)>>8;  // Set baud rate div (upper register)
 500:	0e 94 ac 02 	call	0x558	; 0x558 <__udivmodsi4>
 504:	ba 01       	movw	r22, r20
 506:	a9 01       	movw	r20, r18
 508:	68 94       	set
 50a:	14 f8       	bld	r1, 4
 50c:	76 95       	lsr	r23
 50e:	67 95       	ror	r22
 510:	57 95       	ror	r21
 512:	47 95       	ror	r20
 514:	16 94       	lsr	r1
 516:	d1 f7       	brne	.-12     	; 0x50c <uart0_init+0x1c>
 518:	db 01       	movw	r26, r22
 51a:	ca 01       	movw	r24, r20
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	a1 09       	sbc	r26, r1
 520:	b1 09       	sbc	r27, r1
 522:	89 2f       	mov	r24, r25
 524:	9a 2f       	mov	r25, r26
 526:	ab 2f       	mov	r26, r27
 528:	bb 27       	eor	r27, r27
 52a:	80 93 c5 00 	sts	0x00C5, r24
    UBRR0L = (((cpu_freq/uart_baud)/32)-1);     // Set baud rate div (lower register)   
 52e:	2f ef       	ldi	r18, 0xFF	; 255
 530:	24 0f       	add	r18, r20
 532:	20 93 c4 00 	sts	0x00C4, r18
 536:	08 95       	ret

00000538 <uart0_put>:
* @brief Write byte over UART0
* @param[in] uint8_t ch     Byte to write
* @return void
*/
void uart0_put(uint8_t ch) {
    while((UCSR0A & (1<<UDRE0)) == 0x00);    // Wait until tx buffer is empty
 538:	e0 ec       	ldi	r30, 0xC0	; 192
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	90 81       	ld	r25, Z
 53e:	95 ff       	sbrs	r25, 5
 540:	fd cf       	rjmp	.-6      	; 0x53c <uart0_put+0x4>
    UDR0 = ch;      // Load tx buffer with character to send
 542:	80 93 c6 00 	sts	0x00C6, r24
 546:	08 95       	ret

00000548 <uart0_get>:
/*!
* @brief Get uint8_t over UART0
* @return uint8_t   Value from UART0
*/
uint8_t uart0_get(void) {
    while((UCSR0A & (1<<RXC0)) == 0x00);    // Wait until rx char flag is set
 548:	e0 ec       	ldi	r30, 0xC0	; 192
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	88 23       	and	r24, r24
 550:	ec f7       	brge	.-6      	; 0x54c <uart0_get+0x4>
    return(UDR0);    
 552:	80 91 c6 00 	lds	r24, 0x00C6
}
 556:	08 95       	ret

00000558 <__udivmodsi4>:
 558:	a1 e2       	ldi	r26, 0x21	; 33
 55a:	1a 2e       	mov	r1, r26
 55c:	aa 1b       	sub	r26, r26
 55e:	bb 1b       	sub	r27, r27
 560:	fd 01       	movw	r30, r26
 562:	0d c0       	rjmp	.+26     	; 0x57e <__udivmodsi4_ep>

00000564 <__udivmodsi4_loop>:
 564:	aa 1f       	adc	r26, r26
 566:	bb 1f       	adc	r27, r27
 568:	ee 1f       	adc	r30, r30
 56a:	ff 1f       	adc	r31, r31
 56c:	a2 17       	cp	r26, r18
 56e:	b3 07       	cpc	r27, r19
 570:	e4 07       	cpc	r30, r20
 572:	f5 07       	cpc	r31, r21
 574:	20 f0       	brcs	.+8      	; 0x57e <__udivmodsi4_ep>
 576:	a2 1b       	sub	r26, r18
 578:	b3 0b       	sbc	r27, r19
 57a:	e4 0b       	sbc	r30, r20
 57c:	f5 0b       	sbc	r31, r21

0000057e <__udivmodsi4_ep>:
 57e:	66 1f       	adc	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	88 1f       	adc	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	1a 94       	dec	r1
 588:	69 f7       	brne	.-38     	; 0x564 <__udivmodsi4_loop>
 58a:	60 95       	com	r22
 58c:	70 95       	com	r23
 58e:	80 95       	com	r24
 590:	90 95       	com	r25
 592:	9b 01       	movw	r18, r22
 594:	ac 01       	movw	r20, r24
 596:	bd 01       	movw	r22, r26
 598:	cf 01       	movw	r24, r30
 59a:	08 95       	ret

0000059c <fprintf>:
 59c:	a0 e0       	ldi	r26, 0x00	; 0
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	e4 ed       	ldi	r30, 0xD4	; 212
 5a2:	f2 e0       	ldi	r31, 0x02	; 2
 5a4:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__prologue_saves__+0x20>
 5a8:	ae 01       	movw	r20, r28
 5aa:	47 5f       	subi	r20, 0xF7	; 247
 5ac:	5f 4f       	sbci	r21, 0xFF	; 255
 5ae:	6f 81       	ldd	r22, Y+7	; 0x07
 5b0:	78 85       	ldd	r23, Y+8	; 0x08
 5b2:	8d 81       	ldd	r24, Y+5	; 0x05
 5b4:	9e 81       	ldd	r25, Y+6	; 0x06
 5b6:	0e 94 14 03 	call	0x628	; 0x628 <vfprintf>
 5ba:	e2 e0       	ldi	r30, 0x02	; 2
 5bc:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <__epilogue_restores__+0x20>

000005c0 <fwrite>:
 5c0:	a0 e0       	ldi	r26, 0x00	; 0
 5c2:	b0 e0       	ldi	r27, 0x00	; 0
 5c4:	e6 ee       	ldi	r30, 0xE6	; 230
 5c6:	f2 e0       	ldi	r31, 0x02	; 2
 5c8:	0c 94 98 05 	jmp	0xb30	; 0xb30 <__prologue_saves__+0xc>
 5cc:	5b 01       	movw	r10, r22
 5ce:	4a 01       	movw	r8, r20
 5d0:	79 01       	movw	r14, r18
 5d2:	d9 01       	movw	r26, r18
 5d4:	13 96       	adiw	r26, 0x03	; 3
 5d6:	2c 91       	ld	r18, X
 5d8:	21 ff       	sbrs	r18, 1
 5da:	1d c0       	rjmp	.+58     	; 0x616 <fwrite+0x56>
 5dc:	c0 e0       	ldi	r28, 0x00	; 0
 5de:	d0 e0       	ldi	r29, 0x00	; 0
 5e0:	c8 15       	cp	r28, r8
 5e2:	d9 05       	cpc	r29, r9
 5e4:	d9 f0       	breq	.+54     	; 0x61c <fwrite+0x5c>
 5e6:	8c 01       	movw	r16, r24
 5e8:	6c 01       	movw	r12, r24
 5ea:	ca 0c       	add	r12, r10
 5ec:	db 1c       	adc	r13, r11
 5ee:	c8 01       	movw	r24, r16
 5f0:	0c 15       	cp	r16, r12
 5f2:	1d 05       	cpc	r17, r13
 5f4:	71 f0       	breq	.+28     	; 0x612 <fwrite+0x52>
 5f6:	0f 5f       	subi	r16, 0xFF	; 255
 5f8:	1f 4f       	sbci	r17, 0xFF	; 255
 5fa:	d7 01       	movw	r26, r14
 5fc:	18 96       	adiw	r26, 0x08	; 8
 5fe:	ed 91       	ld	r30, X+
 600:	fc 91       	ld	r31, X
 602:	19 97       	sbiw	r26, 0x09	; 9
 604:	b7 01       	movw	r22, r14
 606:	dc 01       	movw	r26, r24
 608:	8c 91       	ld	r24, X
 60a:	09 95       	icall
 60c:	89 2b       	or	r24, r25
 60e:	79 f3       	breq	.-34     	; 0x5ee <fwrite+0x2e>
 610:	05 c0       	rjmp	.+10     	; 0x61c <fwrite+0x5c>
 612:	21 96       	adiw	r28, 0x01	; 1
 614:	e5 cf       	rjmp	.-54     	; 0x5e0 <fwrite+0x20>
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	01 c0       	rjmp	.+2      	; 0x61e <fwrite+0x5e>
 61c:	ce 01       	movw	r24, r28
 61e:	cd b7       	in	r28, 0x3d	; 61
 620:	de b7       	in	r29, 0x3e	; 62
 622:	ec e0       	ldi	r30, 0x0C	; 12
 624:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__epilogue_restores__+0xc>

00000628 <vfprintf>:
 628:	ac e0       	ldi	r26, 0x0C	; 12
 62a:	b0 e0       	ldi	r27, 0x00	; 0
 62c:	ea e1       	ldi	r30, 0x1A	; 26
 62e:	f3 e0       	ldi	r31, 0x03	; 3
 630:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__prologue_saves__>
 634:	7c 01       	movw	r14, r24
 636:	6b 01       	movw	r12, r22
 638:	8a 01       	movw	r16, r20
 63a:	fc 01       	movw	r30, r24
 63c:	17 82       	std	Z+7, r1	; 0x07
 63e:	16 82       	std	Z+6, r1	; 0x06
 640:	83 81       	ldd	r24, Z+3	; 0x03
 642:	81 ff       	sbrs	r24, 1
 644:	bd c1       	rjmp	.+890    	; 0x9c0 <__stack+0xc1>
 646:	ce 01       	movw	r24, r28
 648:	01 96       	adiw	r24, 0x01	; 1
 64a:	4c 01       	movw	r8, r24
 64c:	f7 01       	movw	r30, r14
 64e:	93 81       	ldd	r25, Z+3	; 0x03
 650:	f6 01       	movw	r30, r12
 652:	93 fd       	sbrc	r25, 3
 654:	85 91       	lpm	r24, Z+
 656:	93 ff       	sbrs	r25, 3
 658:	81 91       	ld	r24, Z+
 65a:	6f 01       	movw	r12, r30
 65c:	88 23       	and	r24, r24
 65e:	09 f4       	brne	.+2      	; 0x662 <vfprintf+0x3a>
 660:	ab c1       	rjmp	.+854    	; 0x9b8 <__stack+0xb9>
 662:	85 32       	cpi	r24, 0x25	; 37
 664:	39 f4       	brne	.+14     	; 0x674 <vfprintf+0x4c>
 666:	93 fd       	sbrc	r25, 3
 668:	85 91       	lpm	r24, Z+
 66a:	93 ff       	sbrs	r25, 3
 66c:	81 91       	ld	r24, Z+
 66e:	6f 01       	movw	r12, r30
 670:	85 32       	cpi	r24, 0x25	; 37
 672:	29 f4       	brne	.+10     	; 0x67e <vfprintf+0x56>
 674:	b7 01       	movw	r22, r14
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 67c:	e7 cf       	rjmp	.-50     	; 0x64c <vfprintf+0x24>
 67e:	51 2c       	mov	r5, r1
 680:	31 2c       	mov	r3, r1
 682:	20 e0       	ldi	r18, 0x00	; 0
 684:	20 32       	cpi	r18, 0x20	; 32
 686:	a0 f4       	brcc	.+40     	; 0x6b0 <vfprintf+0x88>
 688:	8b 32       	cpi	r24, 0x2B	; 43
 68a:	69 f0       	breq	.+26     	; 0x6a6 <vfprintf+0x7e>
 68c:	30 f4       	brcc	.+12     	; 0x69a <vfprintf+0x72>
 68e:	80 32       	cpi	r24, 0x20	; 32
 690:	59 f0       	breq	.+22     	; 0x6a8 <vfprintf+0x80>
 692:	83 32       	cpi	r24, 0x23	; 35
 694:	69 f4       	brne	.+26     	; 0x6b0 <vfprintf+0x88>
 696:	20 61       	ori	r18, 0x10	; 16
 698:	2c c0       	rjmp	.+88     	; 0x6f2 <vfprintf+0xca>
 69a:	8d 32       	cpi	r24, 0x2D	; 45
 69c:	39 f0       	breq	.+14     	; 0x6ac <vfprintf+0x84>
 69e:	80 33       	cpi	r24, 0x30	; 48
 6a0:	39 f4       	brne	.+14     	; 0x6b0 <vfprintf+0x88>
 6a2:	21 60       	ori	r18, 0x01	; 1
 6a4:	26 c0       	rjmp	.+76     	; 0x6f2 <vfprintf+0xca>
 6a6:	22 60       	ori	r18, 0x02	; 2
 6a8:	24 60       	ori	r18, 0x04	; 4
 6aa:	23 c0       	rjmp	.+70     	; 0x6f2 <vfprintf+0xca>
 6ac:	28 60       	ori	r18, 0x08	; 8
 6ae:	21 c0       	rjmp	.+66     	; 0x6f2 <vfprintf+0xca>
 6b0:	27 fd       	sbrc	r18, 7
 6b2:	27 c0       	rjmp	.+78     	; 0x702 <vfprintf+0xda>
 6b4:	30 ed       	ldi	r19, 0xD0	; 208
 6b6:	38 0f       	add	r19, r24
 6b8:	3a 30       	cpi	r19, 0x0A	; 10
 6ba:	78 f4       	brcc	.+30     	; 0x6da <vfprintf+0xb2>
 6bc:	26 ff       	sbrs	r18, 6
 6be:	06 c0       	rjmp	.+12     	; 0x6cc <vfprintf+0xa4>
 6c0:	fa e0       	ldi	r31, 0x0A	; 10
 6c2:	5f 9e       	mul	r5, r31
 6c4:	30 0d       	add	r19, r0
 6c6:	11 24       	eor	r1, r1
 6c8:	53 2e       	mov	r5, r19
 6ca:	13 c0       	rjmp	.+38     	; 0x6f2 <vfprintf+0xca>
 6cc:	8a e0       	ldi	r24, 0x0A	; 10
 6ce:	38 9e       	mul	r3, r24
 6d0:	30 0d       	add	r19, r0
 6d2:	11 24       	eor	r1, r1
 6d4:	33 2e       	mov	r3, r19
 6d6:	20 62       	ori	r18, 0x20	; 32
 6d8:	0c c0       	rjmp	.+24     	; 0x6f2 <vfprintf+0xca>
 6da:	8e 32       	cpi	r24, 0x2E	; 46
 6dc:	21 f4       	brne	.+8      	; 0x6e6 <vfprintf+0xbe>
 6de:	26 fd       	sbrc	r18, 6
 6e0:	6b c1       	rjmp	.+726    	; 0x9b8 <__stack+0xb9>
 6e2:	20 64       	ori	r18, 0x40	; 64
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <vfprintf+0xca>
 6e6:	8c 36       	cpi	r24, 0x6C	; 108
 6e8:	11 f4       	brne	.+4      	; 0x6ee <vfprintf+0xc6>
 6ea:	20 68       	ori	r18, 0x80	; 128
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <vfprintf+0xca>
 6ee:	88 36       	cpi	r24, 0x68	; 104
 6f0:	41 f4       	brne	.+16     	; 0x702 <vfprintf+0xda>
 6f2:	f6 01       	movw	r30, r12
 6f4:	93 fd       	sbrc	r25, 3
 6f6:	85 91       	lpm	r24, Z+
 6f8:	93 ff       	sbrs	r25, 3
 6fa:	81 91       	ld	r24, Z+
 6fc:	6f 01       	movw	r12, r30
 6fe:	81 11       	cpse	r24, r1
 700:	c1 cf       	rjmp	.-126    	; 0x684 <vfprintf+0x5c>
 702:	98 2f       	mov	r25, r24
 704:	9f 7d       	andi	r25, 0xDF	; 223
 706:	95 54       	subi	r25, 0x45	; 69
 708:	93 30       	cpi	r25, 0x03	; 3
 70a:	28 f4       	brcc	.+10     	; 0x716 <vfprintf+0xee>
 70c:	0c 5f       	subi	r16, 0xFC	; 252
 70e:	1f 4f       	sbci	r17, 0xFF	; 255
 710:	ff e3       	ldi	r31, 0x3F	; 63
 712:	f9 83       	std	Y+1, r31	; 0x01
 714:	0d c0       	rjmp	.+26     	; 0x730 <vfprintf+0x108>
 716:	83 36       	cpi	r24, 0x63	; 99
 718:	31 f0       	breq	.+12     	; 0x726 <vfprintf+0xfe>
 71a:	83 37       	cpi	r24, 0x73	; 115
 71c:	71 f0       	breq	.+28     	; 0x73a <vfprintf+0x112>
 71e:	83 35       	cpi	r24, 0x53	; 83
 720:	09 f0       	breq	.+2      	; 0x724 <vfprintf+0xfc>
 722:	5b c0       	rjmp	.+182    	; 0x7da <vfprintf+0x1b2>
 724:	22 c0       	rjmp	.+68     	; 0x76a <vfprintf+0x142>
 726:	f8 01       	movw	r30, r16
 728:	80 81       	ld	r24, Z
 72a:	89 83       	std	Y+1, r24	; 0x01
 72c:	0e 5f       	subi	r16, 0xFE	; 254
 72e:	1f 4f       	sbci	r17, 0xFF	; 255
 730:	44 24       	eor	r4, r4
 732:	43 94       	inc	r4
 734:	51 2c       	mov	r5, r1
 736:	54 01       	movw	r10, r8
 738:	15 c0       	rjmp	.+42     	; 0x764 <vfprintf+0x13c>
 73a:	38 01       	movw	r6, r16
 73c:	f2 e0       	ldi	r31, 0x02	; 2
 73e:	6f 0e       	add	r6, r31
 740:	71 1c       	adc	r7, r1
 742:	f8 01       	movw	r30, r16
 744:	a0 80       	ld	r10, Z
 746:	b1 80       	ldd	r11, Z+1	; 0x01
 748:	26 ff       	sbrs	r18, 6
 74a:	03 c0       	rjmp	.+6      	; 0x752 <vfprintf+0x12a>
 74c:	65 2d       	mov	r22, r5
 74e:	70 e0       	ldi	r23, 0x00	; 0
 750:	02 c0       	rjmp	.+4      	; 0x756 <vfprintf+0x12e>
 752:	6f ef       	ldi	r22, 0xFF	; 255
 754:	7f ef       	ldi	r23, 0xFF	; 255
 756:	c5 01       	movw	r24, r10
 758:	2c 87       	std	Y+12, r18	; 0x0c
 75a:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <strnlen>
 75e:	2c 01       	movw	r4, r24
 760:	83 01       	movw	r16, r6
 762:	2c 85       	ldd	r18, Y+12	; 0x0c
 764:	2f 77       	andi	r18, 0x7F	; 127
 766:	22 2e       	mov	r2, r18
 768:	17 c0       	rjmp	.+46     	; 0x798 <vfprintf+0x170>
 76a:	38 01       	movw	r6, r16
 76c:	f2 e0       	ldi	r31, 0x02	; 2
 76e:	6f 0e       	add	r6, r31
 770:	71 1c       	adc	r7, r1
 772:	f8 01       	movw	r30, r16
 774:	a0 80       	ld	r10, Z
 776:	b1 80       	ldd	r11, Z+1	; 0x01
 778:	26 ff       	sbrs	r18, 6
 77a:	03 c0       	rjmp	.+6      	; 0x782 <vfprintf+0x15a>
 77c:	65 2d       	mov	r22, r5
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <vfprintf+0x15e>
 782:	6f ef       	ldi	r22, 0xFF	; 255
 784:	7f ef       	ldi	r23, 0xFF	; 255
 786:	c5 01       	movw	r24, r10
 788:	2c 87       	std	Y+12, r18	; 0x0c
 78a:	0e 94 e6 04 	call	0x9cc	; 0x9cc <strnlen_P>
 78e:	2c 01       	movw	r4, r24
 790:	2c 85       	ldd	r18, Y+12	; 0x0c
 792:	20 68       	ori	r18, 0x80	; 128
 794:	22 2e       	mov	r2, r18
 796:	83 01       	movw	r16, r6
 798:	23 fc       	sbrc	r2, 3
 79a:	1b c0       	rjmp	.+54     	; 0x7d2 <vfprintf+0x1aa>
 79c:	83 2d       	mov	r24, r3
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	48 16       	cp	r4, r24
 7a2:	59 06       	cpc	r5, r25
 7a4:	b0 f4       	brcc	.+44     	; 0x7d2 <vfprintf+0x1aa>
 7a6:	b7 01       	movw	r22, r14
 7a8:	80 e2       	ldi	r24, 0x20	; 32
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 7b0:	3a 94       	dec	r3
 7b2:	f4 cf       	rjmp	.-24     	; 0x79c <vfprintf+0x174>
 7b4:	f5 01       	movw	r30, r10
 7b6:	27 fc       	sbrc	r2, 7
 7b8:	85 91       	lpm	r24, Z+
 7ba:	27 fe       	sbrs	r2, 7
 7bc:	81 91       	ld	r24, Z+
 7be:	5f 01       	movw	r10, r30
 7c0:	b7 01       	movw	r22, r14
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 7c8:	31 10       	cpse	r3, r1
 7ca:	3a 94       	dec	r3
 7cc:	f1 e0       	ldi	r31, 0x01	; 1
 7ce:	4f 1a       	sub	r4, r31
 7d0:	51 08       	sbc	r5, r1
 7d2:	41 14       	cp	r4, r1
 7d4:	51 04       	cpc	r5, r1
 7d6:	71 f7       	brne	.-36     	; 0x7b4 <vfprintf+0x18c>
 7d8:	e5 c0       	rjmp	.+458    	; 0x9a4 <__stack+0xa5>
 7da:	84 36       	cpi	r24, 0x64	; 100
 7dc:	11 f0       	breq	.+4      	; 0x7e2 <vfprintf+0x1ba>
 7de:	89 36       	cpi	r24, 0x69	; 105
 7e0:	39 f5       	brne	.+78     	; 0x830 <vfprintf+0x208>
 7e2:	f8 01       	movw	r30, r16
 7e4:	27 ff       	sbrs	r18, 7
 7e6:	07 c0       	rjmp	.+14     	; 0x7f6 <vfprintf+0x1ce>
 7e8:	60 81       	ld	r22, Z
 7ea:	71 81       	ldd	r23, Z+1	; 0x01
 7ec:	82 81       	ldd	r24, Z+2	; 0x02
 7ee:	93 81       	ldd	r25, Z+3	; 0x03
 7f0:	0c 5f       	subi	r16, 0xFC	; 252
 7f2:	1f 4f       	sbci	r17, 0xFF	; 255
 7f4:	08 c0       	rjmp	.+16     	; 0x806 <vfprintf+0x1de>
 7f6:	60 81       	ld	r22, Z
 7f8:	71 81       	ldd	r23, Z+1	; 0x01
 7fa:	07 2e       	mov	r0, r23
 7fc:	00 0c       	add	r0, r0
 7fe:	88 0b       	sbc	r24, r24
 800:	99 0b       	sbc	r25, r25
 802:	0e 5f       	subi	r16, 0xFE	; 254
 804:	1f 4f       	sbci	r17, 0xFF	; 255
 806:	2f 76       	andi	r18, 0x6F	; 111
 808:	72 2e       	mov	r7, r18
 80a:	97 ff       	sbrs	r25, 7
 80c:	09 c0       	rjmp	.+18     	; 0x820 <vfprintf+0x1f8>
 80e:	90 95       	com	r25
 810:	80 95       	com	r24
 812:	70 95       	com	r23
 814:	61 95       	neg	r22
 816:	7f 4f       	sbci	r23, 0xFF	; 255
 818:	8f 4f       	sbci	r24, 0xFF	; 255
 81a:	9f 4f       	sbci	r25, 0xFF	; 255
 81c:	20 68       	ori	r18, 0x80	; 128
 81e:	72 2e       	mov	r7, r18
 820:	2a e0       	ldi	r18, 0x0A	; 10
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	a4 01       	movw	r20, r8
 826:	0e 94 34 05 	call	0xa68	; 0xa68 <__ultoa_invert>
 82a:	a8 2e       	mov	r10, r24
 82c:	a8 18       	sub	r10, r8
 82e:	44 c0       	rjmp	.+136    	; 0x8b8 <vfprintf+0x290>
 830:	85 37       	cpi	r24, 0x75	; 117
 832:	29 f4       	brne	.+10     	; 0x83e <vfprintf+0x216>
 834:	2f 7e       	andi	r18, 0xEF	; 239
 836:	b2 2e       	mov	r11, r18
 838:	2a e0       	ldi	r18, 0x0A	; 10
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	25 c0       	rjmp	.+74     	; 0x888 <vfprintf+0x260>
 83e:	f2 2f       	mov	r31, r18
 840:	f9 7f       	andi	r31, 0xF9	; 249
 842:	bf 2e       	mov	r11, r31
 844:	8f 36       	cpi	r24, 0x6F	; 111
 846:	c1 f0       	breq	.+48     	; 0x878 <vfprintf+0x250>
 848:	18 f4       	brcc	.+6      	; 0x850 <vfprintf+0x228>
 84a:	88 35       	cpi	r24, 0x58	; 88
 84c:	79 f0       	breq	.+30     	; 0x86c <vfprintf+0x244>
 84e:	b4 c0       	rjmp	.+360    	; 0x9b8 <__stack+0xb9>
 850:	80 37       	cpi	r24, 0x70	; 112
 852:	19 f0       	breq	.+6      	; 0x85a <vfprintf+0x232>
 854:	88 37       	cpi	r24, 0x78	; 120
 856:	21 f0       	breq	.+8      	; 0x860 <vfprintf+0x238>
 858:	af c0       	rjmp	.+350    	; 0x9b8 <__stack+0xb9>
 85a:	2f 2f       	mov	r18, r31
 85c:	20 61       	ori	r18, 0x10	; 16
 85e:	b2 2e       	mov	r11, r18
 860:	b4 fe       	sbrs	r11, 4
 862:	0d c0       	rjmp	.+26     	; 0x87e <vfprintf+0x256>
 864:	8b 2d       	mov	r24, r11
 866:	84 60       	ori	r24, 0x04	; 4
 868:	b8 2e       	mov	r11, r24
 86a:	09 c0       	rjmp	.+18     	; 0x87e <vfprintf+0x256>
 86c:	24 ff       	sbrs	r18, 4
 86e:	0a c0       	rjmp	.+20     	; 0x884 <vfprintf+0x25c>
 870:	9f 2f       	mov	r25, r31
 872:	96 60       	ori	r25, 0x06	; 6
 874:	b9 2e       	mov	r11, r25
 876:	06 c0       	rjmp	.+12     	; 0x884 <vfprintf+0x25c>
 878:	28 e0       	ldi	r18, 0x08	; 8
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	05 c0       	rjmp	.+10     	; 0x888 <vfprintf+0x260>
 87e:	20 e1       	ldi	r18, 0x10	; 16
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	02 c0       	rjmp	.+4      	; 0x888 <vfprintf+0x260>
 884:	20 e1       	ldi	r18, 0x10	; 16
 886:	32 e0       	ldi	r19, 0x02	; 2
 888:	f8 01       	movw	r30, r16
 88a:	b7 fe       	sbrs	r11, 7
 88c:	07 c0       	rjmp	.+14     	; 0x89c <vfprintf+0x274>
 88e:	60 81       	ld	r22, Z
 890:	71 81       	ldd	r23, Z+1	; 0x01
 892:	82 81       	ldd	r24, Z+2	; 0x02
 894:	93 81       	ldd	r25, Z+3	; 0x03
 896:	0c 5f       	subi	r16, 0xFC	; 252
 898:	1f 4f       	sbci	r17, 0xFF	; 255
 89a:	06 c0       	rjmp	.+12     	; 0x8a8 <vfprintf+0x280>
 89c:	60 81       	ld	r22, Z
 89e:	71 81       	ldd	r23, Z+1	; 0x01
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	0e 5f       	subi	r16, 0xFE	; 254
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	a4 01       	movw	r20, r8
 8aa:	0e 94 34 05 	call	0xa68	; 0xa68 <__ultoa_invert>
 8ae:	a8 2e       	mov	r10, r24
 8b0:	a8 18       	sub	r10, r8
 8b2:	fb 2d       	mov	r31, r11
 8b4:	ff 77       	andi	r31, 0x7F	; 127
 8b6:	7f 2e       	mov	r7, r31
 8b8:	76 fe       	sbrs	r7, 6
 8ba:	0b c0       	rjmp	.+22     	; 0x8d2 <vfprintf+0x2aa>
 8bc:	37 2d       	mov	r19, r7
 8be:	3e 7f       	andi	r19, 0xFE	; 254
 8c0:	a5 14       	cp	r10, r5
 8c2:	50 f4       	brcc	.+20     	; 0x8d8 <vfprintf+0x2b0>
 8c4:	74 fe       	sbrs	r7, 4
 8c6:	0a c0       	rjmp	.+20     	; 0x8dc <vfprintf+0x2b4>
 8c8:	72 fc       	sbrc	r7, 2
 8ca:	08 c0       	rjmp	.+16     	; 0x8dc <vfprintf+0x2b4>
 8cc:	37 2d       	mov	r19, r7
 8ce:	3e 7e       	andi	r19, 0xEE	; 238
 8d0:	05 c0       	rjmp	.+10     	; 0x8dc <vfprintf+0x2b4>
 8d2:	ba 2c       	mov	r11, r10
 8d4:	37 2d       	mov	r19, r7
 8d6:	03 c0       	rjmp	.+6      	; 0x8de <vfprintf+0x2b6>
 8d8:	ba 2c       	mov	r11, r10
 8da:	01 c0       	rjmp	.+2      	; 0x8de <vfprintf+0x2b6>
 8dc:	b5 2c       	mov	r11, r5
 8de:	34 ff       	sbrs	r19, 4
 8e0:	0d c0       	rjmp	.+26     	; 0x8fc <vfprintf+0x2d4>
 8e2:	fe 01       	movw	r30, r28
 8e4:	ea 0d       	add	r30, r10
 8e6:	f1 1d       	adc	r31, r1
 8e8:	80 81       	ld	r24, Z
 8ea:	80 33       	cpi	r24, 0x30	; 48
 8ec:	11 f4       	brne	.+4      	; 0x8f2 <vfprintf+0x2ca>
 8ee:	39 7e       	andi	r19, 0xE9	; 233
 8f0:	09 c0       	rjmp	.+18     	; 0x904 <__stack+0x5>
 8f2:	32 ff       	sbrs	r19, 2
 8f4:	06 c0       	rjmp	.+12     	; 0x902 <__stack+0x3>
 8f6:	b3 94       	inc	r11
 8f8:	b3 94       	inc	r11
 8fa:	04 c0       	rjmp	.+8      	; 0x904 <__stack+0x5>
 8fc:	83 2f       	mov	r24, r19
 8fe:	86 78       	andi	r24, 0x86	; 134
 900:	09 f0       	breq	.+2      	; 0x904 <__stack+0x5>
 902:	b3 94       	inc	r11
 904:	33 fd       	sbrc	r19, 3
 906:	13 c0       	rjmp	.+38     	; 0x92e <__stack+0x2f>
 908:	30 ff       	sbrs	r19, 0
 90a:	06 c0       	rjmp	.+12     	; 0x918 <__stack+0x19>
 90c:	5a 2c       	mov	r5, r10
 90e:	b3 14       	cp	r11, r3
 910:	18 f4       	brcc	.+6      	; 0x918 <__stack+0x19>
 912:	53 0c       	add	r5, r3
 914:	5b 18       	sub	r5, r11
 916:	b3 2c       	mov	r11, r3
 918:	b3 14       	cp	r11, r3
 91a:	68 f4       	brcc	.+26     	; 0x936 <__stack+0x37>
 91c:	b7 01       	movw	r22, r14
 91e:	80 e2       	ldi	r24, 0x20	; 32
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	3c 87       	std	Y+12, r19	; 0x0c
 924:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 928:	b3 94       	inc	r11
 92a:	3c 85       	ldd	r19, Y+12	; 0x0c
 92c:	f5 cf       	rjmp	.-22     	; 0x918 <__stack+0x19>
 92e:	b3 14       	cp	r11, r3
 930:	10 f4       	brcc	.+4      	; 0x936 <__stack+0x37>
 932:	3b 18       	sub	r3, r11
 934:	01 c0       	rjmp	.+2      	; 0x938 <__stack+0x39>
 936:	31 2c       	mov	r3, r1
 938:	34 ff       	sbrs	r19, 4
 93a:	12 c0       	rjmp	.+36     	; 0x960 <__stack+0x61>
 93c:	b7 01       	movw	r22, r14
 93e:	80 e3       	ldi	r24, 0x30	; 48
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	3c 87       	std	Y+12, r19	; 0x0c
 944:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 948:	3c 85       	ldd	r19, Y+12	; 0x0c
 94a:	32 ff       	sbrs	r19, 2
 94c:	17 c0       	rjmp	.+46     	; 0x97c <__stack+0x7d>
 94e:	31 fd       	sbrc	r19, 1
 950:	03 c0       	rjmp	.+6      	; 0x958 <__stack+0x59>
 952:	88 e7       	ldi	r24, 0x78	; 120
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	02 c0       	rjmp	.+4      	; 0x95c <__stack+0x5d>
 958:	88 e5       	ldi	r24, 0x58	; 88
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	b7 01       	movw	r22, r14
 95e:	0c c0       	rjmp	.+24     	; 0x978 <__stack+0x79>
 960:	83 2f       	mov	r24, r19
 962:	86 78       	andi	r24, 0x86	; 134
 964:	59 f0       	breq	.+22     	; 0x97c <__stack+0x7d>
 966:	31 ff       	sbrs	r19, 1
 968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x6f>
 96a:	8b e2       	ldi	r24, 0x2B	; 43
 96c:	01 c0       	rjmp	.+2      	; 0x970 <__stack+0x71>
 96e:	80 e2       	ldi	r24, 0x20	; 32
 970:	37 fd       	sbrc	r19, 7
 972:	8d e2       	ldi	r24, 0x2D	; 45
 974:	b7 01       	movw	r22, r14
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 97c:	a5 14       	cp	r10, r5
 97e:	38 f4       	brcc	.+14     	; 0x98e <__stack+0x8f>
 980:	b7 01       	movw	r22, r14
 982:	80 e3       	ldi	r24, 0x30	; 48
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 98a:	5a 94       	dec	r5
 98c:	f7 cf       	rjmp	.-18     	; 0x97c <__stack+0x7d>
 98e:	aa 94       	dec	r10
 990:	f4 01       	movw	r30, r8
 992:	ea 0d       	add	r30, r10
 994:	f1 1d       	adc	r31, r1
 996:	80 81       	ld	r24, Z
 998:	b7 01       	movw	r22, r14
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 9a0:	a1 10       	cpse	r10, r1
 9a2:	f5 cf       	rjmp	.-22     	; 0x98e <__stack+0x8f>
 9a4:	33 20       	and	r3, r3
 9a6:	09 f4       	brne	.+2      	; 0x9aa <__stack+0xab>
 9a8:	51 ce       	rjmp	.-862    	; 0x64c <vfprintf+0x24>
 9aa:	b7 01       	movw	r22, r14
 9ac:	80 e2       	ldi	r24, 0x20	; 32
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <fputc>
 9b4:	3a 94       	dec	r3
 9b6:	f6 cf       	rjmp	.-20     	; 0x9a4 <__stack+0xa5>
 9b8:	f7 01       	movw	r30, r14
 9ba:	86 81       	ldd	r24, Z+6	; 0x06
 9bc:	97 81       	ldd	r25, Z+7	; 0x07
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <__stack+0xc5>
 9c0:	8f ef       	ldi	r24, 0xFF	; 255
 9c2:	9f ef       	ldi	r25, 0xFF	; 255
 9c4:	2c 96       	adiw	r28, 0x0c	; 12
 9c6:	e2 e1       	ldi	r30, 0x12	; 18
 9c8:	0c 94 ae 05 	jmp	0xb5c	; 0xb5c <__epilogue_restores__>

000009cc <strnlen_P>:
 9cc:	fc 01       	movw	r30, r24
 9ce:	05 90       	lpm	r0, Z+
 9d0:	61 50       	subi	r22, 0x01	; 1
 9d2:	70 40       	sbci	r23, 0x00	; 0
 9d4:	01 10       	cpse	r0, r1
 9d6:	d8 f7       	brcc	.-10     	; 0x9ce <strnlen_P+0x2>
 9d8:	80 95       	com	r24
 9da:	90 95       	com	r25
 9dc:	8e 0f       	add	r24, r30
 9de:	9f 1f       	adc	r25, r31
 9e0:	08 95       	ret

000009e2 <strnlen>:
 9e2:	fc 01       	movw	r30, r24
 9e4:	61 50       	subi	r22, 0x01	; 1
 9e6:	70 40       	sbci	r23, 0x00	; 0
 9e8:	01 90       	ld	r0, Z+
 9ea:	01 10       	cpse	r0, r1
 9ec:	d8 f7       	brcc	.-10     	; 0x9e4 <strnlen+0x2>
 9ee:	80 95       	com	r24
 9f0:	90 95       	com	r25
 9f2:	8e 0f       	add	r24, r30
 9f4:	9f 1f       	adc	r25, r31
 9f6:	08 95       	ret

000009f8 <fputc>:
 9f8:	0f 93       	push	r16
 9fa:	1f 93       	push	r17
 9fc:	cf 93       	push	r28
 9fe:	df 93       	push	r29
 a00:	fb 01       	movw	r30, r22
 a02:	23 81       	ldd	r18, Z+3	; 0x03
 a04:	21 fd       	sbrc	r18, 1
 a06:	03 c0       	rjmp	.+6      	; 0xa0e <fputc+0x16>
 a08:	8f ef       	ldi	r24, 0xFF	; 255
 a0a:	9f ef       	ldi	r25, 0xFF	; 255
 a0c:	28 c0       	rjmp	.+80     	; 0xa5e <fputc+0x66>
 a0e:	22 ff       	sbrs	r18, 2
 a10:	16 c0       	rjmp	.+44     	; 0xa3e <fputc+0x46>
 a12:	46 81       	ldd	r20, Z+6	; 0x06
 a14:	57 81       	ldd	r21, Z+7	; 0x07
 a16:	24 81       	ldd	r18, Z+4	; 0x04
 a18:	35 81       	ldd	r19, Z+5	; 0x05
 a1a:	42 17       	cp	r20, r18
 a1c:	53 07       	cpc	r21, r19
 a1e:	44 f4       	brge	.+16     	; 0xa30 <fputc+0x38>
 a20:	a0 81       	ld	r26, Z
 a22:	b1 81       	ldd	r27, Z+1	; 0x01
 a24:	9d 01       	movw	r18, r26
 a26:	2f 5f       	subi	r18, 0xFF	; 255
 a28:	3f 4f       	sbci	r19, 0xFF	; 255
 a2a:	31 83       	std	Z+1, r19	; 0x01
 a2c:	20 83       	st	Z, r18
 a2e:	8c 93       	st	X, r24
 a30:	26 81       	ldd	r18, Z+6	; 0x06
 a32:	37 81       	ldd	r19, Z+7	; 0x07
 a34:	2f 5f       	subi	r18, 0xFF	; 255
 a36:	3f 4f       	sbci	r19, 0xFF	; 255
 a38:	37 83       	std	Z+7, r19	; 0x07
 a3a:	26 83       	std	Z+6, r18	; 0x06
 a3c:	10 c0       	rjmp	.+32     	; 0xa5e <fputc+0x66>
 a3e:	eb 01       	movw	r28, r22
 a40:	09 2f       	mov	r16, r25
 a42:	18 2f       	mov	r17, r24
 a44:	00 84       	ldd	r0, Z+8	; 0x08
 a46:	f1 85       	ldd	r31, Z+9	; 0x09
 a48:	e0 2d       	mov	r30, r0
 a4a:	09 95       	icall
 a4c:	89 2b       	or	r24, r25
 a4e:	e1 f6       	brne	.-72     	; 0xa08 <fputc+0x10>
 a50:	8e 81       	ldd	r24, Y+6	; 0x06
 a52:	9f 81       	ldd	r25, Y+7	; 0x07
 a54:	01 96       	adiw	r24, 0x01	; 1
 a56:	9f 83       	std	Y+7, r25	; 0x07
 a58:	8e 83       	std	Y+6, r24	; 0x06
 a5a:	81 2f       	mov	r24, r17
 a5c:	90 2f       	mov	r25, r16
 a5e:	df 91       	pop	r29
 a60:	cf 91       	pop	r28
 a62:	1f 91       	pop	r17
 a64:	0f 91       	pop	r16
 a66:	08 95       	ret

00000a68 <__ultoa_invert>:
 a68:	fa 01       	movw	r30, r20
 a6a:	aa 27       	eor	r26, r26
 a6c:	28 30       	cpi	r18, 0x08	; 8
 a6e:	51 f1       	breq	.+84     	; 0xac4 <__ultoa_invert+0x5c>
 a70:	20 31       	cpi	r18, 0x10	; 16
 a72:	81 f1       	breq	.+96     	; 0xad4 <__ultoa_invert+0x6c>
 a74:	e8 94       	clt
 a76:	6f 93       	push	r22
 a78:	6e 7f       	andi	r22, 0xFE	; 254
 a7a:	6e 5f       	subi	r22, 0xFE	; 254
 a7c:	7f 4f       	sbci	r23, 0xFF	; 255
 a7e:	8f 4f       	sbci	r24, 0xFF	; 255
 a80:	9f 4f       	sbci	r25, 0xFF	; 255
 a82:	af 4f       	sbci	r26, 0xFF	; 255
 a84:	b1 e0       	ldi	r27, 0x01	; 1
 a86:	3e d0       	rcall	.+124    	; 0xb04 <__ultoa_invert+0x9c>
 a88:	b4 e0       	ldi	r27, 0x04	; 4
 a8a:	3c d0       	rcall	.+120    	; 0xb04 <__ultoa_invert+0x9c>
 a8c:	67 0f       	add	r22, r23
 a8e:	78 1f       	adc	r23, r24
 a90:	89 1f       	adc	r24, r25
 a92:	9a 1f       	adc	r25, r26
 a94:	a1 1d       	adc	r26, r1
 a96:	68 0f       	add	r22, r24
 a98:	79 1f       	adc	r23, r25
 a9a:	8a 1f       	adc	r24, r26
 a9c:	91 1d       	adc	r25, r1
 a9e:	a1 1d       	adc	r26, r1
 aa0:	6a 0f       	add	r22, r26
 aa2:	71 1d       	adc	r23, r1
 aa4:	81 1d       	adc	r24, r1
 aa6:	91 1d       	adc	r25, r1
 aa8:	a1 1d       	adc	r26, r1
 aaa:	20 d0       	rcall	.+64     	; 0xaec <__ultoa_invert+0x84>
 aac:	09 f4       	brne	.+2      	; 0xab0 <__ultoa_invert+0x48>
 aae:	68 94       	set
 ab0:	3f 91       	pop	r19
 ab2:	2a e0       	ldi	r18, 0x0A	; 10
 ab4:	26 9f       	mul	r18, r22
 ab6:	11 24       	eor	r1, r1
 ab8:	30 19       	sub	r19, r0
 aba:	30 5d       	subi	r19, 0xD0	; 208
 abc:	31 93       	st	Z+, r19
 abe:	de f6       	brtc	.-74     	; 0xa76 <__ultoa_invert+0xe>
 ac0:	cf 01       	movw	r24, r30
 ac2:	08 95       	ret
 ac4:	46 2f       	mov	r20, r22
 ac6:	47 70       	andi	r20, 0x07	; 7
 ac8:	40 5d       	subi	r20, 0xD0	; 208
 aca:	41 93       	st	Z+, r20
 acc:	b3 e0       	ldi	r27, 0x03	; 3
 ace:	0f d0       	rcall	.+30     	; 0xaee <__ultoa_invert+0x86>
 ad0:	c9 f7       	brne	.-14     	; 0xac4 <__ultoa_invert+0x5c>
 ad2:	f6 cf       	rjmp	.-20     	; 0xac0 <__ultoa_invert+0x58>
 ad4:	46 2f       	mov	r20, r22
 ad6:	4f 70       	andi	r20, 0x0F	; 15
 ad8:	40 5d       	subi	r20, 0xD0	; 208
 ada:	4a 33       	cpi	r20, 0x3A	; 58
 adc:	18 f0       	brcs	.+6      	; 0xae4 <__ultoa_invert+0x7c>
 ade:	49 5d       	subi	r20, 0xD9	; 217
 ae0:	31 fd       	sbrc	r19, 1
 ae2:	40 52       	subi	r20, 0x20	; 32
 ae4:	41 93       	st	Z+, r20
 ae6:	02 d0       	rcall	.+4      	; 0xaec <__ultoa_invert+0x84>
 ae8:	a9 f7       	brne	.-22     	; 0xad4 <__ultoa_invert+0x6c>
 aea:	ea cf       	rjmp	.-44     	; 0xac0 <__ultoa_invert+0x58>
 aec:	b4 e0       	ldi	r27, 0x04	; 4
 aee:	a6 95       	lsr	r26
 af0:	97 95       	ror	r25
 af2:	87 95       	ror	r24
 af4:	77 95       	ror	r23
 af6:	67 95       	ror	r22
 af8:	ba 95       	dec	r27
 afa:	c9 f7       	brne	.-14     	; 0xaee <__ultoa_invert+0x86>
 afc:	00 97       	sbiw	r24, 0x00	; 0
 afe:	61 05       	cpc	r22, r1
 b00:	71 05       	cpc	r23, r1
 b02:	08 95       	ret
 b04:	9b 01       	movw	r18, r22
 b06:	ac 01       	movw	r20, r24
 b08:	0a 2e       	mov	r0, r26
 b0a:	06 94       	lsr	r0
 b0c:	57 95       	ror	r21
 b0e:	47 95       	ror	r20
 b10:	37 95       	ror	r19
 b12:	27 95       	ror	r18
 b14:	ba 95       	dec	r27
 b16:	c9 f7       	brne	.-14     	; 0xb0a <__ultoa_invert+0xa2>
 b18:	62 0f       	add	r22, r18
 b1a:	73 1f       	adc	r23, r19
 b1c:	84 1f       	adc	r24, r20
 b1e:	95 1f       	adc	r25, r21
 b20:	a0 1d       	adc	r26, r0
 b22:	08 95       	ret

00000b24 <__prologue_saves__>:
 b24:	2f 92       	push	r2
 b26:	3f 92       	push	r3
 b28:	4f 92       	push	r4
 b2a:	5f 92       	push	r5
 b2c:	6f 92       	push	r6
 b2e:	7f 92       	push	r7
 b30:	8f 92       	push	r8
 b32:	9f 92       	push	r9
 b34:	af 92       	push	r10
 b36:	bf 92       	push	r11
 b38:	cf 92       	push	r12
 b3a:	df 92       	push	r13
 b3c:	ef 92       	push	r14
 b3e:	ff 92       	push	r15
 b40:	0f 93       	push	r16
 b42:	1f 93       	push	r17
 b44:	cf 93       	push	r28
 b46:	df 93       	push	r29
 b48:	cd b7       	in	r28, 0x3d	; 61
 b4a:	de b7       	in	r29, 0x3e	; 62
 b4c:	ca 1b       	sub	r28, r26
 b4e:	db 0b       	sbc	r29, r27
 b50:	0f b6       	in	r0, 0x3f	; 63
 b52:	f8 94       	cli
 b54:	de bf       	out	0x3e, r29	; 62
 b56:	0f be       	out	0x3f, r0	; 63
 b58:	cd bf       	out	0x3d, r28	; 61
 b5a:	09 94       	ijmp

00000b5c <__epilogue_restores__>:
 b5c:	2a 88       	ldd	r2, Y+18	; 0x12
 b5e:	39 88       	ldd	r3, Y+17	; 0x11
 b60:	48 88       	ldd	r4, Y+16	; 0x10
 b62:	5f 84       	ldd	r5, Y+15	; 0x0f
 b64:	6e 84       	ldd	r6, Y+14	; 0x0e
 b66:	7d 84       	ldd	r7, Y+13	; 0x0d
 b68:	8c 84       	ldd	r8, Y+12	; 0x0c
 b6a:	9b 84       	ldd	r9, Y+11	; 0x0b
 b6c:	aa 84       	ldd	r10, Y+10	; 0x0a
 b6e:	b9 84       	ldd	r11, Y+9	; 0x09
 b70:	c8 84       	ldd	r12, Y+8	; 0x08
 b72:	df 80       	ldd	r13, Y+7	; 0x07
 b74:	ee 80       	ldd	r14, Y+6	; 0x06
 b76:	fd 80       	ldd	r15, Y+5	; 0x05
 b78:	0c 81       	ldd	r16, Y+4	; 0x04
 b7a:	1b 81       	ldd	r17, Y+3	; 0x03
 b7c:	aa 81       	ldd	r26, Y+2	; 0x02
 b7e:	b9 81       	ldd	r27, Y+1	; 0x01
 b80:	ce 0f       	add	r28, r30
 b82:	d1 1d       	adc	r29, r1
 b84:	0f b6       	in	r0, 0x3f	; 63
 b86:	f8 94       	cli
 b88:	de bf       	out	0x3e, r29	; 62
 b8a:	0f be       	out	0x3f, r0	; 63
 b8c:	cd bf       	out	0x3d, r28	; 61
 b8e:	ed 01       	movw	r28, r26
 b90:	08 95       	ret

00000b92 <_exit>:
 b92:	f8 94       	cli

00000b94 <__stop_program>:
 b94:	ff cf       	rjmp	.-2      	; 0xb94 <__stop_program>
