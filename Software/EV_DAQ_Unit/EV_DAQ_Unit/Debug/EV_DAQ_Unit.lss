
EV_DAQ_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000dfc  00000e90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000dfc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000048b  00800142  00800142  00000ed2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ed2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000169d  00000000  00000000  000010f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bd  00000000  00000000  00002795  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000819  00000000  00000000  00003152  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  0000396c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057b  00000000  00000000  00003d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ec6  00000000  00000000  000042af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00005175  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 67 03 	jmp	0x6ce	; 0x6ce <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec ef       	ldi	r30, 0xFC	; 252
  c8:	fd e0       	ldi	r31, 0x0D	; 13
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 34       	cpi	r26, 0x42	; 66
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	25 e0       	ldi	r18, 0x05	; 5
  d8:	a2 e4       	ldi	r26, 0x42	; 66
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ad 3c       	cpi	r26, 0xCD	; 205
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 cb 02 	call	0x596	; 0x596 <main>
  ea:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <adc_init>:
* @param[in] adc_dig_disable  Digital input disable mask. ADC7=Bit7, ADC0=Bit0
* @param[in] adc_div          ADC prescalar (clock divider)
* @return void
*/
void adc_init(uint8_t adc_dig_disable, uint8_t adc_div) {
    DIDR0 = adc_dig_disable;    // Disable digital input buffer (saves power and causes PIN to always read 0)
  f2:	80 93 7e 00 	sts	0x007E, r24
  f6:	68 30       	cpi	r22, 0x08	; 8
  f8:	08 f0       	brcs	.+2      	; 0xfc <adc_init+0xa>
  fa:	67 e0       	ldi	r22, 0x07	; 7
    if(adc_div > ADC_DIV_128) {
        adc_div = ADC_DIV_128;    // Handle invalid prescalars by forcing to 128 division 
    }   
         
    ADCSRA = ((1<<ADEN) | (adc_div));   // Enable ADC and set proper prescale
  fc:	60 68       	ori	r22, 0x80	; 128
  fe:	60 93 7a 00 	sts	0x007A, r22
 102:	08 95       	ret

00000104 <adc_read_one>:
*/
uint16_t adc_read_one(uint8_t adc_mux) {
    uint16_t adc_val = 0;
    static uint8_t adc_last_adcmux;     // Holds adc_mux value from previous function call
    
    if(adc_last_adcmux != adc_mux) {    // Check if sequential function calls use same ADC channel
 104:	88 23       	and	r24, r24
 106:	69 f0       	breq	.+26     	; 0x122 <adc_read_one+0x1e>
        ADMUX = adc_mux;    // Set new ADMUX value
 108:	80 93 7c 00 	sts	0x007C, r24
 10c:	93 e0       	ldi	r25, 0x03	; 3
        for(uint8_t i=0; i < ADC_BAD_CONVERSIONS; i++) {
            /* Throw out first few conversions */
            ADCSRA |= (1<<ADSC);    // start ADC conversion.
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
            while(ADCSRA & (1<<ADSC)); // wait for conversion complete
 118:	80 81       	ld	r24, Z
 11a:	86 fd       	sbrc	r24, 6
 11c:	fd cf       	rjmp	.-6      	; 0x118 <adc_read_one+0x14>
 11e:	91 50       	subi	r25, 0x01	; 1
    uint16_t adc_val = 0;
    static uint8_t adc_last_adcmux;     // Holds adc_mux value from previous function call
    
    if(adc_last_adcmux != adc_mux) {    // Check if sequential function calls use same ADC channel
        ADMUX = adc_mux;    // Set new ADMUX value
        for(uint8_t i=0; i < ADC_BAD_CONVERSIONS; i++) {
 120:	c1 f7       	brne	.-16     	; 0x112 <adc_read_one+0xe>
            ADCSRA |= (1<<ADSC);    // start ADC conversion.
            while(ADCSRA & (1<<ADSC)); // wait for conversion complete
        }
    }
    
    ADCSRA |= (1<<ADSC);   // Start ADC conversion
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
    while(ADCSRA & (1<<ADSC));  // Wait until conversion is complete (13 adc clock cycles)
 12c:	80 81       	ld	r24, Z
 12e:	86 fd       	sbrc	r24, 6
 130:	fd cf       	rjmp	.-6      	; 0x12c <adc_read_one+0x28>
    adc_val = ADCL;         // Read & store lower byte of adc result
 132:	80 91 78 00 	lds	r24, 0x0078
    adc_val = (ADCH<<8);    // Read & store upper two bits of adc result
 136:	90 91 79 00 	lds	r25, 0x0079
    
    return(adc_val);
}
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret

0000013e <adc_read>:
* @param[in] adc_mux    ADC channel to read
* @param[in] *adc_val   Pointer to location to store data read from ADC
* @param[in] *adc_val_len   Length of adc_val (number of reads to perform)
* @return void
*/
void adc_read(uint8_t adc_mux, uint16_t *adc_val, uint16_t adc_val_len) {
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
    for(uint16_t i=0; i < adc_val_len; i++) {
 14c:	41 15       	cp	r20, r1
 14e:	51 05       	cpc	r21, r1
 150:	89 f0       	breq	.+34     	; 0x174 <adc_read+0x36>
 152:	7a 01       	movw	r14, r20
 154:	d8 2e       	mov	r13, r24
 156:	06 2f       	mov	r16, r22
 158:	17 2f       	mov	r17, r23
 15a:	c0 e0       	ldi	r28, 0x00	; 0
 15c:	d0 e0       	ldi	r29, 0x00	; 0
        adc_val[i] = adc_read_one(adc_mux);
 15e:	8d 2d       	mov	r24, r13
 160:	0e 94 82 00 	call	0x104	; 0x104 <adc_read_one>
 164:	f8 01       	movw	r30, r16
 166:	81 93       	st	Z+, r24
 168:	91 93       	st	Z+, r25
 16a:	8f 01       	movw	r16, r30
* @param[in] *adc_val   Pointer to location to store data read from ADC
* @param[in] *adc_val_len   Length of adc_val (number of reads to perform)
* @return void
*/
void adc_read(uint8_t adc_mux, uint16_t *adc_val, uint16_t adc_val_len) {
    for(uint16_t i=0; i < adc_val_len; i++) {
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	ce 15       	cp	r28, r14
 170:	df 05       	cpc	r29, r15
 172:	a9 f7       	brne	.-22     	; 0x15e <adc_read+0x20>
        adc_val[i] = adc_read_one(adc_mux);
    }
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	df 90       	pop	r13
 182:	08 95       	ret

00000184 <data_insertion_sort_uint16>:
* @brief Insertion sort for uint16 array where max length is 65535 (2^16-1)
* @param[in] uint16_t *data     Pointer to array that contains data to average
* @param[in] uint16_t data_len  Length of data array
* @return void
*/
void data_insertion_sort_uint16(uint16_t *data, uint16_t data_len) {
 184:	8f 92       	push	r8
 186:	9f 92       	push	r9
 188:	af 92       	push	r10
 18a:	bf 92       	push	r11
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
    uint16_t i = 0;
    int32_t j = 0;
    uint16_t temp = 0;

    for(i=1; i < data_len; i++) {
 19c:	62 30       	cpi	r22, 0x02	; 2
 19e:	71 05       	cpc	r23, r1
 1a0:	b8 f1       	brcs	.+110    	; 0x210 <data_insertion_sort_uint16+0x8c>
 1a2:	8c 01       	movw	r16, r24
 1a4:	0e 5f       	subi	r16, 0xFE	; 254
 1a6:	1f 4f       	sbci	r17, 0xFF	; 255
 1a8:	ec 01       	movw	r28, r24
 1aa:	81 2c       	mov	r8, r1
 1ac:	91 2c       	mov	r9, r1
 1ae:	54 01       	movw	r10, r8
        temp = data[i];
 1b0:	f8 01       	movw	r30, r16
 1b2:	41 91       	ld	r20, Z+
 1b4:	51 91       	ld	r21, Z+
 1b6:	8f 01       	movw	r16, r30
        j = i - 1;
 1b8:	75 01       	movw	r14, r10
 1ba:	64 01       	movw	r12, r8
        while((temp < data[j]) && (j >= 0)) {
 1bc:	28 81       	ld	r18, Y
 1be:	39 81       	ldd	r19, Y+1	; 0x01
 1c0:	42 17       	cp	r20, r18
 1c2:	53 07       	cpc	r21, r19
 1c4:	78 f4       	brcc	.+30     	; 0x1e4 <data_insertion_sort_uint16+0x60>
 1c6:	de 01       	movw	r26, r28
            data[j+1] = data[j];
 1c8:	32 93       	st	-Z, r19
 1ca:	22 93       	st	-Z, r18
            j = j - 1;
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	c2 1a       	sub	r12, r18
 1d0:	d1 08       	sbc	r13, r1
 1d2:	e1 08       	sbc	r14, r1
 1d4:	f1 08       	sbc	r15, r1
    uint16_t temp = 0;

    for(i=1; i < data_len; i++) {
        temp = data[i];
        j = i - 1;
        while((temp < data[j]) && (j >= 0)) {
 1d6:	3e 91       	ld	r19, -X
 1d8:	2e 91       	ld	r18, -X
 1da:	42 17       	cp	r20, r18
 1dc:	53 07       	cpc	r21, r19
 1de:	10 f4       	brcc	.+4      	; 0x1e4 <data_insertion_sort_uint16+0x60>
 1e0:	ff 20       	and	r15, r15
 1e2:	94 f7       	brge	.-28     	; 0x1c8 <data_insertion_sort_uint16+0x44>
            data[j+1] = data[j];
            j = j - 1;
        }
        data[j+1] = temp;
 1e4:	ef ef       	ldi	r30, 0xFF	; 255
 1e6:	ce 1a       	sub	r12, r30
 1e8:	de 0a       	sbc	r13, r30
 1ea:	cc 0c       	add	r12, r12
 1ec:	dd 1c       	adc	r13, r13
 1ee:	fc 01       	movw	r30, r24
 1f0:	ec 0d       	add	r30, r12
 1f2:	fd 1d       	adc	r31, r13
 1f4:	51 83       	std	Z+1, r21	; 0x01
 1f6:	40 83       	st	Z, r20
 1f8:	22 96       	adiw	r28, 0x02	; 2
 1fa:	ff ef       	ldi	r31, 0xFF	; 255
 1fc:	8f 1a       	sub	r8, r31
 1fe:	9f 0a       	sbc	r9, r31
 200:	af 0a       	sbc	r10, r31
 202:	bf 0a       	sbc	r11, r31
 204:	94 01       	movw	r18, r8
 206:	2f 5f       	subi	r18, 0xFF	; 255
 208:	3f 4f       	sbci	r19, 0xFF	; 255
void data_insertion_sort_uint16(uint16_t *data, uint16_t data_len) {
    uint16_t i = 0;
    int32_t j = 0;
    uint16_t temp = 0;

    for(i=1; i < data_len; i++) {
 20a:	26 17       	cp	r18, r22
 20c:	37 07       	cpc	r19, r23
 20e:	80 f2       	brcs	.-96     	; 0x1b0 <data_insertion_sort_uint16+0x2c>
            data[j+1] = data[j];
            j = j - 1;
        }
        data[j+1] = temp;
    }
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	df 90       	pop	r13
 21e:	cf 90       	pop	r12
 220:	bf 90       	pop	r11
 222:	af 90       	pop	r10
 224:	9f 90       	pop	r9
 226:	8f 90       	pop	r8
 228:	08 95       	ret

0000022a <data_2n_average_uint16>:
* @brief Average a uint16 array of 2^n length where max length is 65535 (2^16-1)
* @param[in] uint16_t *data     Pointer to array that contains data to average
* @param[in] uint16_t data_len  Length of data array
* @return uint16_t   Data average over entire array length. Returns 0xFFFF if array is not power of 2. 
*/
uint16_t data_2n_average_uint16(uint16_t *data, uint16_t data_len) {
 22a:	db 01       	movw	r26, r22
    uint16_t pow2_val = 1;              // Power of two to check length of array and calculate dividing factor
    uint8_t pow2_div = 0;               // Power of two divider
    uint16_t pow2_max_val = 0xFFFF;     // Maximum value for an 16-bit unsigned integer
    
    /* Check to see how long it is */
    if(data_len <= 1) { 
 22c:	62 30       	cpi	r22, 0x02	; 2
 22e:	71 05       	cpc	r23, r1
 230:	30 f0       	brcs	.+12     	; 0x23e <data_2n_average_uint16+0x14>
        return(data[0]); // Break from function if not more than one data point 
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
 232:	10 97       	sbiw	r26, 0x00	; 0
 234:	41 f4       	brne	.+16     	; 0x246 <data_2n_average_uint16+0x1c>
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	ba 01       	movw	r22, r20
 23c:	2c c0       	rjmp	.+88     	; 0x296 <data_2n_average_uint16+0x6c>
    uint8_t pow2_div = 0;               // Power of two divider
    uint16_t pow2_max_val = 0xFFFF;     // Maximum value for an 16-bit unsigned integer
    
    /* Check to see how long it is */
    if(data_len <= 1) { 
        return(data[0]); // Break from function if not more than one data point 
 23e:	fc 01       	movw	r30, r24
 240:	80 81       	ld	r24, Z
 242:	91 81       	ldd	r25, Z+1	; 0x01
 244:	08 95       	ret
 246:	fc 01       	movw	r30, r24
 248:	9b 01       	movw	r18, r22
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	82 0f       	add	r24, r18
 250:	93 1f       	adc	r25, r19
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	ba 01       	movw	r22, r20
        avg_acc += data[i];
 258:	21 91       	ld	r18, Z+
 25a:	31 91       	ld	r19, Z+
 25c:	42 0f       	add	r20, r18
 25e:	53 1f       	adc	r21, r19
 260:	61 1d       	adc	r22, r1
 262:	71 1d       	adc	r23, r1
    if(data_len <= 1) { 
        return(data[0]); // Break from function if not more than one data point 
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
 264:	e8 17       	cp	r30, r24
 266:	f9 07       	cpc	r31, r25
 268:	b9 f7       	brne	.-18     	; 0x258 <data_2n_average_uint16+0x2e>
 26a:	15 c0       	rjmp	.+42     	; 0x296 <data_2n_average_uint16+0x6c>
        avg_acc += data[i];
    }
    
    /* Find power2_div where 2^power2_div is length of array */
    while((pow2_val < data_len) && (pow2_val <= pow2_max_val)) {
        pow2_val *= 2;  // Increment pow2_val by next power of 2
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
        pow2_div++;     // Increment divider by one
 270:	8f 5f       	subi	r24, 0xFF	; 255
    for(uint16_t i = 0; i < data_len; i++) {
        avg_acc += data[i];
    }
    
    /* Find power2_div where 2^power2_div is length of array */
    while((pow2_val < data_len) && (pow2_val <= pow2_max_val)) {
 272:	2a 17       	cp	r18, r26
 274:	3b 07       	cpc	r19, r27
 276:	d0 f3       	brcs	.-12     	; 0x26c <data_2n_average_uint16+0x42>
        pow2_val *= 2;  // Increment pow2_val by next power of 2
        pow2_div++;     // Increment divider by one
    }
    
    /* Break from function and return 0xFFFF if array is actually not a power of 2 */
    if(pow2_val != data_len) {
 278:	2a 17       	cp	r18, r26
 27a:	3b 07       	cpc	r19, r27
 27c:	49 f4       	brne	.+18     	; 0x290 <data_2n_average_uint16+0x66>
        return(0xFFFF);
    }

    /* Average and return accumulated value */
    return((uint16_t)(avg_acc >> pow2_div));
 27e:	04 c0       	rjmp	.+8      	; 0x288 <data_2n_average_uint16+0x5e>
 280:	76 95       	lsr	r23
 282:	67 95       	ror	r22
 284:	57 95       	ror	r21
 286:	47 95       	ror	r20
 288:	8a 95       	dec	r24
 28a:	d2 f7       	brpl	.-12     	; 0x280 <data_2n_average_uint16+0x56>
 28c:	ca 01       	movw	r24, r20
 28e:	08 95       	ret
        pow2_div++;     // Increment divider by one
    }
    
    /* Break from function and return 0xFFFF if array is actually not a power of 2 */
    if(pow2_val != data_len) {
        return(0xFFFF);
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	9f ef       	ldi	r25, 0xFF	; 255
 294:	08 95       	ret
    if(data_len <= 1) { 
        return(data[0]); // Break from function if not more than one data point 
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	e7 cf       	rjmp	.-50     	; 0x26c <data_2n_average_uint16+0x42>

0000029e <data_trim_uint16>:
* @param[in] uint16_t trim_val      Amount to trim from both sides of array (ex. 2 will eliminate data_from[0, 1] and data_to[n, n-1])
* @return void
*/
// TODO: test this function. trim_val in the for loop may need to be altered
void data_trim_uint16(uint16_t *data_from, uint16_t *data_to, uint16_t raw_len, uint16_t trim_val) {
    for(uint16_t i=trim_val; i < (raw_len - trim_val); i++) {
 29e:	42 1b       	sub	r20, r18
 2a0:	53 0b       	sbc	r21, r19
 2a2:	24 17       	cp	r18, r20
 2a4:	35 07       	cpc	r19, r21
 2a6:	98 f4       	brcc	.+38     	; 0x2ce <data_trim_uint16+0x30>
 2a8:	22 0f       	add	r18, r18
 2aa:	33 1f       	adc	r19, r19
 2ac:	fc 01       	movw	r30, r24
 2ae:	e2 0f       	add	r30, r18
 2b0:	f3 1f       	adc	r31, r19
 2b2:	db 01       	movw	r26, r22
 2b4:	a2 0f       	add	r26, r18
 2b6:	b3 1f       	adc	r27, r19
 2b8:	44 0f       	add	r20, r20
 2ba:	55 1f       	adc	r21, r21
 2bc:	84 0f       	add	r24, r20
 2be:	95 1f       	adc	r25, r21
        data_to[i] = data_from[i];
 2c0:	21 91       	ld	r18, Z+
 2c2:	31 91       	ld	r19, Z+
 2c4:	2d 93       	st	X+, r18
 2c6:	3d 93       	st	X+, r19
* @param[in] uint16_t trim_val      Amount to trim from both sides of array (ex. 2 will eliminate data_from[0, 1] and data_to[n, n-1])
* @return void
*/
// TODO: test this function. trim_val in the for loop may need to be altered
void data_trim_uint16(uint16_t *data_from, uint16_t *data_to, uint16_t raw_len, uint16_t trim_val) {
    for(uint16_t i=trim_val; i < (raw_len - trim_val); i++) {
 2c8:	e8 17       	cp	r30, r24
 2ca:	f9 07       	cpc	r31, r25
 2cc:	c9 f7       	brne	.-14     	; 0x2c0 <data_trim_uint16+0x22>
 2ce:	08 95       	ret

000002d0 <gpio_init>:
* @brief Initialize GPIO for EV DAQ UNIT project
* @return void
*/
void gpio_init(void) {
    /* Setup Switches */
    clrbits(SW_DDR, ((1<<SW1)|(1<<SW2))); // Set switches to input
 2d0:	84 b1       	in	r24, 0x04	; 4
 2d2:	8c 7f       	andi	r24, 0xFC	; 252
 2d4:	84 b9       	out	0x04, r24	; 4
    sbits(SW_PORT, ((1<<SW1)|(1<<SW2)));  // Turn on pullups on switches
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	83 60       	ori	r24, 0x03	; 3
 2da:	85 b9       	out	0x05, r24	; 5
    
    /* Setup LEDs */
    sbits(LED_DDR, ((1<<LED_RED)|(1<<LED_YLW)));  // LEDs as output
 2dc:	8a b1       	in	r24, 0x0a	; 10
 2de:	80 6c       	ori	r24, 0xC0	; 192
 2e0:	8a b9       	out	0x0a, r24	; 10
    
    /* Setup LCD /RST */
    sbit(LCD_RST_DDR, LCD_RST);     // Set LCD_RST to output
 2e2:	22 9a       	sbi	0x04, 2	; 4
    sbit(LCD_RST_PORT, LCD_RST);    // Drive LCD_RST high    
 2e4:	2a 9a       	sbi	0x05, 2	; 5
 2e6:	08 95       	ret

000002e8 <i2c1_init>:
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return uint8_t   Division factor
*/
uint8_t i2c_calc_br_div(uint32_t cpu_freq, uint32_t i2c_freq) {
    return((uint8_t)(((cpu_freq/i2c_freq) - 16)>>1));
 2e8:	0e 94 02 04 	call	0x804	; 0x804 <__udivmodsi4>
 2ec:	da 01       	movw	r26, r20
 2ee:	c9 01       	movw	r24, r18
 2f0:	40 97       	sbiw	r24, 0x10	; 16
 2f2:	a1 09       	sbc	r26, r1
 2f4:	b1 09       	sbc	r27, r1
 2f6:	b6 95       	lsr	r27
 2f8:	a7 95       	ror	r26
 2fa:	97 95       	ror	r25
 2fc:	87 95       	ror	r24
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return void
*/
void i2c1_init(uint32_t cpu_freq, uint32_t i2c_freq) {
    TWBR1 = i2c_calc_br_div(cpu_freq, i2c_freq);   // Set I2C SCL to correct value
 2fe:	80 93 d8 00 	sts	0x00D8, r24
    TWCR1 |= (1<<TWIE); // Enable TWI interrupt
 302:	ec ed       	ldi	r30, 0xDC	; 220
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	80 83       	st	Z, r24
 30c:	08 95       	ret

0000030e <i2c1_tx>:
* @brief Start I2C master tx event
* @param[in] i2c_event   Type of I2C event
* @return uint8_t I2C status register
*/
uint8_t i2c1_tx(uint8_t i2c_event) {
    switch(i2c_event) {
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	69 f0       	breq	.+26     	; 0x32c <i2c1_tx+0x1e>
 312:	18 f0       	brcs	.+6      	; 0x31a <i2c1_tx+0xc>
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	99 f0       	breq	.+38     	; 0x33e <i2c1_tx+0x30>
 318:	1a c0       	rjmp	.+52     	; 0x34e <i2c1_tx+0x40>
        case I2C_START:
            TWCR1 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);    // Tx start condition
 31a:	84 ea       	ldi	r24, 0xA4	; 164
 31c:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWINT))); // Wait for current request to process            
 320:	ec ed       	ldi	r30, 0xDC	; 220
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	88 23       	and	r24, r24
 328:	ec f7       	brge	.-6      	; 0x324 <i2c1_tx+0x16>
 32a:	11 c0       	rjmp	.+34     	; 0x34e <i2c1_tx+0x40>
            break;
        case I2C_DATA:
            TWCR1 = (1<<TWINT) | (1<<TWEN);                 // Tx data
 32c:	84 e8       	ldi	r24, 0x84	; 132
 32e:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWINT))); // Wait for current request to process
 332:	ec ed       	ldi	r30, 0xDC	; 220
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	88 23       	and	r24, r24
 33a:	ec f7       	brge	.-6      	; 0x336 <i2c1_tx+0x28>
 33c:	08 c0       	rjmp	.+16     	; 0x34e <i2c1_tx+0x40>
            break;
        case I2C_STOP:
            TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);    // Tx stop condition
 33e:	84 e9       	ldi	r24, 0x94	; 148
 340:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWSTO))); // Wait for current request to process
 344:	ec ed       	ldi	r30, 0xDC	; 220
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	84 ff       	sbrs	r24, 4
 34c:	fd cf       	rjmp	.-6      	; 0x348 <i2c1_tx+0x3a>
            break;
    }
    return(TWSR1 & I2C_STATUS_REG_MASK);     // Return only status bits in status reg
 34e:	80 91 d9 00 	lds	r24, 0x00D9
}
 352:	88 7f       	andi	r24, 0xF8	; 248
 354:	08 95       	ret

00000356 <lcd_write>:
* @param uint8_t cmd_data       0 to send command, others to send data
* @param uint8_t *data          Pointer to data array to send.
* @param uint16_t num_bytes     Length of data to send.
* @return void
*/
void lcd_write(uint8_t cmd_data, uint8_t *data, uint16_t num_bytes) {
 356:	ef 92       	push	r14
 358:	ff 92       	push	r15
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	c8 2f       	mov	r28, r24
 364:	7b 01       	movw	r14, r22
 366:	8a 01       	movw	r16, r20
    i2c1_tx(I2C_START);     // Send start condition
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	0e 94 87 01 	call	0x30e	; 0x30e <i2c1_tx>
    TWDR1 = LCD_I2C_ADDR;   // Set Slave Addr
 36e:	8c e7       	ldi	r24, 0x7C	; 124
 370:	80 93 db 00 	sts	0x00DB, r24
    i2c1_tx(I2C_DATA);      // Send Slave Addr
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 87 01 	call	0x30e	; 0x30e <i2c1_tx>
    
    if(cmd_data == LCD_CMD) {
 37a:	c1 11       	cpse	r28, r1
 37c:	06 c0       	rjmp	.+12     	; 0x38a <lcd_write+0x34>
        TWDR1 = LCD_CMD;    // Load "Command" byte for LCD
 37e:	10 92 db 00 	sts	0x00DB, r1
        i2c1_tx(I2C_DATA);  // Send "Command" byte
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 87 01 	call	0x30e	; 0x30e <i2c1_tx>
 388:	06 c0       	rjmp	.+12     	; 0x396 <lcd_write+0x40>
    } else {
        TWDR1 = LCD_DATA;   // Load "Data" byte for LCD
 38a:	80 e4       	ldi	r24, 0x40	; 64
 38c:	80 93 db 00 	sts	0x00DB, r24
        i2c1_tx(I2C_DATA);  // Send "Data" byte
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 87 01 	call	0x30e	; 0x30e <i2c1_tx>
    }
    
    for(uint16_t i=0; i<num_bytes; i++) {   // Send bytes
 396:	01 15       	cp	r16, r1
 398:	11 05       	cpc	r17, r1
 39a:	89 f0       	breq	.+34     	; 0x3be <lcd_write+0x68>
 39c:	e7 01       	movw	r28, r14
 39e:	0e 0d       	add	r16, r14
 3a0:	1f 1d       	adc	r17, r15
        TWDR1 = data[i];
 3a2:	0f 2e       	mov	r0, r31
 3a4:	fb ed       	ldi	r31, 0xDB	; 219
 3a6:	ef 2e       	mov	r14, r31
 3a8:	f1 2c       	mov	r15, r1
 3aa:	f0 2d       	mov	r31, r0
 3ac:	89 91       	ld	r24, Y+
 3ae:	f7 01       	movw	r30, r14
 3b0:	80 83       	st	Z, r24
        i2c1_tx(I2C_DATA);
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 87 01 	call	0x30e	; 0x30e <i2c1_tx>
    } else {
        TWDR1 = LCD_DATA;   // Load "Data" byte for LCD
        i2c1_tx(I2C_DATA);  // Send "Data" byte
    }
    
    for(uint16_t i=0; i<num_bytes; i++) {   // Send bytes
 3b8:	c0 17       	cp	r28, r16
 3ba:	d1 07       	cpc	r29, r17
 3bc:	b9 f7       	brne	.-18     	; 0x3ac <lcd_write+0x56>
        TWDR1 = data[i];
        i2c1_tx(I2C_DATA);
    }
    
    i2c1_tx(I2C_STOP);  // Send stop condition
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 87 01 	call	0x30e	; 0x30e <i2c1_tx>
}
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	1f 91       	pop	r17
 3ca:	0f 91       	pop	r16
 3cc:	ff 90       	pop	r15
 3ce:	ef 90       	pop	r14
 3d0:	08 95       	ret

000003d2 <lcd_set_line1>:

/*!
* @brief Set cursor to LCD line 1
* @return void
*/
void lcd_set_line1() {
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	1f 92       	push	r1
 3d8:	cd b7       	in	r28, 0x3d	; 61
 3da:	de b7       	in	r29, 0x3e	; 62
    uint8_t lcd_line1[1] = {LCD_LINE1};
 3dc:	80 e8       	ldi	r24, 0x80	; 128
 3de:	89 83       	std	Y+1, r24	; 0x01
        lcd_write(LCD_CMD, lcd_line1, 1);
 3e0:	41 e0       	ldi	r20, 0x01	; 1
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	be 01       	movw	r22, r28
 3e6:	6f 5f       	subi	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_write>
        delay(100);
 3f0:	84 e6       	ldi	r24, 0x64	; 100
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <delay>
}
 3f8:	0f 90       	pop	r0
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <lcd_set_line2>:

/*!
* @brief Set cursor to LCD line 2
* @return void
*/
void lcd_set_line2() {
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	1f 92       	push	r1
 406:	cd b7       	in	r28, 0x3d	; 61
 408:	de b7       	in	r29, 0x3e	; 62
    uint8_t lcd_line2[1] = {LCD_LINE2};
 40a:	80 ec       	ldi	r24, 0xC0	; 192
 40c:	89 83       	std	Y+1, r24	; 0x01
    lcd_write(LCD_CMD, lcd_line2, 1);
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	50 e0       	ldi	r21, 0x00	; 0
 412:	be 01       	movw	r22, r28
 414:	6f 5f       	subi	r22, 0xFF	; 255
 416:	7f 4f       	sbci	r23, 0xFF	; 255
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_write>
    delay(100);
 41e:	84 e6       	ldi	r24, 0x64	; 100
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <delay>
}
 426:	0f 90       	pop	r0
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	08 95       	ret

0000042e <lcd_clear>:

/*!
* @brief Clear LCD display
* @return void
*/
void lcd_clear(void) {
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	1f 92       	push	r1
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
    uint8_t lcd_clear[1] = {0x01};
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	89 83       	std	Y+1, r24	; 0x01
    lcd_write(LCD_CMD, lcd_clear, 1);
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	be 01       	movw	r22, r28
 442:	6f 5f       	subi	r22, 0xFF	; 255
 444:	7f 4f       	sbci	r23, 0xFF	; 255
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_write>
    delay(10);
 44c:	8a e0       	ldi	r24, 0x0A	; 10
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <delay>
}
 454:	0f 90       	pop	r0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <lcd_init>:

/*!
* @brief Initialize LCD
* @return void
*/
void lcd_init(void) {
 45c:	cf 93       	push	r28
 45e:	df 93       	push	r29
 460:	cd b7       	in	r28, 0x3d	; 61
 462:	de b7       	in	r29, 0x3e	; 62
 464:	aa 97       	sbiw	r28, 0x2a	; 42
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	f8 94       	cli
 46a:	de bf       	out	0x3e, r29	; 62
 46c:	0f be       	out	0x3f, r0	; 63
 46e:	cd bf       	out	0x3d, r28	; 61
    uint8_t lcd_config_1[1] = {0x38};
 470:	88 e3       	ldi	r24, 0x38	; 56
 472:	89 83       	std	Y+1, r24	; 0x01
    uint8_t lcd_config_2[1] = {0x39};
 474:	89 e3       	ldi	r24, 0x39	; 57
 476:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t lcd_config_3[7] = {0x14, 0x78, 0x5E, 0x6D, 0x0C, 0x01, 0x06};
 478:	87 e0       	ldi	r24, 0x07	; 7
 47a:	e0 e0       	ldi	r30, 0x00	; 0
 47c:	f1 e0       	ldi	r31, 0x01	; 1
 47e:	de 01       	movw	r26, r28
 480:	13 96       	adiw	r26, 0x03	; 3
 482:	01 90       	ld	r0, Z+
 484:	0d 92       	st	X+, r0
 486:	8a 95       	dec	r24
 488:	e1 f7       	brne	.-8      	; 0x482 <lcd_init+0x26>
    uint8_t lcd_config_4[1] = {0x70};     // Set contrast 
 48a:	80 e7       	ldi	r24, 0x70	; 112
 48c:	8a 87       	std	Y+10, r24	; 0x0a
                                
    uint8_t lcd_init_str1[16] = "EV DAQ UNIT v0.1";
 48e:	80 e1       	ldi	r24, 0x10	; 16
 490:	e7 e0       	ldi	r30, 0x07	; 7
 492:	f1 e0       	ldi	r31, 0x01	; 1
 494:	de 01       	movw	r26, r28
 496:	1b 96       	adiw	r26, 0x0b	; 11
 498:	01 90       	ld	r0, Z+
 49a:	0d 92       	st	X+, r0
 49c:	8a 95       	dec	r24
 49e:	e1 f7       	brne	.-8      	; 0x498 <lcd_init+0x3c>
    uint8_t lcd_init_str2[16] = "github.com/jfri2";
 4a0:	80 e1       	ldi	r24, 0x10	; 16
 4a2:	e8 e1       	ldi	r30, 0x18	; 24
 4a4:	f1 e0       	ldi	r31, 0x01	; 1
 4a6:	de 01       	movw	r26, r28
 4a8:	5b 96       	adiw	r26, 0x1b	; 27
 4aa:	01 90       	ld	r0, Z+
 4ac:	0d 92       	st	X+, r0
 4ae:	8a 95       	dec	r24
 4b0:	e1 f7       	brne	.-8      	; 0x4aa <lcd_init+0x4e>
    
    /* Reset LCD */
    clrbit(LCD_RST_PORT, LCD_RST);
 4b2:	2a 98       	cbi	0x05, 2	; 5
    delay(10);
 4b4:	8a e0       	ldi	r24, 0x0A	; 10
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <delay>
    sbit(LCD_RST_PORT, LCD_RST);
 4bc:	2a 9a       	sbi	0x05, 2	; 5
    delay(10);
 4be:	8a e0       	ldi	r24, 0x0A	; 10
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <delay>
    
    /* Write Configuration to LCD */
    lcd_write(LCD_CMD, lcd_config_1, 1);
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	50 e0       	ldi	r21, 0x00	; 0
 4ca:	be 01       	movw	r22, r28
 4cc:	6f 5f       	subi	r22, 0xFF	; 255
 4ce:	7f 4f       	sbci	r23, 0xFF	; 255
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_write>
    delay(10);
 4d6:	8a e0       	ldi	r24, 0x0A	; 10
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <delay>
    lcd_write(LCD_CMD, lcd_config_2, 1);
 4de:	41 e0       	ldi	r20, 0x01	; 1
 4e0:	50 e0       	ldi	r21, 0x00	; 0
 4e2:	be 01       	movw	r22, r28
 4e4:	6e 5f       	subi	r22, 0xFE	; 254
 4e6:	7f 4f       	sbci	r23, 0xFF	; 255
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_write>
    delay(10);
 4ee:	8a e0       	ldi	r24, 0x0A	; 10
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <delay>
    lcd_write(LCD_CMD, lcd_config_3, 7);
 4f6:	47 e0       	ldi	r20, 0x07	; 7
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	be 01       	movw	r22, r28
 4fc:	6d 5f       	subi	r22, 0xFD	; 253
 4fe:	7f 4f       	sbci	r23, 0xFF	; 255
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_write>
    delay(10);
 506:	8a e0       	ldi	r24, 0x0A	; 10
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <delay>
    lcd_write(LCD_CMD, lcd_config_4, 1);
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	be 01       	movw	r22, r28
 514:	66 5f       	subi	r22, 0xF6	; 246
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_write>
    delay(10);    
 51e:	8a e0       	ldi	r24, 0x0A	; 10
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <delay>
    
    /* Display Initial Message */
    //lcd_set_line1();
    lcd_write(LCD_DATA, lcd_init_str1, 16);
 526:	40 e1       	ldi	r20, 0x10	; 16
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	be 01       	movw	r22, r28
 52c:	65 5f       	subi	r22, 0xF5	; 245
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	80 e4       	ldi	r24, 0x40	; 64
 532:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_write>
    lcd_set_line2();
 536:	0e 94 00 02 	call	0x400	; 0x400 <lcd_set_line2>
    lcd_write(LCD_DATA, lcd_init_str2, 16);
 53a:	40 e1       	ldi	r20, 0x10	; 16
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	be 01       	movw	r22, r28
 540:	65 5e       	subi	r22, 0xE5	; 229
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	80 e4       	ldi	r24, 0x40	; 64
 546:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_write>
}
 54a:	aa 96       	adiw	r28, 0x2a	; 42
 54c:	0f b6       	in	r0, 0x3f	; 63
 54e:	f8 94       	cli
 550:	de bf       	out	0x3e, r29	; 62
 552:	0f be       	out	0x3f, r0	; 63
 554:	cd bf       	out	0x3d, r28	; 61
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <lc_get>:
uint16_t lc_get(uint8_t lc_adc_mux) {
    // Local variables
    static uint16_t lc_raw[LC_RAW_LEN] = {0};       // Stores raw values read from ADC
    static uint16_t lc_trim[LC_TRIM_LEN] = {0};     // Stores trimmed values read from ADC
    
    adc_read(lc_adc_mux, lc_raw, LC_RAW_LEN);               // Get LC_RAW_LEN values from ADC
 55c:	4c e2       	ldi	r20, 0x2C	; 44
 55e:	51 e0       	ldi	r21, 0x01	; 1
 560:	62 e4       	ldi	r22, 0x42	; 66
 562:	73 e0       	ldi	r23, 0x03	; 3
 564:	0e 94 9f 00 	call	0x13e	; 0x13e <adc_read>
    data_insertion_sort_uint16(lc_raw, LC_RAW_LEN);    // Sort raw values from lowest to highest
 568:	6c e2       	ldi	r22, 0x2C	; 44
 56a:	71 e0       	ldi	r23, 0x01	; 1
 56c:	82 e4       	ldi	r24, 0x42	; 66
 56e:	93 e0       	ldi	r25, 0x03	; 3
 570:	0e 94 c2 00 	call	0x184	; 0x184 <data_insertion_sort_uint16>
    data_trim_uint16(lc_raw, lc_trim, LC_RAW_LEN, LC_TRIM_VAL);     // Eliminate 2 highest and 2 lowest values in array
 574:	26 e1       	ldi	r18, 0x16	; 22
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	4c e2       	ldi	r20, 0x2C	; 44
 57a:	51 e0       	ldi	r21, 0x01	; 1
 57c:	62 e4       	ldi	r22, 0x42	; 66
 57e:	71 e0       	ldi	r23, 0x01	; 1
 580:	82 e4       	ldi	r24, 0x42	; 66
 582:	93 e0       	ldi	r25, 0x03	; 3
 584:	0e 94 4f 01 	call	0x29e	; 0x29e <data_trim_uint16>
    return(data_2n_average_uint16(lc_trim, LC_TRIM_LEN));      // Average and return array
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	71 e0       	ldi	r23, 0x01	; 1
 58c:	82 e4       	ldi	r24, 0x42	; 66
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	0e 94 15 01 	call	0x22a	; 0x22a <data_2n_average_uint16>
}
 594:	08 95       	ret

00000596 <main>:
volatile uint16_t adc_ms = 0;
uint8_t time_str[16];

int main(void) {
    /* Initialization Routines */
    sei();
 596:	78 94       	sei
    timer1_1ms_init();
 598:	0e 94 cc 03 	call	0x798	; 0x798 <timer1_1ms_init>
    gpio_init();
 59c:	0e 94 68 01 	call	0x2d0	; 0x2d0 <gpio_init>
    adc_init(ADC_DIG_DIS_LC, ADC_DIV_16);
 5a0:	64 e0       	ldi	r22, 0x04	; 4
 5a2:	80 ec       	ldi	r24, 0xC0	; 192
 5a4:	0e 94 79 00 	call	0xf2	; 0xf2 <adc_init>
    i2c1_init(F_CPU, I2C_SCL_FREQ);
 5a8:	20 ea       	ldi	r18, 0xA0	; 160
 5aa:	36 e8       	ldi	r19, 0x86	; 134
 5ac:	41 e0       	ldi	r20, 0x01	; 1
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	74 e2       	ldi	r23, 0x24	; 36
 5b4:	84 ef       	ldi	r24, 0xF4	; 244
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	0e 94 74 01 	call	0x2e8	; 0x2e8 <i2c1_init>
    lcd_init();
 5bc:	0e 94 2e 02 	call	0x45c	; 0x45c <lcd_init>
    tbit(LED_PORT, LED_YLW);
 5c0:	8b b1       	in	r24, 0x0b	; 11
 5c2:	80 58       	subi	r24, 0x80	; 128
 5c4:	8b b9       	out	0x0b, r24	; 11

    while(1) {
        // Status LED blink
        delay(500);
        tbits(LED_PORT, ((1<<LED_YLW)|(1<<LED_RED)));     
 5c6:	0f 2e       	mov	r0, r31
 5c8:	f0 ec       	ldi	r31, 0xC0	; 192
 5ca:	bf 2e       	mov	r11, r31
 5cc:	f0 2d       	mov	r31, r0
            systck_tmp = systck;   // Store current systck value
            adc_val = lc_get(ADC_MUX_1V1);    // Read 1.1Vref
            adc_ms = ((uint16_t)(systck - systck_tmp));  // Save time (in milliseconds) it took to do A/D conversion
                    
            /* Format to ASCII strings */
            sprintf(adc_str,  "ADC:  %04d", adc_val);
 5ce:	0f 2e       	mov	r0, r31
 5d0:	f9 e2       	ldi	r31, 0x29	; 41
 5d2:	cf 2e       	mov	r12, r31
 5d4:	f1 e0       	ldi	r31, 0x01	; 1
 5d6:	df 2e       	mov	r13, r31
 5d8:	f0 2d       	mov	r31, r0
 5da:	0d eb       	ldi	r16, 0xBD	; 189
 5dc:	15 e0       	ldi	r17, 0x05	; 5
            sprintf(time_str, "Time: %04d ms", adc_ms);
 5de:	0f 2e       	mov	r0, r31
 5e0:	f4 e3       	ldi	r31, 0x34	; 52
 5e2:	ef 2e       	mov	r14, r31
 5e4:	f1 e0       	ldi	r31, 0x01	; 1
 5e6:	ff 2e       	mov	r15, r31
 5e8:	f0 2d       	mov	r31, r0
 5ea:	cd ea       	ldi	r28, 0xAD	; 173
 5ec:	d5 e0       	ldi	r29, 0x05	; 5
    lcd_init();
    tbit(LED_PORT, LED_YLW);

    while(1) {
        // Status LED blink
        delay(500);
 5ee:	84 ef       	ldi	r24, 0xF4	; 244
 5f0:	91 e0       	ldi	r25, 0x01	; 1
 5f2:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <delay>
        tbits(LED_PORT, ((1<<LED_YLW)|(1<<LED_RED)));     
 5f6:	8b b1       	in	r24, 0x0b	; 11
 5f8:	8b 25       	eor	r24, r11
 5fa:	8b b9       	out	0x0b, r24	; 11
        
        // Blink LEDs fast while SW2 is pressed 
        while((chkbit(SW_PIN, SW2) == 0)) {
 5fc:	19 99       	sbic	0x03, 1	; 3
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <main+0x7c>
            tbits(LED_PORT, (LED_ALL));
 600:	8b b1       	in	r24, 0x0b	; 11
 602:	8b 25       	eor	r24, r11
 604:	8b b9       	out	0x0b, r24	; 11
            delay(100);
 606:	84 e6       	ldi	r24, 0x64	; 100
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <delay>
        // Status LED blink
        delay(500);
        tbits(LED_PORT, ((1<<LED_YLW)|(1<<LED_RED)));     
        
        // Blink LEDs fast while SW2 is pressed 
        while((chkbit(SW_PIN, SW2) == 0)) {
 60e:	19 9b       	sbis	0x03, 1	; 3
 610:	f7 cf       	rjmp	.-18     	; 0x600 <main+0x6a>
            tbits(LED_PORT, (LED_ALL));
            delay(100);
        }
        
        // Read temperature sensor on ADC and display values on SW1 activation
        if((chkbit(SW_PIN, SW1) == 0)) {
 612:	18 99       	sbic	0x03, 0	; 3
 614:	ec cf       	rjmp	.-40     	; 0x5ee <main+0x58>
            
            /* Get values to display on screen */
            systck_tmp = systck;   // Store current systck value
 616:	80 91 a9 05 	lds	r24, 0x05A9
 61a:	90 91 aa 05 	lds	r25, 0x05AA
 61e:	a0 91 ab 05 	lds	r26, 0x05AB
 622:	b0 91 ac 05 	lds	r27, 0x05AC
 626:	80 93 9c 05 	sts	0x059C, r24
 62a:	90 93 9d 05 	sts	0x059D, r25
 62e:	a0 93 9e 05 	sts	0x059E, r26
 632:	b0 93 9f 05 	sts	0x059F, r27
            adc_val = lc_get(ADC_MUX_1V1);    // Read 1.1Vref
 636:	8f e0       	ldi	r24, 0x0F	; 15
 638:	0e 94 ae 02 	call	0x55c	; 0x55c <lc_get>
 63c:	80 93 a0 05 	sts	0x05A0, r24
 640:	90 93 a1 05 	sts	0x05A1, r25
            adc_ms = ((uint16_t)(systck - systck_tmp));  // Save time (in milliseconds) it took to do A/D conversion
 644:	40 91 a9 05 	lds	r20, 0x05A9
 648:	50 91 aa 05 	lds	r21, 0x05AA
 64c:	60 91 ab 05 	lds	r22, 0x05AB
 650:	70 91 ac 05 	lds	r23, 0x05AC
 654:	40 90 9c 05 	lds	r4, 0x059C
 658:	50 90 9d 05 	lds	r5, 0x059D
 65c:	60 90 9e 05 	lds	r6, 0x059E
 660:	70 90 9f 05 	lds	r7, 0x059F
 664:	44 19       	sub	r20, r4
 666:	55 09       	sbc	r21, r5
 668:	50 93 9b 05 	sts	0x059B, r21
 66c:	40 93 9a 05 	sts	0x059A, r20
                    
            /* Format to ASCII strings */
            sprintf(adc_str,  "ADC:  %04d", adc_val);
 670:	9f 93       	push	r25
 672:	8f 93       	push	r24
 674:	df 92       	push	r13
 676:	cf 92       	push	r12
 678:	1f 93       	push	r17
 67a:	0f 93       	push	r16
 67c:	0e 94 24 04 	call	0x848	; 0x848 <sprintf>
            sprintf(time_str, "Time: %04d ms", adc_ms);
 680:	80 91 9a 05 	lds	r24, 0x059A
 684:	90 91 9b 05 	lds	r25, 0x059B
 688:	9f 93       	push	r25
 68a:	8f 93       	push	r24
 68c:	ff 92       	push	r15
 68e:	ef 92       	push	r14
 690:	df 93       	push	r29
 692:	cf 93       	push	r28
 694:	0e 94 24 04 	call	0x848	; 0x848 <sprintf>
                    
            /* Print ADC & time values on screen */
            lcd_clear();
 698:	0e 94 17 02 	call	0x42e	; 0x42e <lcd_clear>
            lcd_set_line1();
 69c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_set_line1>
            lcd_write(LCD_DATA, adc_str, 16);
 6a0:	40 e1       	ldi	r20, 0x10	; 16
 6a2:	50 e0       	ldi	r21, 0x00	; 0
 6a4:	b8 01       	movw	r22, r16
 6a6:	80 e4       	ldi	r24, 0x40	; 64
 6a8:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_write>
            lcd_set_line2();
 6ac:	0e 94 00 02 	call	0x400	; 0x400 <lcd_set_line2>
            lcd_write(LCD_DATA, time_str, 16);
 6b0:	40 e1       	ldi	r20, 0x10	; 16
 6b2:	50 e0       	ldi	r21, 0x00	; 0
 6b4:	be 01       	movw	r22, r28
 6b6:	80 e4       	ldi	r24, 0x40	; 64
 6b8:	0e 94 ab 01 	call	0x356	; 0x356 <lcd_write>
 6bc:	8d b7       	in	r24, 0x3d	; 61
 6be:	9e b7       	in	r25, 0x3e	; 62
 6c0:	0c 96       	adiw	r24, 0x0c	; 12
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	f8 94       	cli
 6c6:	9e bf       	out	0x3e, r25	; 62
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	8d bf       	out	0x3d, r24	; 61
 6cc:	90 cf       	rjmp	.-224    	; 0x5ee <main+0x58>

000006ce <__vector_11>:
volatile uint8_t systime_s = 0;
volatile uint8_t systime_m = 0;
volatile uint8_t systime_h = 0;
volatile uint16_t systime_d = 0;

ISR(TIMER1_COMPA_vect) {
 6ce:	1f 92       	push	r1
 6d0:	0f 92       	push	r0
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	0f 92       	push	r0
 6d6:	11 24       	eor	r1, r1
 6d8:	2f 93       	push	r18
 6da:	8f 93       	push	r24
 6dc:	9f 93       	push	r25
 6de:	af 93       	push	r26
 6e0:	bf 93       	push	r27
    /* Increment systck global vars to keep system time */
    systck++;
 6e2:	80 91 a9 05 	lds	r24, 0x05A9
 6e6:	90 91 aa 05 	lds	r25, 0x05AA
 6ea:	a0 91 ab 05 	lds	r26, 0x05AB
 6ee:	b0 91 ac 05 	lds	r27, 0x05AC
 6f2:	01 96       	adiw	r24, 0x01	; 1
 6f4:	a1 1d       	adc	r26, r1
 6f6:	b1 1d       	adc	r27, r1
 6f8:	80 93 a9 05 	sts	0x05A9, r24
 6fc:	90 93 aa 05 	sts	0x05AA, r25
 700:	a0 93 ab 05 	sts	0x05AB, r26
 704:	b0 93 ac 05 	sts	0x05AC, r27
    systime_ms++;
 708:	80 91 a7 05 	lds	r24, 0x05A7
 70c:	90 91 a8 05 	lds	r25, 0x05A8
 710:	01 96       	adiw	r24, 0x01	; 1
 712:	90 93 a8 05 	sts	0x05A8, r25
 716:	80 93 a7 05 	sts	0x05A7, r24
    if(systime_ms >= 1000) {
 71a:	80 91 a7 05 	lds	r24, 0x05A7
 71e:	90 91 a8 05 	lds	r25, 0x05A8
 722:	88 3e       	cpi	r24, 0xE8	; 232
 724:	93 40       	sbci	r25, 0x03	; 3
 726:	70 f1       	brcs	.+92     	; 0x784 <__vector_11+0xb6>
        systime_ms = 0;
 728:	10 92 a8 05 	sts	0x05A8, r1
 72c:	10 92 a7 05 	sts	0x05A7, r1
        systime_s++;
 730:	80 91 a6 05 	lds	r24, 0x05A6
 734:	8f 5f       	subi	r24, 0xFF	; 255
 736:	80 93 a6 05 	sts	0x05A6, r24
        if(systime_s >= 60) {
 73a:	80 91 a6 05 	lds	r24, 0x05A6
 73e:	8c 33       	cpi	r24, 0x3C	; 60
 740:	08 f1       	brcs	.+66     	; 0x784 <__vector_11+0xb6>
            systime_s = 0;
 742:	10 92 a6 05 	sts	0x05A6, r1
            systime_m++;
 746:	80 91 a5 05 	lds	r24, 0x05A5
 74a:	8f 5f       	subi	r24, 0xFF	; 255
 74c:	80 93 a5 05 	sts	0x05A5, r24
            if(systime_m >= 60) {
 750:	80 91 a5 05 	lds	r24, 0x05A5
 754:	8c 33       	cpi	r24, 0x3C	; 60
 756:	b0 f0       	brcs	.+44     	; 0x784 <__vector_11+0xb6>
                systime_m = 0;
 758:	10 92 a5 05 	sts	0x05A5, r1
                systime_h++;
 75c:	80 91 a4 05 	lds	r24, 0x05A4
 760:	8f 5f       	subi	r24, 0xFF	; 255
 762:	80 93 a4 05 	sts	0x05A4, r24
                if(systime_h >= 24) {
 766:	80 91 a4 05 	lds	r24, 0x05A4
 76a:	88 31       	cpi	r24, 0x18	; 24
 76c:	58 f0       	brcs	.+22     	; 0x784 <__vector_11+0xb6>
                    systime_h = 0;
 76e:	10 92 a4 05 	sts	0x05A4, r1
                    systime_d++;
 772:	80 91 a2 05 	lds	r24, 0x05A2
 776:	90 91 a3 05 	lds	r25, 0x05A3
 77a:	01 96       	adiw	r24, 0x01	; 1
 77c:	90 93 a3 05 	sts	0x05A3, r25
 780:	80 93 a2 05 	sts	0x05A2, r24
                }
            }
        }        
    }
}
 784:	bf 91       	pop	r27
 786:	af 91       	pop	r26
 788:	9f 91       	pop	r25
 78a:	8f 91       	pop	r24
 78c:	2f 91       	pop	r18
 78e:	0f 90       	pop	r0
 790:	0f be       	out	0x3f, r0	; 63
 792:	0f 90       	pop	r0
 794:	1f 90       	pop	r1
 796:	18 95       	reti

00000798 <timer1_1ms_init>:
/*!
* @brief Disable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_disable(void) {
    TIMSK1 &= ~(1<<OCIE1A); // Disable Output compare Interrupt on Match A
 798:	af e6       	ldi	r26, 0x6F	; 111
 79a:	b0 e0       	ldi	r27, 0x00	; 0
 79c:	8c 91       	ld	r24, X
 79e:	8d 7f       	andi	r24, 0xFD	; 253
 7a0:	8c 93       	st	X, r24
    TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10)); // Disable timer1 clock source (disables timer)
 7a2:	e1 e8       	ldi	r30, 0x81	; 129
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	80 81       	ld	r24, Z
 7a8:	88 7f       	andi	r24, 0xF8	; 248
 7aa:	80 83       	st	Z, r24
*/
void timer1_1ms_init(void) {
    static uint16_t timer1_1ms_compare_value = 250-1;
        
    timer1_disable();
    TCCR1A = 0x00;  // Make sure no pins are set to output
 7ac:	10 92 80 00 	sts	0x0080, r1
    TCCR1B |= (1<<WGM12) | TIMER1_PRESCALE_MASK;  // Set CTC, prescalar to clk(io)/64 (250 counts per 1ms)
 7b0:	80 81       	ld	r24, Z
 7b2:	8b 60       	ori	r24, 0x0B	; 11
 7b4:	80 83       	st	Z, r24
    OCR1A = timer1_1ms_compare_value;    
 7b6:	89 ef       	ldi	r24, 0xF9	; 249
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	90 93 89 00 	sts	0x0089, r25
 7be:	80 93 88 00 	sts	0x0088, r24
/*!
* @brief Enable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_enable(void) {
    TIMSK1 |= (1<<OCIE1A);  // Enable Output Compare Interrupt on Match A
 7c2:	8c 91       	ld	r24, X
 7c4:	82 60       	ori	r24, 0x02	; 2
 7c6:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_PRESCALE_MASK; // Enable timer1 clock source (disables timer)
 7c8:	80 81       	ld	r24, Z
 7ca:	83 60       	ori	r24, 0x03	; 3
 7cc:	80 83       	st	Z, r24
 7ce:	08 95       	ret

000007d0 <delay>:
* @brief Delay milliseconds
* @param uint16_t delay_ms  Time to delay in milliseconds
* @return void
*/
void delay(uint16_t delay_ms) {
    uint32_t systck_1 = systck;
 7d0:	40 91 a9 05 	lds	r20, 0x05A9
 7d4:	50 91 aa 05 	lds	r21, 0x05AA
 7d8:	60 91 ab 05 	lds	r22, 0x05AB
 7dc:	70 91 ac 05 	lds	r23, 0x05AC
    while(systck < (systck_1 + delay_ms));  // delay
 7e0:	48 0f       	add	r20, r24
 7e2:	59 1f       	adc	r21, r25
 7e4:	61 1d       	adc	r22, r1
 7e6:	71 1d       	adc	r23, r1
 7e8:	80 91 a9 05 	lds	r24, 0x05A9
 7ec:	90 91 aa 05 	lds	r25, 0x05AA
 7f0:	a0 91 ab 05 	lds	r26, 0x05AB
 7f4:	b0 91 ac 05 	lds	r27, 0x05AC
 7f8:	84 17       	cp	r24, r20
 7fa:	95 07       	cpc	r25, r21
 7fc:	a6 07       	cpc	r26, r22
 7fe:	b7 07       	cpc	r27, r23
 800:	98 f3       	brcs	.-26     	; 0x7e8 <delay+0x18>
 802:	08 95       	ret

00000804 <__udivmodsi4>:
 804:	a1 e2       	ldi	r26, 0x21	; 33
 806:	1a 2e       	mov	r1, r26
 808:	aa 1b       	sub	r26, r26
 80a:	bb 1b       	sub	r27, r27
 80c:	fd 01       	movw	r30, r26
 80e:	0d c0       	rjmp	.+26     	; 0x82a <__udivmodsi4_ep>

00000810 <__udivmodsi4_loop>:
 810:	aa 1f       	adc	r26, r26
 812:	bb 1f       	adc	r27, r27
 814:	ee 1f       	adc	r30, r30
 816:	ff 1f       	adc	r31, r31
 818:	a2 17       	cp	r26, r18
 81a:	b3 07       	cpc	r27, r19
 81c:	e4 07       	cpc	r30, r20
 81e:	f5 07       	cpc	r31, r21
 820:	20 f0       	brcs	.+8      	; 0x82a <__udivmodsi4_ep>
 822:	a2 1b       	sub	r26, r18
 824:	b3 0b       	sbc	r27, r19
 826:	e4 0b       	sbc	r30, r20
 828:	f5 0b       	sbc	r31, r21

0000082a <__udivmodsi4_ep>:
 82a:	66 1f       	adc	r22, r22
 82c:	77 1f       	adc	r23, r23
 82e:	88 1f       	adc	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	1a 94       	dec	r1
 834:	69 f7       	brne	.-38     	; 0x810 <__udivmodsi4_loop>
 836:	60 95       	com	r22
 838:	70 95       	com	r23
 83a:	80 95       	com	r24
 83c:	90 95       	com	r25
 83e:	9b 01       	movw	r18, r22
 840:	ac 01       	movw	r20, r24
 842:	bd 01       	movw	r22, r26
 844:	cf 01       	movw	r24, r30
 846:	08 95       	ret

00000848 <sprintf>:
 848:	ae e0       	ldi	r26, 0x0E	; 14
 84a:	b0 e0       	ldi	r27, 0x00	; 0
 84c:	ea e2       	ldi	r30, 0x2A	; 42
 84e:	f4 e0       	ldi	r31, 0x04	; 4
 850:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__prologue_saves__+0x1c>
 854:	0d 89       	ldd	r16, Y+21	; 0x15
 856:	1e 89       	ldd	r17, Y+22	; 0x16
 858:	86 e0       	ldi	r24, 0x06	; 6
 85a:	8c 83       	std	Y+4, r24	; 0x04
 85c:	1a 83       	std	Y+2, r17	; 0x02
 85e:	09 83       	std	Y+1, r16	; 0x01
 860:	8f ef       	ldi	r24, 0xFF	; 255
 862:	9f e7       	ldi	r25, 0x7F	; 127
 864:	9e 83       	std	Y+6, r25	; 0x06
 866:	8d 83       	std	Y+5, r24	; 0x05
 868:	ae 01       	movw	r20, r28
 86a:	47 5e       	subi	r20, 0xE7	; 231
 86c:	5f 4f       	sbci	r21, 0xFF	; 255
 86e:	6f 89       	ldd	r22, Y+23	; 0x17
 870:	78 8d       	ldd	r23, Y+24	; 0x18
 872:	ce 01       	movw	r24, r28
 874:	01 96       	adiw	r24, 0x01	; 1
 876:	0e 94 47 04 	call	0x88e	; 0x88e <vfprintf>
 87a:	2f 81       	ldd	r18, Y+7	; 0x07
 87c:	38 85       	ldd	r19, Y+8	; 0x08
 87e:	f8 01       	movw	r30, r16
 880:	e2 0f       	add	r30, r18
 882:	f3 1f       	adc	r31, r19
 884:	10 82       	st	Z, r1
 886:	2e 96       	adiw	r28, 0x0e	; 14
 888:	e4 e0       	ldi	r30, 0x04	; 4
 88a:	0c 94 ef 06 	jmp	0xdde	; 0xdde <__epilogue_restores__+0x1c>

0000088e <vfprintf>:
 88e:	ac e0       	ldi	r26, 0x0C	; 12
 890:	b0 e0       	ldi	r27, 0x00	; 0
 892:	ed e4       	ldi	r30, 0x4D	; 77
 894:	f4 e0       	ldi	r31, 0x04	; 4
 896:	0c 94 c5 06 	jmp	0xd8a	; 0xd8a <__prologue_saves__>
 89a:	7c 01       	movw	r14, r24
 89c:	6b 01       	movw	r12, r22
 89e:	8a 01       	movw	r16, r20
 8a0:	fc 01       	movw	r30, r24
 8a2:	17 82       	std	Z+7, r1	; 0x07
 8a4:	16 82       	std	Z+6, r1	; 0x06
 8a6:	83 81       	ldd	r24, Z+3	; 0x03
 8a8:	81 ff       	sbrs	r24, 1
 8aa:	bd c1       	rjmp	.+890    	; 0xc26 <__stack+0x327>
 8ac:	ce 01       	movw	r24, r28
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	4c 01       	movw	r8, r24
 8b2:	f7 01       	movw	r30, r14
 8b4:	93 81       	ldd	r25, Z+3	; 0x03
 8b6:	f6 01       	movw	r30, r12
 8b8:	93 fd       	sbrc	r25, 3
 8ba:	85 91       	lpm	r24, Z+
 8bc:	93 ff       	sbrs	r25, 3
 8be:	81 91       	ld	r24, Z+
 8c0:	6f 01       	movw	r12, r30
 8c2:	88 23       	and	r24, r24
 8c4:	09 f4       	brne	.+2      	; 0x8c8 <vfprintf+0x3a>
 8c6:	ab c1       	rjmp	.+854    	; 0xc1e <__stack+0x31f>
 8c8:	85 32       	cpi	r24, 0x25	; 37
 8ca:	39 f4       	brne	.+14     	; 0x8da <vfprintf+0x4c>
 8cc:	93 fd       	sbrc	r25, 3
 8ce:	85 91       	lpm	r24, Z+
 8d0:	93 ff       	sbrs	r25, 3
 8d2:	81 91       	ld	r24, Z+
 8d4:	6f 01       	movw	r12, r30
 8d6:	85 32       	cpi	r24, 0x25	; 37
 8d8:	29 f4       	brne	.+10     	; 0x8e4 <vfprintf+0x56>
 8da:	b7 01       	movw	r22, r14
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 8e2:	e7 cf       	rjmp	.-50     	; 0x8b2 <vfprintf+0x24>
 8e4:	51 2c       	mov	r5, r1
 8e6:	31 2c       	mov	r3, r1
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	20 32       	cpi	r18, 0x20	; 32
 8ec:	a0 f4       	brcc	.+40     	; 0x916 <__stack+0x17>
 8ee:	8b 32       	cpi	r24, 0x2B	; 43
 8f0:	69 f0       	breq	.+26     	; 0x90c <__stack+0xd>
 8f2:	30 f4       	brcc	.+12     	; 0x900 <__stack+0x1>
 8f4:	80 32       	cpi	r24, 0x20	; 32
 8f6:	59 f0       	breq	.+22     	; 0x90e <__stack+0xf>
 8f8:	83 32       	cpi	r24, 0x23	; 35
 8fa:	69 f4       	brne	.+26     	; 0x916 <__stack+0x17>
 8fc:	20 61       	ori	r18, 0x10	; 16
 8fe:	2c c0       	rjmp	.+88     	; 0x958 <__stack+0x59>
 900:	8d 32       	cpi	r24, 0x2D	; 45
 902:	39 f0       	breq	.+14     	; 0x912 <__stack+0x13>
 904:	80 33       	cpi	r24, 0x30	; 48
 906:	39 f4       	brne	.+14     	; 0x916 <__stack+0x17>
 908:	21 60       	ori	r18, 0x01	; 1
 90a:	26 c0       	rjmp	.+76     	; 0x958 <__stack+0x59>
 90c:	22 60       	ori	r18, 0x02	; 2
 90e:	24 60       	ori	r18, 0x04	; 4
 910:	23 c0       	rjmp	.+70     	; 0x958 <__stack+0x59>
 912:	28 60       	ori	r18, 0x08	; 8
 914:	21 c0       	rjmp	.+66     	; 0x958 <__stack+0x59>
 916:	27 fd       	sbrc	r18, 7
 918:	27 c0       	rjmp	.+78     	; 0x968 <__stack+0x69>
 91a:	30 ed       	ldi	r19, 0xD0	; 208
 91c:	38 0f       	add	r19, r24
 91e:	3a 30       	cpi	r19, 0x0A	; 10
 920:	78 f4       	brcc	.+30     	; 0x940 <__stack+0x41>
 922:	26 ff       	sbrs	r18, 6
 924:	06 c0       	rjmp	.+12     	; 0x932 <__stack+0x33>
 926:	fa e0       	ldi	r31, 0x0A	; 10
 928:	5f 9e       	mul	r5, r31
 92a:	30 0d       	add	r19, r0
 92c:	11 24       	eor	r1, r1
 92e:	53 2e       	mov	r5, r19
 930:	13 c0       	rjmp	.+38     	; 0x958 <__stack+0x59>
 932:	8a e0       	ldi	r24, 0x0A	; 10
 934:	38 9e       	mul	r3, r24
 936:	30 0d       	add	r19, r0
 938:	11 24       	eor	r1, r1
 93a:	33 2e       	mov	r3, r19
 93c:	20 62       	ori	r18, 0x20	; 32
 93e:	0c c0       	rjmp	.+24     	; 0x958 <__stack+0x59>
 940:	8e 32       	cpi	r24, 0x2E	; 46
 942:	21 f4       	brne	.+8      	; 0x94c <__stack+0x4d>
 944:	26 fd       	sbrc	r18, 6
 946:	6b c1       	rjmp	.+726    	; 0xc1e <__stack+0x31f>
 948:	20 64       	ori	r18, 0x40	; 64
 94a:	06 c0       	rjmp	.+12     	; 0x958 <__stack+0x59>
 94c:	8c 36       	cpi	r24, 0x6C	; 108
 94e:	11 f4       	brne	.+4      	; 0x954 <__stack+0x55>
 950:	20 68       	ori	r18, 0x80	; 128
 952:	02 c0       	rjmp	.+4      	; 0x958 <__stack+0x59>
 954:	88 36       	cpi	r24, 0x68	; 104
 956:	41 f4       	brne	.+16     	; 0x968 <__stack+0x69>
 958:	f6 01       	movw	r30, r12
 95a:	93 fd       	sbrc	r25, 3
 95c:	85 91       	lpm	r24, Z+
 95e:	93 ff       	sbrs	r25, 3
 960:	81 91       	ld	r24, Z+
 962:	6f 01       	movw	r12, r30
 964:	81 11       	cpse	r24, r1
 966:	c1 cf       	rjmp	.-126    	; 0x8ea <vfprintf+0x5c>
 968:	98 2f       	mov	r25, r24
 96a:	9f 7d       	andi	r25, 0xDF	; 223
 96c:	95 54       	subi	r25, 0x45	; 69
 96e:	93 30       	cpi	r25, 0x03	; 3
 970:	28 f4       	brcc	.+10     	; 0x97c <__stack+0x7d>
 972:	0c 5f       	subi	r16, 0xFC	; 252
 974:	1f 4f       	sbci	r17, 0xFF	; 255
 976:	ff e3       	ldi	r31, 0x3F	; 63
 978:	f9 83       	std	Y+1, r31	; 0x01
 97a:	0d c0       	rjmp	.+26     	; 0x996 <__stack+0x97>
 97c:	83 36       	cpi	r24, 0x63	; 99
 97e:	31 f0       	breq	.+12     	; 0x98c <__stack+0x8d>
 980:	83 37       	cpi	r24, 0x73	; 115
 982:	71 f0       	breq	.+28     	; 0x9a0 <__stack+0xa1>
 984:	83 35       	cpi	r24, 0x53	; 83
 986:	09 f0       	breq	.+2      	; 0x98a <__stack+0x8b>
 988:	5b c0       	rjmp	.+182    	; 0xa40 <__stack+0x141>
 98a:	22 c0       	rjmp	.+68     	; 0x9d0 <__stack+0xd1>
 98c:	f8 01       	movw	r30, r16
 98e:	80 81       	ld	r24, Z
 990:	89 83       	std	Y+1, r24	; 0x01
 992:	0e 5f       	subi	r16, 0xFE	; 254
 994:	1f 4f       	sbci	r17, 0xFF	; 255
 996:	44 24       	eor	r4, r4
 998:	43 94       	inc	r4
 99a:	51 2c       	mov	r5, r1
 99c:	54 01       	movw	r10, r8
 99e:	15 c0       	rjmp	.+42     	; 0x9ca <__stack+0xcb>
 9a0:	38 01       	movw	r6, r16
 9a2:	f2 e0       	ldi	r31, 0x02	; 2
 9a4:	6f 0e       	add	r6, r31
 9a6:	71 1c       	adc	r7, r1
 9a8:	f8 01       	movw	r30, r16
 9aa:	a0 80       	ld	r10, Z
 9ac:	b1 80       	ldd	r11, Z+1	; 0x01
 9ae:	26 ff       	sbrs	r18, 6
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <__stack+0xb9>
 9b2:	65 2d       	mov	r22, r5
 9b4:	70 e0       	ldi	r23, 0x00	; 0
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <__stack+0xbd>
 9b8:	6f ef       	ldi	r22, 0xFF	; 255
 9ba:	7f ef       	ldi	r23, 0xFF	; 255
 9bc:	c5 01       	movw	r24, r10
 9be:	2c 87       	std	Y+12, r18	; 0x0c
 9c0:	0e 94 24 06 	call	0xc48	; 0xc48 <strnlen>
 9c4:	2c 01       	movw	r4, r24
 9c6:	83 01       	movw	r16, r6
 9c8:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ca:	2f 77       	andi	r18, 0x7F	; 127
 9cc:	22 2e       	mov	r2, r18
 9ce:	17 c0       	rjmp	.+46     	; 0x9fe <__stack+0xff>
 9d0:	38 01       	movw	r6, r16
 9d2:	f2 e0       	ldi	r31, 0x02	; 2
 9d4:	6f 0e       	add	r6, r31
 9d6:	71 1c       	adc	r7, r1
 9d8:	f8 01       	movw	r30, r16
 9da:	a0 80       	ld	r10, Z
 9dc:	b1 80       	ldd	r11, Z+1	; 0x01
 9de:	26 ff       	sbrs	r18, 6
 9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <__stack+0xe9>
 9e2:	65 2d       	mov	r22, r5
 9e4:	70 e0       	ldi	r23, 0x00	; 0
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <__stack+0xed>
 9e8:	6f ef       	ldi	r22, 0xFF	; 255
 9ea:	7f ef       	ldi	r23, 0xFF	; 255
 9ec:	c5 01       	movw	r24, r10
 9ee:	2c 87       	std	Y+12, r18	; 0x0c
 9f0:	0e 94 19 06 	call	0xc32	; 0xc32 <strnlen_P>
 9f4:	2c 01       	movw	r4, r24
 9f6:	2c 85       	ldd	r18, Y+12	; 0x0c
 9f8:	20 68       	ori	r18, 0x80	; 128
 9fa:	22 2e       	mov	r2, r18
 9fc:	83 01       	movw	r16, r6
 9fe:	23 fc       	sbrc	r2, 3
 a00:	1b c0       	rjmp	.+54     	; 0xa38 <__stack+0x139>
 a02:	83 2d       	mov	r24, r3
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	48 16       	cp	r4, r24
 a08:	59 06       	cpc	r5, r25
 a0a:	b0 f4       	brcc	.+44     	; 0xa38 <__stack+0x139>
 a0c:	b7 01       	movw	r22, r14
 a0e:	80 e2       	ldi	r24, 0x20	; 32
 a10:	90 e0       	ldi	r25, 0x00	; 0
 a12:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 a16:	3a 94       	dec	r3
 a18:	f4 cf       	rjmp	.-24     	; 0xa02 <__stack+0x103>
 a1a:	f5 01       	movw	r30, r10
 a1c:	27 fc       	sbrc	r2, 7
 a1e:	85 91       	lpm	r24, Z+
 a20:	27 fe       	sbrs	r2, 7
 a22:	81 91       	ld	r24, Z+
 a24:	5f 01       	movw	r10, r30
 a26:	b7 01       	movw	r22, r14
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 a2e:	31 10       	cpse	r3, r1
 a30:	3a 94       	dec	r3
 a32:	f1 e0       	ldi	r31, 0x01	; 1
 a34:	4f 1a       	sub	r4, r31
 a36:	51 08       	sbc	r5, r1
 a38:	41 14       	cp	r4, r1
 a3a:	51 04       	cpc	r5, r1
 a3c:	71 f7       	brne	.-36     	; 0xa1a <__stack+0x11b>
 a3e:	e5 c0       	rjmp	.+458    	; 0xc0a <__stack+0x30b>
 a40:	84 36       	cpi	r24, 0x64	; 100
 a42:	11 f0       	breq	.+4      	; 0xa48 <__stack+0x149>
 a44:	89 36       	cpi	r24, 0x69	; 105
 a46:	39 f5       	brne	.+78     	; 0xa96 <__stack+0x197>
 a48:	f8 01       	movw	r30, r16
 a4a:	27 ff       	sbrs	r18, 7
 a4c:	07 c0       	rjmp	.+14     	; 0xa5c <__stack+0x15d>
 a4e:	60 81       	ld	r22, Z
 a50:	71 81       	ldd	r23, Z+1	; 0x01
 a52:	82 81       	ldd	r24, Z+2	; 0x02
 a54:	93 81       	ldd	r25, Z+3	; 0x03
 a56:	0c 5f       	subi	r16, 0xFC	; 252
 a58:	1f 4f       	sbci	r17, 0xFF	; 255
 a5a:	08 c0       	rjmp	.+16     	; 0xa6c <__stack+0x16d>
 a5c:	60 81       	ld	r22, Z
 a5e:	71 81       	ldd	r23, Z+1	; 0x01
 a60:	07 2e       	mov	r0, r23
 a62:	00 0c       	add	r0, r0
 a64:	88 0b       	sbc	r24, r24
 a66:	99 0b       	sbc	r25, r25
 a68:	0e 5f       	subi	r16, 0xFE	; 254
 a6a:	1f 4f       	sbci	r17, 0xFF	; 255
 a6c:	2f 76       	andi	r18, 0x6F	; 111
 a6e:	72 2e       	mov	r7, r18
 a70:	97 ff       	sbrs	r25, 7
 a72:	09 c0       	rjmp	.+18     	; 0xa86 <__stack+0x187>
 a74:	90 95       	com	r25
 a76:	80 95       	com	r24
 a78:	70 95       	com	r23
 a7a:	61 95       	neg	r22
 a7c:	7f 4f       	sbci	r23, 0xFF	; 255
 a7e:	8f 4f       	sbci	r24, 0xFF	; 255
 a80:	9f 4f       	sbci	r25, 0xFF	; 255
 a82:	20 68       	ori	r18, 0x80	; 128
 a84:	72 2e       	mov	r7, r18
 a86:	2a e0       	ldi	r18, 0x0A	; 10
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	a4 01       	movw	r20, r8
 a8c:	0e 94 67 06 	call	0xcce	; 0xcce <__ultoa_invert>
 a90:	a8 2e       	mov	r10, r24
 a92:	a8 18       	sub	r10, r8
 a94:	44 c0       	rjmp	.+136    	; 0xb1e <__stack+0x21f>
 a96:	85 37       	cpi	r24, 0x75	; 117
 a98:	29 f4       	brne	.+10     	; 0xaa4 <__stack+0x1a5>
 a9a:	2f 7e       	andi	r18, 0xEF	; 239
 a9c:	b2 2e       	mov	r11, r18
 a9e:	2a e0       	ldi	r18, 0x0A	; 10
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	25 c0       	rjmp	.+74     	; 0xaee <__stack+0x1ef>
 aa4:	f2 2f       	mov	r31, r18
 aa6:	f9 7f       	andi	r31, 0xF9	; 249
 aa8:	bf 2e       	mov	r11, r31
 aaa:	8f 36       	cpi	r24, 0x6F	; 111
 aac:	c1 f0       	breq	.+48     	; 0xade <__stack+0x1df>
 aae:	18 f4       	brcc	.+6      	; 0xab6 <__stack+0x1b7>
 ab0:	88 35       	cpi	r24, 0x58	; 88
 ab2:	79 f0       	breq	.+30     	; 0xad2 <__stack+0x1d3>
 ab4:	b4 c0       	rjmp	.+360    	; 0xc1e <__stack+0x31f>
 ab6:	80 37       	cpi	r24, 0x70	; 112
 ab8:	19 f0       	breq	.+6      	; 0xac0 <__stack+0x1c1>
 aba:	88 37       	cpi	r24, 0x78	; 120
 abc:	21 f0       	breq	.+8      	; 0xac6 <__stack+0x1c7>
 abe:	af c0       	rjmp	.+350    	; 0xc1e <__stack+0x31f>
 ac0:	2f 2f       	mov	r18, r31
 ac2:	20 61       	ori	r18, 0x10	; 16
 ac4:	b2 2e       	mov	r11, r18
 ac6:	b4 fe       	sbrs	r11, 4
 ac8:	0d c0       	rjmp	.+26     	; 0xae4 <__stack+0x1e5>
 aca:	8b 2d       	mov	r24, r11
 acc:	84 60       	ori	r24, 0x04	; 4
 ace:	b8 2e       	mov	r11, r24
 ad0:	09 c0       	rjmp	.+18     	; 0xae4 <__stack+0x1e5>
 ad2:	24 ff       	sbrs	r18, 4
 ad4:	0a c0       	rjmp	.+20     	; 0xaea <__stack+0x1eb>
 ad6:	9f 2f       	mov	r25, r31
 ad8:	96 60       	ori	r25, 0x06	; 6
 ada:	b9 2e       	mov	r11, r25
 adc:	06 c0       	rjmp	.+12     	; 0xaea <__stack+0x1eb>
 ade:	28 e0       	ldi	r18, 0x08	; 8
 ae0:	30 e0       	ldi	r19, 0x00	; 0
 ae2:	05 c0       	rjmp	.+10     	; 0xaee <__stack+0x1ef>
 ae4:	20 e1       	ldi	r18, 0x10	; 16
 ae6:	30 e0       	ldi	r19, 0x00	; 0
 ae8:	02 c0       	rjmp	.+4      	; 0xaee <__stack+0x1ef>
 aea:	20 e1       	ldi	r18, 0x10	; 16
 aec:	32 e0       	ldi	r19, 0x02	; 2
 aee:	f8 01       	movw	r30, r16
 af0:	b7 fe       	sbrs	r11, 7
 af2:	07 c0       	rjmp	.+14     	; 0xb02 <__stack+0x203>
 af4:	60 81       	ld	r22, Z
 af6:	71 81       	ldd	r23, Z+1	; 0x01
 af8:	82 81       	ldd	r24, Z+2	; 0x02
 afa:	93 81       	ldd	r25, Z+3	; 0x03
 afc:	0c 5f       	subi	r16, 0xFC	; 252
 afe:	1f 4f       	sbci	r17, 0xFF	; 255
 b00:	06 c0       	rjmp	.+12     	; 0xb0e <__stack+0x20f>
 b02:	60 81       	ld	r22, Z
 b04:	71 81       	ldd	r23, Z+1	; 0x01
 b06:	80 e0       	ldi	r24, 0x00	; 0
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	0e 5f       	subi	r16, 0xFE	; 254
 b0c:	1f 4f       	sbci	r17, 0xFF	; 255
 b0e:	a4 01       	movw	r20, r8
 b10:	0e 94 67 06 	call	0xcce	; 0xcce <__ultoa_invert>
 b14:	a8 2e       	mov	r10, r24
 b16:	a8 18       	sub	r10, r8
 b18:	fb 2d       	mov	r31, r11
 b1a:	ff 77       	andi	r31, 0x7F	; 127
 b1c:	7f 2e       	mov	r7, r31
 b1e:	76 fe       	sbrs	r7, 6
 b20:	0b c0       	rjmp	.+22     	; 0xb38 <__stack+0x239>
 b22:	37 2d       	mov	r19, r7
 b24:	3e 7f       	andi	r19, 0xFE	; 254
 b26:	a5 14       	cp	r10, r5
 b28:	50 f4       	brcc	.+20     	; 0xb3e <__stack+0x23f>
 b2a:	74 fe       	sbrs	r7, 4
 b2c:	0a c0       	rjmp	.+20     	; 0xb42 <__stack+0x243>
 b2e:	72 fc       	sbrc	r7, 2
 b30:	08 c0       	rjmp	.+16     	; 0xb42 <__stack+0x243>
 b32:	37 2d       	mov	r19, r7
 b34:	3e 7e       	andi	r19, 0xEE	; 238
 b36:	05 c0       	rjmp	.+10     	; 0xb42 <__stack+0x243>
 b38:	ba 2c       	mov	r11, r10
 b3a:	37 2d       	mov	r19, r7
 b3c:	03 c0       	rjmp	.+6      	; 0xb44 <__stack+0x245>
 b3e:	ba 2c       	mov	r11, r10
 b40:	01 c0       	rjmp	.+2      	; 0xb44 <__stack+0x245>
 b42:	b5 2c       	mov	r11, r5
 b44:	34 ff       	sbrs	r19, 4
 b46:	0d c0       	rjmp	.+26     	; 0xb62 <__stack+0x263>
 b48:	fe 01       	movw	r30, r28
 b4a:	ea 0d       	add	r30, r10
 b4c:	f1 1d       	adc	r31, r1
 b4e:	80 81       	ld	r24, Z
 b50:	80 33       	cpi	r24, 0x30	; 48
 b52:	11 f4       	brne	.+4      	; 0xb58 <__stack+0x259>
 b54:	39 7e       	andi	r19, 0xE9	; 233
 b56:	09 c0       	rjmp	.+18     	; 0xb6a <__stack+0x26b>
 b58:	32 ff       	sbrs	r19, 2
 b5a:	06 c0       	rjmp	.+12     	; 0xb68 <__stack+0x269>
 b5c:	b3 94       	inc	r11
 b5e:	b3 94       	inc	r11
 b60:	04 c0       	rjmp	.+8      	; 0xb6a <__stack+0x26b>
 b62:	83 2f       	mov	r24, r19
 b64:	86 78       	andi	r24, 0x86	; 134
 b66:	09 f0       	breq	.+2      	; 0xb6a <__stack+0x26b>
 b68:	b3 94       	inc	r11
 b6a:	33 fd       	sbrc	r19, 3
 b6c:	13 c0       	rjmp	.+38     	; 0xb94 <__stack+0x295>
 b6e:	30 ff       	sbrs	r19, 0
 b70:	06 c0       	rjmp	.+12     	; 0xb7e <__stack+0x27f>
 b72:	5a 2c       	mov	r5, r10
 b74:	b3 14       	cp	r11, r3
 b76:	18 f4       	brcc	.+6      	; 0xb7e <__stack+0x27f>
 b78:	53 0c       	add	r5, r3
 b7a:	5b 18       	sub	r5, r11
 b7c:	b3 2c       	mov	r11, r3
 b7e:	b3 14       	cp	r11, r3
 b80:	68 f4       	brcc	.+26     	; 0xb9c <__stack+0x29d>
 b82:	b7 01       	movw	r22, r14
 b84:	80 e2       	ldi	r24, 0x20	; 32
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	3c 87       	std	Y+12, r19	; 0x0c
 b8a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 b8e:	b3 94       	inc	r11
 b90:	3c 85       	ldd	r19, Y+12	; 0x0c
 b92:	f5 cf       	rjmp	.-22     	; 0xb7e <__stack+0x27f>
 b94:	b3 14       	cp	r11, r3
 b96:	10 f4       	brcc	.+4      	; 0xb9c <__stack+0x29d>
 b98:	3b 18       	sub	r3, r11
 b9a:	01 c0       	rjmp	.+2      	; 0xb9e <__stack+0x29f>
 b9c:	31 2c       	mov	r3, r1
 b9e:	34 ff       	sbrs	r19, 4
 ba0:	12 c0       	rjmp	.+36     	; 0xbc6 <__stack+0x2c7>
 ba2:	b7 01       	movw	r22, r14
 ba4:	80 e3       	ldi	r24, 0x30	; 48
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	3c 87       	std	Y+12, r19	; 0x0c
 baa:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 bae:	3c 85       	ldd	r19, Y+12	; 0x0c
 bb0:	32 ff       	sbrs	r19, 2
 bb2:	17 c0       	rjmp	.+46     	; 0xbe2 <__stack+0x2e3>
 bb4:	31 fd       	sbrc	r19, 1
 bb6:	03 c0       	rjmp	.+6      	; 0xbbe <__stack+0x2bf>
 bb8:	88 e7       	ldi	r24, 0x78	; 120
 bba:	90 e0       	ldi	r25, 0x00	; 0
 bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <__stack+0x2c3>
 bbe:	88 e5       	ldi	r24, 0x58	; 88
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	b7 01       	movw	r22, r14
 bc4:	0c c0       	rjmp	.+24     	; 0xbde <__stack+0x2df>
 bc6:	83 2f       	mov	r24, r19
 bc8:	86 78       	andi	r24, 0x86	; 134
 bca:	59 f0       	breq	.+22     	; 0xbe2 <__stack+0x2e3>
 bcc:	31 ff       	sbrs	r19, 1
 bce:	02 c0       	rjmp	.+4      	; 0xbd4 <__stack+0x2d5>
 bd0:	8b e2       	ldi	r24, 0x2B	; 43
 bd2:	01 c0       	rjmp	.+2      	; 0xbd6 <__stack+0x2d7>
 bd4:	80 e2       	ldi	r24, 0x20	; 32
 bd6:	37 fd       	sbrc	r19, 7
 bd8:	8d e2       	ldi	r24, 0x2D	; 45
 bda:	b7 01       	movw	r22, r14
 bdc:	90 e0       	ldi	r25, 0x00	; 0
 bde:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 be2:	a5 14       	cp	r10, r5
 be4:	38 f4       	brcc	.+14     	; 0xbf4 <__stack+0x2f5>
 be6:	b7 01       	movw	r22, r14
 be8:	80 e3       	ldi	r24, 0x30	; 48
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 bf0:	5a 94       	dec	r5
 bf2:	f7 cf       	rjmp	.-18     	; 0xbe2 <__stack+0x2e3>
 bf4:	aa 94       	dec	r10
 bf6:	f4 01       	movw	r30, r8
 bf8:	ea 0d       	add	r30, r10
 bfa:	f1 1d       	adc	r31, r1
 bfc:	80 81       	ld	r24, Z
 bfe:	b7 01       	movw	r22, r14
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 c06:	a1 10       	cpse	r10, r1
 c08:	f5 cf       	rjmp	.-22     	; 0xbf4 <__stack+0x2f5>
 c0a:	33 20       	and	r3, r3
 c0c:	09 f4       	brne	.+2      	; 0xc10 <__stack+0x311>
 c0e:	51 ce       	rjmp	.-862    	; 0x8b2 <vfprintf+0x24>
 c10:	b7 01       	movw	r22, r14
 c12:	80 e2       	ldi	r24, 0x20	; 32
 c14:	90 e0       	ldi	r25, 0x00	; 0
 c16:	0e 94 2f 06 	call	0xc5e	; 0xc5e <fputc>
 c1a:	3a 94       	dec	r3
 c1c:	f6 cf       	rjmp	.-20     	; 0xc0a <__stack+0x30b>
 c1e:	f7 01       	movw	r30, r14
 c20:	86 81       	ldd	r24, Z+6	; 0x06
 c22:	97 81       	ldd	r25, Z+7	; 0x07
 c24:	02 c0       	rjmp	.+4      	; 0xc2a <__stack+0x32b>
 c26:	8f ef       	ldi	r24, 0xFF	; 255
 c28:	9f ef       	ldi	r25, 0xFF	; 255
 c2a:	2c 96       	adiw	r28, 0x0c	; 12
 c2c:	e2 e1       	ldi	r30, 0x12	; 18
 c2e:	0c 94 e1 06 	jmp	0xdc2	; 0xdc2 <__epilogue_restores__>

00000c32 <strnlen_P>:
 c32:	fc 01       	movw	r30, r24
 c34:	05 90       	lpm	r0, Z+
 c36:	61 50       	subi	r22, 0x01	; 1
 c38:	70 40       	sbci	r23, 0x00	; 0
 c3a:	01 10       	cpse	r0, r1
 c3c:	d8 f7       	brcc	.-10     	; 0xc34 <strnlen_P+0x2>
 c3e:	80 95       	com	r24
 c40:	90 95       	com	r25
 c42:	8e 0f       	add	r24, r30
 c44:	9f 1f       	adc	r25, r31
 c46:	08 95       	ret

00000c48 <strnlen>:
 c48:	fc 01       	movw	r30, r24
 c4a:	61 50       	subi	r22, 0x01	; 1
 c4c:	70 40       	sbci	r23, 0x00	; 0
 c4e:	01 90       	ld	r0, Z+
 c50:	01 10       	cpse	r0, r1
 c52:	d8 f7       	brcc	.-10     	; 0xc4a <strnlen+0x2>
 c54:	80 95       	com	r24
 c56:	90 95       	com	r25
 c58:	8e 0f       	add	r24, r30
 c5a:	9f 1f       	adc	r25, r31
 c5c:	08 95       	ret

00000c5e <fputc>:
 c5e:	0f 93       	push	r16
 c60:	1f 93       	push	r17
 c62:	cf 93       	push	r28
 c64:	df 93       	push	r29
 c66:	fb 01       	movw	r30, r22
 c68:	23 81       	ldd	r18, Z+3	; 0x03
 c6a:	21 fd       	sbrc	r18, 1
 c6c:	03 c0       	rjmp	.+6      	; 0xc74 <fputc+0x16>
 c6e:	8f ef       	ldi	r24, 0xFF	; 255
 c70:	9f ef       	ldi	r25, 0xFF	; 255
 c72:	28 c0       	rjmp	.+80     	; 0xcc4 <fputc+0x66>
 c74:	22 ff       	sbrs	r18, 2
 c76:	16 c0       	rjmp	.+44     	; 0xca4 <fputc+0x46>
 c78:	46 81       	ldd	r20, Z+6	; 0x06
 c7a:	57 81       	ldd	r21, Z+7	; 0x07
 c7c:	24 81       	ldd	r18, Z+4	; 0x04
 c7e:	35 81       	ldd	r19, Z+5	; 0x05
 c80:	42 17       	cp	r20, r18
 c82:	53 07       	cpc	r21, r19
 c84:	44 f4       	brge	.+16     	; 0xc96 <fputc+0x38>
 c86:	a0 81       	ld	r26, Z
 c88:	b1 81       	ldd	r27, Z+1	; 0x01
 c8a:	9d 01       	movw	r18, r26
 c8c:	2f 5f       	subi	r18, 0xFF	; 255
 c8e:	3f 4f       	sbci	r19, 0xFF	; 255
 c90:	31 83       	std	Z+1, r19	; 0x01
 c92:	20 83       	st	Z, r18
 c94:	8c 93       	st	X, r24
 c96:	26 81       	ldd	r18, Z+6	; 0x06
 c98:	37 81       	ldd	r19, Z+7	; 0x07
 c9a:	2f 5f       	subi	r18, 0xFF	; 255
 c9c:	3f 4f       	sbci	r19, 0xFF	; 255
 c9e:	37 83       	std	Z+7, r19	; 0x07
 ca0:	26 83       	std	Z+6, r18	; 0x06
 ca2:	10 c0       	rjmp	.+32     	; 0xcc4 <fputc+0x66>
 ca4:	eb 01       	movw	r28, r22
 ca6:	09 2f       	mov	r16, r25
 ca8:	18 2f       	mov	r17, r24
 caa:	00 84       	ldd	r0, Z+8	; 0x08
 cac:	f1 85       	ldd	r31, Z+9	; 0x09
 cae:	e0 2d       	mov	r30, r0
 cb0:	09 95       	icall
 cb2:	89 2b       	or	r24, r25
 cb4:	e1 f6       	brne	.-72     	; 0xc6e <fputc+0x10>
 cb6:	8e 81       	ldd	r24, Y+6	; 0x06
 cb8:	9f 81       	ldd	r25, Y+7	; 0x07
 cba:	01 96       	adiw	r24, 0x01	; 1
 cbc:	9f 83       	std	Y+7, r25	; 0x07
 cbe:	8e 83       	std	Y+6, r24	; 0x06
 cc0:	81 2f       	mov	r24, r17
 cc2:	90 2f       	mov	r25, r16
 cc4:	df 91       	pop	r29
 cc6:	cf 91       	pop	r28
 cc8:	1f 91       	pop	r17
 cca:	0f 91       	pop	r16
 ccc:	08 95       	ret

00000cce <__ultoa_invert>:
 cce:	fa 01       	movw	r30, r20
 cd0:	aa 27       	eor	r26, r26
 cd2:	28 30       	cpi	r18, 0x08	; 8
 cd4:	51 f1       	breq	.+84     	; 0xd2a <__ultoa_invert+0x5c>
 cd6:	20 31       	cpi	r18, 0x10	; 16
 cd8:	81 f1       	breq	.+96     	; 0xd3a <__ultoa_invert+0x6c>
 cda:	e8 94       	clt
 cdc:	6f 93       	push	r22
 cde:	6e 7f       	andi	r22, 0xFE	; 254
 ce0:	6e 5f       	subi	r22, 0xFE	; 254
 ce2:	7f 4f       	sbci	r23, 0xFF	; 255
 ce4:	8f 4f       	sbci	r24, 0xFF	; 255
 ce6:	9f 4f       	sbci	r25, 0xFF	; 255
 ce8:	af 4f       	sbci	r26, 0xFF	; 255
 cea:	b1 e0       	ldi	r27, 0x01	; 1
 cec:	3e d0       	rcall	.+124    	; 0xd6a <__ultoa_invert+0x9c>
 cee:	b4 e0       	ldi	r27, 0x04	; 4
 cf0:	3c d0       	rcall	.+120    	; 0xd6a <__ultoa_invert+0x9c>
 cf2:	67 0f       	add	r22, r23
 cf4:	78 1f       	adc	r23, r24
 cf6:	89 1f       	adc	r24, r25
 cf8:	9a 1f       	adc	r25, r26
 cfa:	a1 1d       	adc	r26, r1
 cfc:	68 0f       	add	r22, r24
 cfe:	79 1f       	adc	r23, r25
 d00:	8a 1f       	adc	r24, r26
 d02:	91 1d       	adc	r25, r1
 d04:	a1 1d       	adc	r26, r1
 d06:	6a 0f       	add	r22, r26
 d08:	71 1d       	adc	r23, r1
 d0a:	81 1d       	adc	r24, r1
 d0c:	91 1d       	adc	r25, r1
 d0e:	a1 1d       	adc	r26, r1
 d10:	20 d0       	rcall	.+64     	; 0xd52 <__ultoa_invert+0x84>
 d12:	09 f4       	brne	.+2      	; 0xd16 <__ultoa_invert+0x48>
 d14:	68 94       	set
 d16:	3f 91       	pop	r19
 d18:	2a e0       	ldi	r18, 0x0A	; 10
 d1a:	26 9f       	mul	r18, r22
 d1c:	11 24       	eor	r1, r1
 d1e:	30 19       	sub	r19, r0
 d20:	30 5d       	subi	r19, 0xD0	; 208
 d22:	31 93       	st	Z+, r19
 d24:	de f6       	brtc	.-74     	; 0xcdc <__ultoa_invert+0xe>
 d26:	cf 01       	movw	r24, r30
 d28:	08 95       	ret
 d2a:	46 2f       	mov	r20, r22
 d2c:	47 70       	andi	r20, 0x07	; 7
 d2e:	40 5d       	subi	r20, 0xD0	; 208
 d30:	41 93       	st	Z+, r20
 d32:	b3 e0       	ldi	r27, 0x03	; 3
 d34:	0f d0       	rcall	.+30     	; 0xd54 <__ultoa_invert+0x86>
 d36:	c9 f7       	brne	.-14     	; 0xd2a <__ultoa_invert+0x5c>
 d38:	f6 cf       	rjmp	.-20     	; 0xd26 <__ultoa_invert+0x58>
 d3a:	46 2f       	mov	r20, r22
 d3c:	4f 70       	andi	r20, 0x0F	; 15
 d3e:	40 5d       	subi	r20, 0xD0	; 208
 d40:	4a 33       	cpi	r20, 0x3A	; 58
 d42:	18 f0       	brcs	.+6      	; 0xd4a <__ultoa_invert+0x7c>
 d44:	49 5d       	subi	r20, 0xD9	; 217
 d46:	31 fd       	sbrc	r19, 1
 d48:	40 52       	subi	r20, 0x20	; 32
 d4a:	41 93       	st	Z+, r20
 d4c:	02 d0       	rcall	.+4      	; 0xd52 <__ultoa_invert+0x84>
 d4e:	a9 f7       	brne	.-22     	; 0xd3a <__ultoa_invert+0x6c>
 d50:	ea cf       	rjmp	.-44     	; 0xd26 <__ultoa_invert+0x58>
 d52:	b4 e0       	ldi	r27, 0x04	; 4
 d54:	a6 95       	lsr	r26
 d56:	97 95       	ror	r25
 d58:	87 95       	ror	r24
 d5a:	77 95       	ror	r23
 d5c:	67 95       	ror	r22
 d5e:	ba 95       	dec	r27
 d60:	c9 f7       	brne	.-14     	; 0xd54 <__ultoa_invert+0x86>
 d62:	00 97       	sbiw	r24, 0x00	; 0
 d64:	61 05       	cpc	r22, r1
 d66:	71 05       	cpc	r23, r1
 d68:	08 95       	ret
 d6a:	9b 01       	movw	r18, r22
 d6c:	ac 01       	movw	r20, r24
 d6e:	0a 2e       	mov	r0, r26
 d70:	06 94       	lsr	r0
 d72:	57 95       	ror	r21
 d74:	47 95       	ror	r20
 d76:	37 95       	ror	r19
 d78:	27 95       	ror	r18
 d7a:	ba 95       	dec	r27
 d7c:	c9 f7       	brne	.-14     	; 0xd70 <__ultoa_invert+0xa2>
 d7e:	62 0f       	add	r22, r18
 d80:	73 1f       	adc	r23, r19
 d82:	84 1f       	adc	r24, r20
 d84:	95 1f       	adc	r25, r21
 d86:	a0 1d       	adc	r26, r0
 d88:	08 95       	ret

00000d8a <__prologue_saves__>:
 d8a:	2f 92       	push	r2
 d8c:	3f 92       	push	r3
 d8e:	4f 92       	push	r4
 d90:	5f 92       	push	r5
 d92:	6f 92       	push	r6
 d94:	7f 92       	push	r7
 d96:	8f 92       	push	r8
 d98:	9f 92       	push	r9
 d9a:	af 92       	push	r10
 d9c:	bf 92       	push	r11
 d9e:	cf 92       	push	r12
 da0:	df 92       	push	r13
 da2:	ef 92       	push	r14
 da4:	ff 92       	push	r15
 da6:	0f 93       	push	r16
 da8:	1f 93       	push	r17
 daa:	cf 93       	push	r28
 dac:	df 93       	push	r29
 dae:	cd b7       	in	r28, 0x3d	; 61
 db0:	de b7       	in	r29, 0x3e	; 62
 db2:	ca 1b       	sub	r28, r26
 db4:	db 0b       	sbc	r29, r27
 db6:	0f b6       	in	r0, 0x3f	; 63
 db8:	f8 94       	cli
 dba:	de bf       	out	0x3e, r29	; 62
 dbc:	0f be       	out	0x3f, r0	; 63
 dbe:	cd bf       	out	0x3d, r28	; 61
 dc0:	09 94       	ijmp

00000dc2 <__epilogue_restores__>:
 dc2:	2a 88       	ldd	r2, Y+18	; 0x12
 dc4:	39 88       	ldd	r3, Y+17	; 0x11
 dc6:	48 88       	ldd	r4, Y+16	; 0x10
 dc8:	5f 84       	ldd	r5, Y+15	; 0x0f
 dca:	6e 84       	ldd	r6, Y+14	; 0x0e
 dcc:	7d 84       	ldd	r7, Y+13	; 0x0d
 dce:	8c 84       	ldd	r8, Y+12	; 0x0c
 dd0:	9b 84       	ldd	r9, Y+11	; 0x0b
 dd2:	aa 84       	ldd	r10, Y+10	; 0x0a
 dd4:	b9 84       	ldd	r11, Y+9	; 0x09
 dd6:	c8 84       	ldd	r12, Y+8	; 0x08
 dd8:	df 80       	ldd	r13, Y+7	; 0x07
 dda:	ee 80       	ldd	r14, Y+6	; 0x06
 ddc:	fd 80       	ldd	r15, Y+5	; 0x05
 dde:	0c 81       	ldd	r16, Y+4	; 0x04
 de0:	1b 81       	ldd	r17, Y+3	; 0x03
 de2:	aa 81       	ldd	r26, Y+2	; 0x02
 de4:	b9 81       	ldd	r27, Y+1	; 0x01
 de6:	ce 0f       	add	r28, r30
 de8:	d1 1d       	adc	r29, r1
 dea:	0f b6       	in	r0, 0x3f	; 63
 dec:	f8 94       	cli
 dee:	de bf       	out	0x3e, r29	; 62
 df0:	0f be       	out	0x3f, r0	; 63
 df2:	cd bf       	out	0x3d, r28	; 61
 df4:	ed 01       	movw	r28, r26
 df6:	08 95       	ret

00000df8 <_exit>:
 df8:	f8 94       	cli

00000dfa <__stop_program>:
 dfa:	ff cf       	rjmp	.-2      	; 0xdfa <__stop_program>
