
EV_DAQ_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00000e0a  00000e9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000048b  00800142  00800142  00000ee0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ae  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ae  00000000  00000000  000027b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000819  00000000  00000000  00003160  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  0000397c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000583  00000000  00000000  00003d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ee5  00000000  00000000  000042c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000051ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e0       	ldi	r30, 0x0A	; 10
  c8:	fe e0       	ldi	r31, 0x0E	; 14
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a2 34       	cpi	r26, 0x42	; 66
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	25 e0       	ldi	r18, 0x05	; 5
  d8:	a2 e4       	ldi	r26, 0x42	; 66
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ad 3c       	cpi	r26, 0xCD	; 205
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <main>
  ea:	0c 94 03 07 	jmp	0xe06	; 0xe06 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <adc_init>:
* @param[in] adc_div          ADC prescalar (clock divider)
* @param[in] adc_ref          ADC reference selection
* @return void
*/
void adc_init(uint8_t adc_dig_disable, uint8_t adc_div, uint8_t adc_ref) {
    DIDR0 = adc_dig_disable;    // Disable digital input buffer (saves power and causes PIN to always read 0)         
  f2:	80 93 7e 00 	sts	0x007E, r24
    ADMUX |= (adc_ref & 0b11000000);    // Set analog reference source
  f6:	ec e7       	ldi	r30, 0x7C	; 124
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	40 7c       	andi	r20, 0xC0	; 192
  fe:	48 2b       	or	r20, r24
 100:	40 83       	st	Z, r20
    ADCSRA = ((1<<ADEN) | (adc_div & 0b00000111));   // Enable ADC and set proper prescale
 102:	67 70       	andi	r22, 0x07	; 7
 104:	60 68       	ori	r22, 0x80	; 128
 106:	60 93 7a 00 	sts	0x007A, r22
 10a:	08 95       	ret

0000010c <adc_read_one>:
*/
uint16_t adc_read_one(uint8_t adc_mux) {
    uint16_t adc_val = 0;
    static uint8_t adc_last_adcmux;     // Holds adc_mux value from previous function call
    
    if(adc_last_adcmux != adc_mux) {    // Check if sequential function calls use same ADC channel
 10c:	88 23       	and	r24, r24
 10e:	81 f0       	breq	.+32     	; 0x130 <adc_read_one+0x24>
        ADMUX |= adc_mux;    // Set new ADMUX value
 110:	ec e7       	ldi	r30, 0x7C	; 124
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	90 81       	ld	r25, Z
 116:	89 2b       	or	r24, r25
 118:	80 83       	st	Z, r24
 11a:	93 e0       	ldi	r25, 0x03	; 3
        for(uint8_t i=0; i < ADC_BAD_CONVERSIONS; i++) {
            /* Throw out first few conversions */
            ADCSRA |= (1<<ADSC);    // start ADC conversion.
 11c:	ea e7       	ldi	r30, 0x7A	; 122
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 64       	ori	r24, 0x40	; 64
 124:	80 83       	st	Z, r24
            while(ADCSRA & (1<<ADSC)); // wait for conversion complete
 126:	80 81       	ld	r24, Z
 128:	86 fd       	sbrc	r24, 6
 12a:	fd cf       	rjmp	.-6      	; 0x126 <adc_read_one+0x1a>
 12c:	91 50       	subi	r25, 0x01	; 1
    uint16_t adc_val = 0;
    static uint8_t adc_last_adcmux;     // Holds adc_mux value from previous function call
    
    if(adc_last_adcmux != adc_mux) {    // Check if sequential function calls use same ADC channel
        ADMUX |= adc_mux;    // Set new ADMUX value
        for(uint8_t i=0; i < ADC_BAD_CONVERSIONS; i++) {
 12e:	c1 f7       	brne	.-16     	; 0x120 <adc_read_one+0x14>
            ADCSRA |= (1<<ADSC);    // start ADC conversion.
            while(ADCSRA & (1<<ADSC)); // wait for conversion complete
        }
    }
    
    ADCSRA |= (1<<ADSC);   // Start ADC conversion
 130:	ea e7       	ldi	r30, 0x7A	; 122
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 64       	ori	r24, 0x40	; 64
 138:	80 83       	st	Z, r24
    while(ADCSRA & (1<<ADSC));  // Wait until conversion is complete (13 adc clock cycles)
 13a:	80 81       	ld	r24, Z
 13c:	86 fd       	sbrc	r24, 6
 13e:	fd cf       	rjmp	.-6      	; 0x13a <adc_read_one+0x2e>
    adc_val = ADC;         // Read & store adc result
 140:	80 91 78 00 	lds	r24, 0x0078
 144:	90 91 79 00 	lds	r25, 0x0079
    
    return(adc_val);
}
 148:	08 95       	ret

0000014a <adc_read>:
* @param[in] adc_mux    ADC channel to read
* @param[in] *adc_val   Pointer to location to store data read from ADC
* @param[in] *adc_val_len   Length of adc_val (number of reads to perform)
* @return void
*/
void adc_read(uint8_t adc_mux, uint16_t *adc_val, uint16_t adc_val_len) {
 14a:	df 92       	push	r13
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
    for(uint16_t i=0; i < adc_val_len; i++) {
 158:	41 15       	cp	r20, r1
 15a:	51 05       	cpc	r21, r1
 15c:	89 f0       	breq	.+34     	; 0x180 <adc_read+0x36>
 15e:	7a 01       	movw	r14, r20
 160:	d8 2e       	mov	r13, r24
 162:	06 2f       	mov	r16, r22
 164:	17 2f       	mov	r17, r23
 166:	c0 e0       	ldi	r28, 0x00	; 0
 168:	d0 e0       	ldi	r29, 0x00	; 0
        adc_val[i] = adc_read_one(adc_mux);
 16a:	8d 2d       	mov	r24, r13
 16c:	0e 94 86 00 	call	0x10c	; 0x10c <adc_read_one>
 170:	f8 01       	movw	r30, r16
 172:	81 93       	st	Z+, r24
 174:	91 93       	st	Z+, r25
 176:	8f 01       	movw	r16, r30
* @param[in] *adc_val   Pointer to location to store data read from ADC
* @param[in] *adc_val_len   Length of adc_val (number of reads to perform)
* @return void
*/
void adc_read(uint8_t adc_mux, uint16_t *adc_val, uint16_t adc_val_len) {
    for(uint16_t i=0; i < adc_val_len; i++) {
 178:	21 96       	adiw	r28, 0x01	; 1
 17a:	ce 15       	cp	r28, r14
 17c:	df 05       	cpc	r29, r15
 17e:	a9 f7       	brne	.-22     	; 0x16a <adc_read+0x20>
        adc_val[i] = adc_read_one(adc_mux);
    }
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	ff 90       	pop	r15
 18a:	ef 90       	pop	r14
 18c:	df 90       	pop	r13
 18e:	08 95       	ret

00000190 <data_insertion_sort_uint16>:
* @brief Insertion sort for uint16 array where max length is 65535 (2^16-1)
* @param[in] uint16_t *data     Pointer to array that contains data to average
* @param[in] uint16_t data_len  Length of data array
* @return void
*/
void data_insertion_sort_uint16(uint16_t *data, uint16_t data_len) {
 190:	8f 92       	push	r8
 192:	9f 92       	push	r9
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
    uint16_t i = 0;
    int32_t j = 0;
    uint16_t temp = 0;

    for(i=1; i < data_len; i++) {
 1a8:	62 30       	cpi	r22, 0x02	; 2
 1aa:	71 05       	cpc	r23, r1
 1ac:	b8 f1       	brcs	.+110    	; 0x21c <data_insertion_sort_uint16+0x8c>
 1ae:	8c 01       	movw	r16, r24
 1b0:	0e 5f       	subi	r16, 0xFE	; 254
 1b2:	1f 4f       	sbci	r17, 0xFF	; 255
 1b4:	ec 01       	movw	r28, r24
 1b6:	81 2c       	mov	r8, r1
 1b8:	91 2c       	mov	r9, r1
 1ba:	54 01       	movw	r10, r8
        temp = data[i];
 1bc:	f8 01       	movw	r30, r16
 1be:	41 91       	ld	r20, Z+
 1c0:	51 91       	ld	r21, Z+
 1c2:	8f 01       	movw	r16, r30
        j = i - 1;
 1c4:	75 01       	movw	r14, r10
 1c6:	64 01       	movw	r12, r8
        while((temp < data[j]) && (j >= 0)) {
 1c8:	28 81       	ld	r18, Y
 1ca:	39 81       	ldd	r19, Y+1	; 0x01
 1cc:	42 17       	cp	r20, r18
 1ce:	53 07       	cpc	r21, r19
 1d0:	78 f4       	brcc	.+30     	; 0x1f0 <data_insertion_sort_uint16+0x60>
 1d2:	de 01       	movw	r26, r28
            data[j+1] = data[j];
 1d4:	32 93       	st	-Z, r19
 1d6:	22 93       	st	-Z, r18
            j = j - 1;
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	c2 1a       	sub	r12, r18
 1dc:	d1 08       	sbc	r13, r1
 1de:	e1 08       	sbc	r14, r1
 1e0:	f1 08       	sbc	r15, r1
    uint16_t temp = 0;

    for(i=1; i < data_len; i++) {
        temp = data[i];
        j = i - 1;
        while((temp < data[j]) && (j >= 0)) {
 1e2:	3e 91       	ld	r19, -X
 1e4:	2e 91       	ld	r18, -X
 1e6:	42 17       	cp	r20, r18
 1e8:	53 07       	cpc	r21, r19
 1ea:	10 f4       	brcc	.+4      	; 0x1f0 <data_insertion_sort_uint16+0x60>
 1ec:	ff 20       	and	r15, r15
 1ee:	94 f7       	brge	.-28     	; 0x1d4 <data_insertion_sort_uint16+0x44>
            data[j+1] = data[j];
            j = j - 1;
        }
        data[j+1] = temp;
 1f0:	ef ef       	ldi	r30, 0xFF	; 255
 1f2:	ce 1a       	sub	r12, r30
 1f4:	de 0a       	sbc	r13, r30
 1f6:	cc 0c       	add	r12, r12
 1f8:	dd 1c       	adc	r13, r13
 1fa:	fc 01       	movw	r30, r24
 1fc:	ec 0d       	add	r30, r12
 1fe:	fd 1d       	adc	r31, r13
 200:	51 83       	std	Z+1, r21	; 0x01
 202:	40 83       	st	Z, r20
 204:	22 96       	adiw	r28, 0x02	; 2
 206:	ff ef       	ldi	r31, 0xFF	; 255
 208:	8f 1a       	sub	r8, r31
 20a:	9f 0a       	sbc	r9, r31
 20c:	af 0a       	sbc	r10, r31
 20e:	bf 0a       	sbc	r11, r31
 210:	94 01       	movw	r18, r8
 212:	2f 5f       	subi	r18, 0xFF	; 255
 214:	3f 4f       	sbci	r19, 0xFF	; 255
void data_insertion_sort_uint16(uint16_t *data, uint16_t data_len) {
    uint16_t i = 0;
    int32_t j = 0;
    uint16_t temp = 0;

    for(i=1; i < data_len; i++) {
 216:	26 17       	cp	r18, r22
 218:	37 07       	cpc	r19, r23
 21a:	80 f2       	brcs	.-96     	; 0x1bc <data_insertion_sort_uint16+0x2c>
            data[j+1] = data[j];
            j = j - 1;
        }
        data[j+1] = temp;
    }
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	ff 90       	pop	r15
 226:	ef 90       	pop	r14
 228:	df 90       	pop	r13
 22a:	cf 90       	pop	r12
 22c:	bf 90       	pop	r11
 22e:	af 90       	pop	r10
 230:	9f 90       	pop	r9
 232:	8f 90       	pop	r8
 234:	08 95       	ret

00000236 <data_2n_average_uint16>:
* @brief Average a uint16 array of 2^n length where max length is 65535 (2^16-1)
* @param[in] uint16_t *data     Pointer to array that contains data to average
* @param[in] uint16_t data_len  Length of data array
* @return uint16_t   Data average over entire array length. Returns 0xFFFF if array is not power of 2. 
*/
uint16_t data_2n_average_uint16(uint16_t *data, uint16_t data_len) {
 236:	db 01       	movw	r26, r22
    uint16_t pow2_val = 1;              // Power of two to check length of array and calculate dividing factor
    uint8_t pow2_div = 0;               // Power of two divider
    uint16_t pow2_max_val = 0xFFFF;     // Maximum value for an 16-bit unsigned integer
    
    /* Check to see how long it is */
    if(data_len <= 1) { 
 238:	62 30       	cpi	r22, 0x02	; 2
 23a:	71 05       	cpc	r23, r1
 23c:	30 f0       	brcs	.+12     	; 0x24a <data_2n_average_uint16+0x14>
        return(data[0]); // Break from function if not more than one data point 
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
 23e:	10 97       	sbiw	r26, 0x00	; 0
 240:	41 f4       	brne	.+16     	; 0x252 <data_2n_average_uint16+0x1c>
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	ba 01       	movw	r22, r20
 248:	2c c0       	rjmp	.+88     	; 0x2a2 <data_2n_average_uint16+0x6c>
    uint8_t pow2_div = 0;               // Power of two divider
    uint16_t pow2_max_val = 0xFFFF;     // Maximum value for an 16-bit unsigned integer
    
    /* Check to see how long it is */
    if(data_len <= 1) { 
        return(data[0]); // Break from function if not more than one data point 
 24a:	fc 01       	movw	r30, r24
 24c:	80 81       	ld	r24, Z
 24e:	91 81       	ldd	r25, Z+1	; 0x01
 250:	08 95       	ret
 252:	fc 01       	movw	r30, r24
 254:	9b 01       	movw	r18, r22
 256:	22 0f       	add	r18, r18
 258:	33 1f       	adc	r19, r19
 25a:	82 0f       	add	r24, r18
 25c:	93 1f       	adc	r25, r19
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	ba 01       	movw	r22, r20
        avg_acc += data[i];
 264:	21 91       	ld	r18, Z+
 266:	31 91       	ld	r19, Z+
 268:	42 0f       	add	r20, r18
 26a:	53 1f       	adc	r21, r19
 26c:	61 1d       	adc	r22, r1
 26e:	71 1d       	adc	r23, r1
    if(data_len <= 1) { 
        return(data[0]); // Break from function if not more than one data point 
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
 270:	e8 17       	cp	r30, r24
 272:	f9 07       	cpc	r31, r25
 274:	b9 f7       	brne	.-18     	; 0x264 <data_2n_average_uint16+0x2e>
 276:	15 c0       	rjmp	.+42     	; 0x2a2 <data_2n_average_uint16+0x6c>
        avg_acc += data[i];
    }
    
    /* Find power2_div where 2^power2_div is length of array */
    while((pow2_val < data_len) && (pow2_val <= pow2_max_val)) {
        pow2_val *= 2;  // Increment pow2_val by next power of 2
 278:	22 0f       	add	r18, r18
 27a:	33 1f       	adc	r19, r19
        pow2_div++;     // Increment divider by one
 27c:	8f 5f       	subi	r24, 0xFF	; 255
    for(uint16_t i = 0; i < data_len; i++) {
        avg_acc += data[i];
    }
    
    /* Find power2_div where 2^power2_div is length of array */
    while((pow2_val < data_len) && (pow2_val <= pow2_max_val)) {
 27e:	2a 17       	cp	r18, r26
 280:	3b 07       	cpc	r19, r27
 282:	d0 f3       	brcs	.-12     	; 0x278 <data_2n_average_uint16+0x42>
        pow2_val *= 2;  // Increment pow2_val by next power of 2
        pow2_div++;     // Increment divider by one
    }
    
    /* Break from function and return 0xFFFF if array is actually not a power of 2 */
    if(pow2_val != data_len) {
 284:	2a 17       	cp	r18, r26
 286:	3b 07       	cpc	r19, r27
 288:	49 f4       	brne	.+18     	; 0x29c <data_2n_average_uint16+0x66>
        return(0xFFFF);
    }

    /* Average and return accumulated value */
    return((uint16_t)(avg_acc >> pow2_div));
 28a:	04 c0       	rjmp	.+8      	; 0x294 <data_2n_average_uint16+0x5e>
 28c:	76 95       	lsr	r23
 28e:	67 95       	ror	r22
 290:	57 95       	ror	r21
 292:	47 95       	ror	r20
 294:	8a 95       	dec	r24
 296:	d2 f7       	brpl	.-12     	; 0x28c <data_2n_average_uint16+0x56>
 298:	ca 01       	movw	r24, r20
 29a:	08 95       	ret
        pow2_div++;     // Increment divider by one
    }
    
    /* Break from function and return 0xFFFF if array is actually not a power of 2 */
    if(pow2_val != data_len) {
        return(0xFFFF);
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	9f ef       	ldi	r25, 0xFF	; 255
 2a0:	08 95       	ret
    if(data_len <= 1) { 
        return(data[0]); // Break from function if not more than one data point 
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	e7 cf       	rjmp	.-50     	; 0x278 <data_2n_average_uint16+0x42>

000002aa <data_trim_uint16>:
* @param[in] uint16_t trim_val      Amount to trim from both sides of array (ex. 2 will eliminate data_from[0, 1] and data_to[n, n-1])
* @return void
*/
// TODO: test this function. trim_val in the for loop may need to be altered
void data_trim_uint16(uint16_t *data_from, uint16_t *data_to, uint16_t raw_len, uint16_t trim_val) {
    for(uint16_t i=trim_val; i < (raw_len - trim_val); i++) {
 2aa:	42 1b       	sub	r20, r18
 2ac:	53 0b       	sbc	r21, r19
 2ae:	24 17       	cp	r18, r20
 2b0:	35 07       	cpc	r19, r21
 2b2:	98 f4       	brcc	.+38     	; 0x2da <data_trim_uint16+0x30>
 2b4:	22 0f       	add	r18, r18
 2b6:	33 1f       	adc	r19, r19
 2b8:	fc 01       	movw	r30, r24
 2ba:	e2 0f       	add	r30, r18
 2bc:	f3 1f       	adc	r31, r19
 2be:	db 01       	movw	r26, r22
 2c0:	a2 0f       	add	r26, r18
 2c2:	b3 1f       	adc	r27, r19
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	84 0f       	add	r24, r20
 2ca:	95 1f       	adc	r25, r21
        data_to[i] = data_from[i];
 2cc:	21 91       	ld	r18, Z+
 2ce:	31 91       	ld	r19, Z+
 2d0:	2d 93       	st	X+, r18
 2d2:	3d 93       	st	X+, r19
* @param[in] uint16_t trim_val      Amount to trim from both sides of array (ex. 2 will eliminate data_from[0, 1] and data_to[n, n-1])
* @return void
*/
// TODO: test this function. trim_val in the for loop may need to be altered
void data_trim_uint16(uint16_t *data_from, uint16_t *data_to, uint16_t raw_len, uint16_t trim_val) {
    for(uint16_t i=trim_val; i < (raw_len - trim_val); i++) {
 2d4:	e8 17       	cp	r30, r24
 2d6:	f9 07       	cpc	r31, r25
 2d8:	c9 f7       	brne	.-14     	; 0x2cc <data_trim_uint16+0x22>
 2da:	08 95       	ret

000002dc <gpio_init>:
* @brief Initialize GPIO for EV DAQ UNIT project
* @return void
*/
void gpio_init(void) {
    /* Setup Switches */
    clrbits(SW_DDR, ((1<<SW1)|(1<<SW2))); // Set switches to input
 2dc:	84 b1       	in	r24, 0x04	; 4
 2de:	8c 7f       	andi	r24, 0xFC	; 252
 2e0:	84 b9       	out	0x04, r24	; 4
    sbits(SW_PORT, ((1<<SW1)|(1<<SW2)));  // Turn on pullups on switches
 2e2:	85 b1       	in	r24, 0x05	; 5
 2e4:	83 60       	ori	r24, 0x03	; 3
 2e6:	85 b9       	out	0x05, r24	; 5
    
    /* Setup LEDs */
    sbits(LED_DDR, ((1<<LED_RED)|(1<<LED_YLW)));  // LEDs as output
 2e8:	8a b1       	in	r24, 0x0a	; 10
 2ea:	80 6c       	ori	r24, 0xC0	; 192
 2ec:	8a b9       	out	0x0a, r24	; 10
    
    /* Setup LCD /RST */
    sbit(LCD_RST_DDR, LCD_RST);     // Set LCD_RST to output
 2ee:	22 9a       	sbi	0x04, 2	; 4
    sbit(LCD_RST_PORT, LCD_RST);    // Drive LCD_RST high    
 2f0:	2a 9a       	sbi	0x05, 2	; 5
 2f2:	08 95       	ret

000002f4 <i2c1_init>:
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return uint8_t   Division factor
*/
uint8_t i2c_calc_br_div(uint32_t cpu_freq, uint32_t i2c_freq) {
    return((uint8_t)(((cpu_freq/i2c_freq) - 16)>>1));
 2f4:	0e 94 09 04 	call	0x812	; 0x812 <__udivmodsi4>
 2f8:	da 01       	movw	r26, r20
 2fa:	c9 01       	movw	r24, r18
 2fc:	40 97       	sbiw	r24, 0x10	; 16
 2fe:	a1 09       	sbc	r26, r1
 300:	b1 09       	sbc	r27, r1
 302:	b6 95       	lsr	r27
 304:	a7 95       	ror	r26
 306:	97 95       	ror	r25
 308:	87 95       	ror	r24
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return void
*/
void i2c1_init(uint32_t cpu_freq, uint32_t i2c_freq) {
    TWBR1 = i2c_calc_br_div(cpu_freq, i2c_freq);   // Set I2C SCL to correct value
 30a:	80 93 d8 00 	sts	0x00D8, r24
    TWCR1 |= (1<<TWIE); // Enable TWI interrupt
 30e:	ec ed       	ldi	r30, 0xDC	; 220
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	81 60       	ori	r24, 0x01	; 1
 316:	80 83       	st	Z, r24
 318:	08 95       	ret

0000031a <i2c1_tx>:
* @brief Start I2C master tx event
* @param[in] i2c_event   Type of I2C event
* @return uint8_t I2C status register
*/
uint8_t i2c1_tx(uint8_t i2c_event) {
    switch(i2c_event) {
 31a:	81 30       	cpi	r24, 0x01	; 1
 31c:	69 f0       	breq	.+26     	; 0x338 <i2c1_tx+0x1e>
 31e:	18 f0       	brcs	.+6      	; 0x326 <i2c1_tx+0xc>
 320:	82 30       	cpi	r24, 0x02	; 2
 322:	99 f0       	breq	.+38     	; 0x34a <i2c1_tx+0x30>
 324:	1a c0       	rjmp	.+52     	; 0x35a <i2c1_tx+0x40>
        case I2C_START:
            TWCR1 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);    // Tx start condition
 326:	84 ea       	ldi	r24, 0xA4	; 164
 328:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWINT))); // Wait for current request to process            
 32c:	ec ed       	ldi	r30, 0xDC	; 220
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	88 23       	and	r24, r24
 334:	ec f7       	brge	.-6      	; 0x330 <i2c1_tx+0x16>
 336:	11 c0       	rjmp	.+34     	; 0x35a <i2c1_tx+0x40>
            break;
        case I2C_DATA:
            TWCR1 = (1<<TWINT) | (1<<TWEN);                 // Tx data
 338:	84 e8       	ldi	r24, 0x84	; 132
 33a:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWINT))); // Wait for current request to process
 33e:	ec ed       	ldi	r30, 0xDC	; 220
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	88 23       	and	r24, r24
 346:	ec f7       	brge	.-6      	; 0x342 <i2c1_tx+0x28>
 348:	08 c0       	rjmp	.+16     	; 0x35a <i2c1_tx+0x40>
            break;
        case I2C_STOP:
            TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);    // Tx stop condition
 34a:	84 e9       	ldi	r24, 0x94	; 148
 34c:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWSTO))); // Wait for current request to process
 350:	ec ed       	ldi	r30, 0xDC	; 220
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	84 ff       	sbrs	r24, 4
 358:	fd cf       	rjmp	.-6      	; 0x354 <i2c1_tx+0x3a>
            break;
    }
    return(TWSR1 & I2C_STATUS_REG_MASK);     // Return only status bits in status reg
 35a:	80 91 d9 00 	lds	r24, 0x00D9
}
 35e:	88 7f       	andi	r24, 0xF8	; 248
 360:	08 95       	ret

00000362 <lcd_write>:
* @param uint8_t cmd_data       0 to send command, others to send data
* @param uint8_t *data          Pointer to data array to send.
* @param uint16_t num_bytes     Length of data to send.
* @return void
*/
void lcd_write(uint8_t cmd_data, uint8_t *data, uint16_t num_bytes) {
 362:	ef 92       	push	r14
 364:	ff 92       	push	r15
 366:	0f 93       	push	r16
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	c8 2f       	mov	r28, r24
 370:	7b 01       	movw	r14, r22
 372:	8a 01       	movw	r16, r20
    i2c1_tx(I2C_START);     // Send start condition
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c1_tx>
    TWDR1 = LCD_I2C_ADDR;   // Set Slave Addr
 37a:	8c e7       	ldi	r24, 0x7C	; 124
 37c:	80 93 db 00 	sts	0x00DB, r24
    i2c1_tx(I2C_DATA);      // Send Slave Addr
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c1_tx>
    
    if(cmd_data == LCD_CMD) {
 386:	c1 11       	cpse	r28, r1
 388:	06 c0       	rjmp	.+12     	; 0x396 <lcd_write+0x34>
        TWDR1 = LCD_CMD;    // Load "Command" byte for LCD
 38a:	10 92 db 00 	sts	0x00DB, r1
        i2c1_tx(I2C_DATA);  // Send "Command" byte
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c1_tx>
 394:	06 c0       	rjmp	.+12     	; 0x3a2 <lcd_write+0x40>
    } else {
        TWDR1 = LCD_DATA;   // Load "Data" byte for LCD
 396:	80 e4       	ldi	r24, 0x40	; 64
 398:	80 93 db 00 	sts	0x00DB, r24
        i2c1_tx(I2C_DATA);  // Send "Data" byte
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c1_tx>
    }
    
    for(uint16_t i=0; i<num_bytes; i++) {   // Send bytes
 3a2:	01 15       	cp	r16, r1
 3a4:	11 05       	cpc	r17, r1
 3a6:	89 f0       	breq	.+34     	; 0x3ca <lcd_write+0x68>
 3a8:	e7 01       	movw	r28, r14
 3aa:	0e 0d       	add	r16, r14
 3ac:	1f 1d       	adc	r17, r15
        TWDR1 = data[i];
 3ae:	0f 2e       	mov	r0, r31
 3b0:	fb ed       	ldi	r31, 0xDB	; 219
 3b2:	ef 2e       	mov	r14, r31
 3b4:	f1 2c       	mov	r15, r1
 3b6:	f0 2d       	mov	r31, r0
 3b8:	89 91       	ld	r24, Y+
 3ba:	f7 01       	movw	r30, r14
 3bc:	80 83       	st	Z, r24
        i2c1_tx(I2C_DATA);
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c1_tx>
    } else {
        TWDR1 = LCD_DATA;   // Load "Data" byte for LCD
        i2c1_tx(I2C_DATA);  // Send "Data" byte
    }
    
    for(uint16_t i=0; i<num_bytes; i++) {   // Send bytes
 3c4:	c0 17       	cp	r28, r16
 3c6:	d1 07       	cpc	r29, r17
 3c8:	b9 f7       	brne	.-18     	; 0x3b8 <lcd_write+0x56>
        TWDR1 = data[i];
        i2c1_tx(I2C_DATA);
    }
    
    i2c1_tx(I2C_STOP);  // Send stop condition
 3ca:	82 e0       	ldi	r24, 0x02	; 2
 3cc:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c1_tx>
}
 3d0:	df 91       	pop	r29
 3d2:	cf 91       	pop	r28
 3d4:	1f 91       	pop	r17
 3d6:	0f 91       	pop	r16
 3d8:	ff 90       	pop	r15
 3da:	ef 90       	pop	r14
 3dc:	08 95       	ret

000003de <lcd_set_line1>:

/*!
* @brief Set cursor to LCD line 1
* @return void
*/
void lcd_set_line1() {
 3de:	cf 93       	push	r28
 3e0:	df 93       	push	r29
 3e2:	1f 92       	push	r1
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
    uint8_t lcd_line1[1] = {LCD_LINE1};
 3e8:	80 e8       	ldi	r24, 0x80	; 128
 3ea:	89 83       	std	Y+1, r24	; 0x01
        lcd_write(LCD_CMD, lcd_line1, 1);
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	be 01       	movw	r22, r28
 3f2:	6f 5f       	subi	r22, 0xFF	; 255
 3f4:	7f 4f       	sbci	r23, 0xFF	; 255
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
        delay(100);
 3fc:	84 e6       	ldi	r24, 0x64	; 100
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 ef 03 	call	0x7de	; 0x7de <delay>
}
 404:	0f 90       	pop	r0
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <lcd_set_line2>:

/*!
* @brief Set cursor to LCD line 2
* @return void
*/
void lcd_set_line2() {
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	1f 92       	push	r1
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
    uint8_t lcd_line2[1] = {LCD_LINE2};
 416:	80 ec       	ldi	r24, 0xC0	; 192
 418:	89 83       	std	Y+1, r24	; 0x01
    lcd_write(LCD_CMD, lcd_line2, 1);
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	50 e0       	ldi	r21, 0x00	; 0
 41e:	be 01       	movw	r22, r28
 420:	6f 5f       	subi	r22, 0xFF	; 255
 422:	7f 4f       	sbci	r23, 0xFF	; 255
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    delay(100);
 42a:	84 e6       	ldi	r24, 0x64	; 100
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 ef 03 	call	0x7de	; 0x7de <delay>
}
 432:	0f 90       	pop	r0
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	08 95       	ret

0000043a <lcd_clear>:

/*!
* @brief Clear LCD display
* @return void
*/
void lcd_clear(void) {
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	1f 92       	push	r1
 440:	cd b7       	in	r28, 0x3d	; 61
 442:	de b7       	in	r29, 0x3e	; 62
    uint8_t lcd_clear[1] = {0x01};
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	89 83       	std	Y+1, r24	; 0x01
    lcd_write(LCD_CMD, lcd_clear, 1);
 448:	41 e0       	ldi	r20, 0x01	; 1
 44a:	50 e0       	ldi	r21, 0x00	; 0
 44c:	be 01       	movw	r22, r28
 44e:	6f 5f       	subi	r22, 0xFF	; 255
 450:	7f 4f       	sbci	r23, 0xFF	; 255
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    delay(10);
 458:	8a e0       	ldi	r24, 0x0A	; 10
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 ef 03 	call	0x7de	; 0x7de <delay>
}
 460:	0f 90       	pop	r0
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <lcd_init>:

/*!
* @brief Initialize LCD
* @return void
*/
void lcd_init(void) {
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	aa 97       	sbiw	r28, 0x2a	; 42
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	f8 94       	cli
 476:	de bf       	out	0x3e, r29	; 62
 478:	0f be       	out	0x3f, r0	; 63
 47a:	cd bf       	out	0x3d, r28	; 61
    uint8_t lcd_config_1[1] = {0x38};
 47c:	88 e3       	ldi	r24, 0x38	; 56
 47e:	89 83       	std	Y+1, r24	; 0x01
    uint8_t lcd_config_2[1] = {0x39};
 480:	89 e3       	ldi	r24, 0x39	; 57
 482:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t lcd_config_3[7] = {0x14, 0x78, 0x5E, 0x6D, 0x0C, 0x01, 0x06};
 484:	87 e0       	ldi	r24, 0x07	; 7
 486:	e0 e0       	ldi	r30, 0x00	; 0
 488:	f1 e0       	ldi	r31, 0x01	; 1
 48a:	de 01       	movw	r26, r28
 48c:	13 96       	adiw	r26, 0x03	; 3
 48e:	01 90       	ld	r0, Z+
 490:	0d 92       	st	X+, r0
 492:	8a 95       	dec	r24
 494:	e1 f7       	brne	.-8      	; 0x48e <lcd_init+0x26>
    uint8_t lcd_config_4[1] = {0x70};     // Set contrast 
 496:	80 e7       	ldi	r24, 0x70	; 112
 498:	8a 87       	std	Y+10, r24	; 0x0a
                                
    uint8_t lcd_init_str1[16] = "EV DAQ UNIT v0.1";
 49a:	80 e1       	ldi	r24, 0x10	; 16
 49c:	e7 e0       	ldi	r30, 0x07	; 7
 49e:	f1 e0       	ldi	r31, 0x01	; 1
 4a0:	de 01       	movw	r26, r28
 4a2:	1b 96       	adiw	r26, 0x0b	; 11
 4a4:	01 90       	ld	r0, Z+
 4a6:	0d 92       	st	X+, r0
 4a8:	8a 95       	dec	r24
 4aa:	e1 f7       	brne	.-8      	; 0x4a4 <lcd_init+0x3c>
    uint8_t lcd_init_str2[16] = "github.com/jfri2";
 4ac:	80 e1       	ldi	r24, 0x10	; 16
 4ae:	e8 e1       	ldi	r30, 0x18	; 24
 4b0:	f1 e0       	ldi	r31, 0x01	; 1
 4b2:	de 01       	movw	r26, r28
 4b4:	5b 96       	adiw	r26, 0x1b	; 27
 4b6:	01 90       	ld	r0, Z+
 4b8:	0d 92       	st	X+, r0
 4ba:	8a 95       	dec	r24
 4bc:	e1 f7       	brne	.-8      	; 0x4b6 <lcd_init+0x4e>
    
    /* Reset LCD */
    clrbit(LCD_RST_PORT, LCD_RST);
 4be:	2a 98       	cbi	0x05, 2	; 5
    delay(10);
 4c0:	8a e0       	ldi	r24, 0x0A	; 10
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 ef 03 	call	0x7de	; 0x7de <delay>
    sbit(LCD_RST_PORT, LCD_RST);
 4c8:	2a 9a       	sbi	0x05, 2	; 5
    delay(10);
 4ca:	8a e0       	ldi	r24, 0x0A	; 10
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 ef 03 	call	0x7de	; 0x7de <delay>
    
    /* Write Configuration to LCD */
    lcd_write(LCD_CMD, lcd_config_1, 1);
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	50 e0       	ldi	r21, 0x00	; 0
 4d6:	be 01       	movw	r22, r28
 4d8:	6f 5f       	subi	r22, 0xFF	; 255
 4da:	7f 4f       	sbci	r23, 0xFF	; 255
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    delay(10);
 4e2:	8a e0       	ldi	r24, 0x0A	; 10
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 ef 03 	call	0x7de	; 0x7de <delay>
    lcd_write(LCD_CMD, lcd_config_2, 1);
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	be 01       	movw	r22, r28
 4f0:	6e 5f       	subi	r22, 0xFE	; 254
 4f2:	7f 4f       	sbci	r23, 0xFF	; 255
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    delay(10);
 4fa:	8a e0       	ldi	r24, 0x0A	; 10
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 ef 03 	call	0x7de	; 0x7de <delay>
    lcd_write(LCD_CMD, lcd_config_3, 7);
 502:	47 e0       	ldi	r20, 0x07	; 7
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	be 01       	movw	r22, r28
 508:	6d 5f       	subi	r22, 0xFD	; 253
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    delay(10);
 512:	8a e0       	ldi	r24, 0x0A	; 10
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 ef 03 	call	0x7de	; 0x7de <delay>
    lcd_write(LCD_CMD, lcd_config_4, 1);
 51a:	41 e0       	ldi	r20, 0x01	; 1
 51c:	50 e0       	ldi	r21, 0x00	; 0
 51e:	be 01       	movw	r22, r28
 520:	66 5f       	subi	r22, 0xF6	; 246
 522:	7f 4f       	sbci	r23, 0xFF	; 255
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    delay(10);    
 52a:	8a e0       	ldi	r24, 0x0A	; 10
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 ef 03 	call	0x7de	; 0x7de <delay>
    
    /* Display Initial Message */
    //lcd_set_line1();
    lcd_write(LCD_DATA, lcd_init_str1, 16);
 532:	40 e1       	ldi	r20, 0x10	; 16
 534:	50 e0       	ldi	r21, 0x00	; 0
 536:	be 01       	movw	r22, r28
 538:	65 5f       	subi	r22, 0xF5	; 245
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	80 e4       	ldi	r24, 0x40	; 64
 53e:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    lcd_set_line2();
 542:	0e 94 06 02 	call	0x40c	; 0x40c <lcd_set_line2>
    lcd_write(LCD_DATA, lcd_init_str2, 16);
 546:	40 e1       	ldi	r20, 0x10	; 16
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	be 01       	movw	r22, r28
 54c:	65 5e       	subi	r22, 0xE5	; 229
 54e:	7f 4f       	sbci	r23, 0xFF	; 255
 550:	80 e4       	ldi	r24, 0x40	; 64
 552:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
}
 556:	aa 96       	adiw	r28, 0x2a	; 42
 558:	0f b6       	in	r0, 0x3f	; 63
 55a:	f8 94       	cli
 55c:	de bf       	out	0x3e, r29	; 62
 55e:	0f be       	out	0x3f, r0	; 63
 560:	cd bf       	out	0x3d, r28	; 61
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <lc_get>:
uint16_t lc_get(uint8_t lc_adc_mux) {
    // Local variables
    static uint16_t lc_raw[LC_RAW_LEN] = {0};       // Stores raw values read from ADC
    static uint16_t lc_trim[LC_TRIM_LEN] = {0};     // Stores trimmed values read from ADC
    
    adc_read(lc_adc_mux, lc_raw, LC_RAW_LEN);               // Get LC_RAW_LEN values from ADC
 568:	4c e2       	ldi	r20, 0x2C	; 44
 56a:	51 e0       	ldi	r21, 0x01	; 1
 56c:	62 e4       	ldi	r22, 0x42	; 66
 56e:	73 e0       	ldi	r23, 0x03	; 3
 570:	0e 94 a5 00 	call	0x14a	; 0x14a <adc_read>
    data_insertion_sort_uint16(lc_raw, LC_RAW_LEN);    // Sort raw values from lowest to highest
 574:	6c e2       	ldi	r22, 0x2C	; 44
 576:	71 e0       	ldi	r23, 0x01	; 1
 578:	82 e4       	ldi	r24, 0x42	; 66
 57a:	93 e0       	ldi	r25, 0x03	; 3
 57c:	0e 94 c8 00 	call	0x190	; 0x190 <data_insertion_sort_uint16>
    data_trim_uint16(lc_raw, lc_trim, LC_RAW_LEN, LC_TRIM_VAL);     // Eliminate 2 highest and 2 lowest values in array
 580:	26 e1       	ldi	r18, 0x16	; 22
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	4c e2       	ldi	r20, 0x2C	; 44
 586:	51 e0       	ldi	r21, 0x01	; 1
 588:	62 e4       	ldi	r22, 0x42	; 66
 58a:	71 e0       	ldi	r23, 0x01	; 1
 58c:	82 e4       	ldi	r24, 0x42	; 66
 58e:	93 e0       	ldi	r25, 0x03	; 3
 590:	0e 94 55 01 	call	0x2aa	; 0x2aa <data_trim_uint16>
    return(data_2n_average_uint16(lc_trim, LC_TRIM_LEN));      // Average and return array
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	71 e0       	ldi	r23, 0x01	; 1
 598:	82 e4       	ldi	r24, 0x42	; 66
 59a:	91 e0       	ldi	r25, 0x01	; 1
 59c:	0e 94 1b 01 	call	0x236	; 0x236 <data_2n_average_uint16>
}
 5a0:	08 95       	ret

000005a2 <main>:
volatile uint16_t adc_ms = 0;
uint8_t time_str[16];

int main(void) {
    /* Initialization Routines */
    sei();
 5a2:	78 94       	sei
    timer1_1ms_init();
 5a4:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <timer1_1ms_init>
    gpio_init();
 5a8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <gpio_init>
    adc_init(ADC_DIG_DIS_LC, ADC_DIV_128, ADC_REF_AREF);  // Currently disables all digital i/o on all ADC pins, set external 3V reference
 5ac:	40 e0       	ldi	r20, 0x00	; 0
 5ae:	67 e0       	ldi	r22, 0x07	; 7
 5b0:	8f ef       	ldi	r24, 0xFF	; 255
 5b2:	0e 94 79 00 	call	0xf2	; 0xf2 <adc_init>
    i2c1_init(F_CPU, I2C_SCL_FREQ);
 5b6:	20 ea       	ldi	r18, 0xA0	; 160
 5b8:	36 e8       	ldi	r19, 0x86	; 134
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	74 e2       	ldi	r23, 0x24	; 36
 5c2:	84 ef       	ldi	r24, 0xF4	; 244
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <i2c1_init>
    lcd_init();
 5ca:	0e 94 34 02 	call	0x468	; 0x468 <lcd_init>
    tbit(LED_PORT, LED_YLW);
 5ce:	8b b1       	in	r24, 0x0b	; 11
 5d0:	80 58       	subi	r24, 0x80	; 128
 5d2:	8b b9       	out	0x0b, r24	; 11

    while(1) {
        // Status LED blink
        delay(500);
        tbits(LED_PORT, ((1<<LED_YLW)|(1<<LED_RED)));     
 5d4:	0f 2e       	mov	r0, r31
 5d6:	f0 ec       	ldi	r31, 0xC0	; 192
 5d8:	bf 2e       	mov	r11, r31
 5da:	f0 2d       	mov	r31, r0
            adc_val = lc_get(ADC_MUX_ADC7);    // Read 40 Hz output from analog front end
            //adc_val = adc_read_one(ADC_MUX_ADC7);
            adc_ms = ((uint16_t)(systck - systck_tmp));  // Save time (in milliseconds) it took to do A/D conversion
                    
            /* Format to ASCII strings */
            sprintf(adc_str,  "ADC:  %04d", adc_val);
 5dc:	0f 2e       	mov	r0, r31
 5de:	f9 e2       	ldi	r31, 0x29	; 41
 5e0:	cf 2e       	mov	r12, r31
 5e2:	f1 e0       	ldi	r31, 0x01	; 1
 5e4:	df 2e       	mov	r13, r31
 5e6:	f0 2d       	mov	r31, r0
 5e8:	0d eb       	ldi	r16, 0xBD	; 189
 5ea:	15 e0       	ldi	r17, 0x05	; 5
            sprintf(time_str, "Time: %04d ms", adc_ms);
 5ec:	0f 2e       	mov	r0, r31
 5ee:	f4 e3       	ldi	r31, 0x34	; 52
 5f0:	ef 2e       	mov	r14, r31
 5f2:	f1 e0       	ldi	r31, 0x01	; 1
 5f4:	ff 2e       	mov	r15, r31
 5f6:	f0 2d       	mov	r31, r0
 5f8:	cd ea       	ldi	r28, 0xAD	; 173
 5fa:	d5 e0       	ldi	r29, 0x05	; 5
    lcd_init();
    tbit(LED_PORT, LED_YLW);

    while(1) {
        // Status LED blink
        delay(500);
 5fc:	84 ef       	ldi	r24, 0xF4	; 244
 5fe:	91 e0       	ldi	r25, 0x01	; 1
 600:	0e 94 ef 03 	call	0x7de	; 0x7de <delay>
        tbits(LED_PORT, ((1<<LED_YLW)|(1<<LED_RED)));     
 604:	8b b1       	in	r24, 0x0b	; 11
 606:	8b 25       	eor	r24, r11
 608:	8b b9       	out	0x0b, r24	; 11
        
        // Blink LEDs fast while SW2 is pressed 
        while((chkbit(SW_PIN, SW2) == 0)) {
 60a:	19 99       	sbic	0x03, 1	; 3
 60c:	09 c0       	rjmp	.+18     	; 0x620 <main+0x7e>
            tbits(LED_PORT, (LED_ALL));
 60e:	8b b1       	in	r24, 0x0b	; 11
 610:	8b 25       	eor	r24, r11
 612:	8b b9       	out	0x0b, r24	; 11
            delay(100);
 614:	84 e6       	ldi	r24, 0x64	; 100
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 ef 03 	call	0x7de	; 0x7de <delay>
        // Status LED blink
        delay(500);
        tbits(LED_PORT, ((1<<LED_YLW)|(1<<LED_RED)));     
        
        // Blink LEDs fast while SW2 is pressed 
        while((chkbit(SW_PIN, SW2) == 0)) {
 61c:	19 9b       	sbis	0x03, 1	; 3
 61e:	f7 cf       	rjmp	.-18     	; 0x60e <main+0x6c>
            tbits(LED_PORT, (LED_ALL));
            delay(100);
        }
        
        // Read temperature sensor on ADC and display values on SW1 activation
        if((chkbit(SW_PIN, SW1) == 0)) {
 620:	18 99       	sbic	0x03, 0	; 3
 622:	ec cf       	rjmp	.-40     	; 0x5fc <main+0x5a>
            
            /* Get values to display on screen */
            systck_tmp = systck;   // Store current systck value
 624:	80 91 a9 05 	lds	r24, 0x05A9
 628:	90 91 aa 05 	lds	r25, 0x05AA
 62c:	a0 91 ab 05 	lds	r26, 0x05AB
 630:	b0 91 ac 05 	lds	r27, 0x05AC
 634:	80 93 9c 05 	sts	0x059C, r24
 638:	90 93 9d 05 	sts	0x059D, r25
 63c:	a0 93 9e 05 	sts	0x059E, r26
 640:	b0 93 9f 05 	sts	0x059F, r27
            adc_val = lc_get(ADC_MUX_ADC7);    // Read 40 Hz output from analog front end
 644:	87 e0       	ldi	r24, 0x07	; 7
 646:	0e 94 b4 02 	call	0x568	; 0x568 <lc_get>
 64a:	80 93 a0 05 	sts	0x05A0, r24
 64e:	90 93 a1 05 	sts	0x05A1, r25
            //adc_val = adc_read_one(ADC_MUX_ADC7);
            adc_ms = ((uint16_t)(systck - systck_tmp));  // Save time (in milliseconds) it took to do A/D conversion
 652:	40 91 a9 05 	lds	r20, 0x05A9
 656:	50 91 aa 05 	lds	r21, 0x05AA
 65a:	60 91 ab 05 	lds	r22, 0x05AB
 65e:	70 91 ac 05 	lds	r23, 0x05AC
 662:	40 90 9c 05 	lds	r4, 0x059C
 666:	50 90 9d 05 	lds	r5, 0x059D
 66a:	60 90 9e 05 	lds	r6, 0x059E
 66e:	70 90 9f 05 	lds	r7, 0x059F
 672:	44 19       	sub	r20, r4
 674:	55 09       	sbc	r21, r5
 676:	50 93 9b 05 	sts	0x059B, r21
 67a:	40 93 9a 05 	sts	0x059A, r20
                    
            /* Format to ASCII strings */
            sprintf(adc_str,  "ADC:  %04d", adc_val);
 67e:	9f 93       	push	r25
 680:	8f 93       	push	r24
 682:	df 92       	push	r13
 684:	cf 92       	push	r12
 686:	1f 93       	push	r17
 688:	0f 93       	push	r16
 68a:	0e 94 2b 04 	call	0x856	; 0x856 <sprintf>
            sprintf(time_str, "Time: %04d ms", adc_ms);
 68e:	80 91 9a 05 	lds	r24, 0x059A
 692:	90 91 9b 05 	lds	r25, 0x059B
 696:	9f 93       	push	r25
 698:	8f 93       	push	r24
 69a:	ff 92       	push	r15
 69c:	ef 92       	push	r14
 69e:	df 93       	push	r29
 6a0:	cf 93       	push	r28
 6a2:	0e 94 2b 04 	call	0x856	; 0x856 <sprintf>
                    
            /* Print ADC & time values on screen */
            lcd_clear();
 6a6:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_clear>
            lcd_set_line1();
 6aa:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_set_line1>
            lcd_write(LCD_DATA, adc_str, 16);
 6ae:	40 e1       	ldi	r20, 0x10	; 16
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	b8 01       	movw	r22, r16
 6b4:	80 e4       	ldi	r24, 0x40	; 64
 6b6:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
            lcd_set_line2();
 6ba:	0e 94 06 02 	call	0x40c	; 0x40c <lcd_set_line2>
            lcd_write(LCD_DATA, time_str, 16);
 6be:	40 e1       	ldi	r20, 0x10	; 16
 6c0:	50 e0       	ldi	r21, 0x00	; 0
 6c2:	be 01       	movw	r22, r28
 6c4:	80 e4       	ldi	r24, 0x40	; 64
 6c6:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
 6ca:	8d b7       	in	r24, 0x3d	; 61
 6cc:	9e b7       	in	r25, 0x3e	; 62
 6ce:	0c 96       	adiw	r24, 0x0c	; 12
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	f8 94       	cli
 6d4:	9e bf       	out	0x3e, r25	; 62
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	8d bf       	out	0x3d, r24	; 61
 6da:	90 cf       	rjmp	.-224    	; 0x5fc <main+0x5a>

000006dc <__vector_11>:
volatile uint8_t systime_s = 0;
volatile uint8_t systime_m = 0;
volatile uint8_t systime_h = 0;
volatile uint16_t systime_d = 0;

ISR(TIMER1_COMPA_vect) {
 6dc:	1f 92       	push	r1
 6de:	0f 92       	push	r0
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	0f 92       	push	r0
 6e4:	11 24       	eor	r1, r1
 6e6:	2f 93       	push	r18
 6e8:	8f 93       	push	r24
 6ea:	9f 93       	push	r25
 6ec:	af 93       	push	r26
 6ee:	bf 93       	push	r27
    /* Increment systck global vars to keep system time */
    systck++;
 6f0:	80 91 a9 05 	lds	r24, 0x05A9
 6f4:	90 91 aa 05 	lds	r25, 0x05AA
 6f8:	a0 91 ab 05 	lds	r26, 0x05AB
 6fc:	b0 91 ac 05 	lds	r27, 0x05AC
 700:	01 96       	adiw	r24, 0x01	; 1
 702:	a1 1d       	adc	r26, r1
 704:	b1 1d       	adc	r27, r1
 706:	80 93 a9 05 	sts	0x05A9, r24
 70a:	90 93 aa 05 	sts	0x05AA, r25
 70e:	a0 93 ab 05 	sts	0x05AB, r26
 712:	b0 93 ac 05 	sts	0x05AC, r27
    systime_ms++;
 716:	80 91 a7 05 	lds	r24, 0x05A7
 71a:	90 91 a8 05 	lds	r25, 0x05A8
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	90 93 a8 05 	sts	0x05A8, r25
 724:	80 93 a7 05 	sts	0x05A7, r24
    if(systime_ms >= 1000) {
 728:	80 91 a7 05 	lds	r24, 0x05A7
 72c:	90 91 a8 05 	lds	r25, 0x05A8
 730:	88 3e       	cpi	r24, 0xE8	; 232
 732:	93 40       	sbci	r25, 0x03	; 3
 734:	70 f1       	brcs	.+92     	; 0x792 <__vector_11+0xb6>
        systime_ms = 0;
 736:	10 92 a8 05 	sts	0x05A8, r1
 73a:	10 92 a7 05 	sts	0x05A7, r1
        systime_s++;
 73e:	80 91 a6 05 	lds	r24, 0x05A6
 742:	8f 5f       	subi	r24, 0xFF	; 255
 744:	80 93 a6 05 	sts	0x05A6, r24
        if(systime_s >= 60) {
 748:	80 91 a6 05 	lds	r24, 0x05A6
 74c:	8c 33       	cpi	r24, 0x3C	; 60
 74e:	08 f1       	brcs	.+66     	; 0x792 <__vector_11+0xb6>
            systime_s = 0;
 750:	10 92 a6 05 	sts	0x05A6, r1
            systime_m++;
 754:	80 91 a5 05 	lds	r24, 0x05A5
 758:	8f 5f       	subi	r24, 0xFF	; 255
 75a:	80 93 a5 05 	sts	0x05A5, r24
            if(systime_m >= 60) {
 75e:	80 91 a5 05 	lds	r24, 0x05A5
 762:	8c 33       	cpi	r24, 0x3C	; 60
 764:	b0 f0       	brcs	.+44     	; 0x792 <__vector_11+0xb6>
                systime_m = 0;
 766:	10 92 a5 05 	sts	0x05A5, r1
                systime_h++;
 76a:	80 91 a4 05 	lds	r24, 0x05A4
 76e:	8f 5f       	subi	r24, 0xFF	; 255
 770:	80 93 a4 05 	sts	0x05A4, r24
                if(systime_h >= 24) {
 774:	80 91 a4 05 	lds	r24, 0x05A4
 778:	88 31       	cpi	r24, 0x18	; 24
 77a:	58 f0       	brcs	.+22     	; 0x792 <__vector_11+0xb6>
                    systime_h = 0;
 77c:	10 92 a4 05 	sts	0x05A4, r1
                    systime_d++;
 780:	80 91 a2 05 	lds	r24, 0x05A2
 784:	90 91 a3 05 	lds	r25, 0x05A3
 788:	01 96       	adiw	r24, 0x01	; 1
 78a:	90 93 a3 05 	sts	0x05A3, r25
 78e:	80 93 a2 05 	sts	0x05A2, r24
                }
            }
        }        
    }
}
 792:	bf 91       	pop	r27
 794:	af 91       	pop	r26
 796:	9f 91       	pop	r25
 798:	8f 91       	pop	r24
 79a:	2f 91       	pop	r18
 79c:	0f 90       	pop	r0
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	0f 90       	pop	r0
 7a2:	1f 90       	pop	r1
 7a4:	18 95       	reti

000007a6 <timer1_1ms_init>:
/*!
* @brief Disable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_disable(void) {
    TIMSK1 &= ~(1<<OCIE1A); // Disable Output compare Interrupt on Match A
 7a6:	af e6       	ldi	r26, 0x6F	; 111
 7a8:	b0 e0       	ldi	r27, 0x00	; 0
 7aa:	8c 91       	ld	r24, X
 7ac:	8d 7f       	andi	r24, 0xFD	; 253
 7ae:	8c 93       	st	X, r24
    TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10)); // Disable timer1 clock source (disables timer)
 7b0:	e1 e8       	ldi	r30, 0x81	; 129
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	80 81       	ld	r24, Z
 7b6:	88 7f       	andi	r24, 0xF8	; 248
 7b8:	80 83       	st	Z, r24
*/
void timer1_1ms_init(void) {
    static uint16_t timer1_1ms_compare_value = 250-1;
        
    timer1_disable();
    TCCR1A = 0x00;  // Make sure no pins are set to output
 7ba:	10 92 80 00 	sts	0x0080, r1
    TCCR1B |= (1<<WGM12) | TIMER1_PRESCALE_MASK;  // Set CTC, prescalar to clk(io)/64 (250 counts per 1ms)
 7be:	80 81       	ld	r24, Z
 7c0:	8b 60       	ori	r24, 0x0B	; 11
 7c2:	80 83       	st	Z, r24
    OCR1A = timer1_1ms_compare_value;    
 7c4:	89 ef       	ldi	r24, 0xF9	; 249
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	90 93 89 00 	sts	0x0089, r25
 7cc:	80 93 88 00 	sts	0x0088, r24
/*!
* @brief Enable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_enable(void) {
    TIMSK1 |= (1<<OCIE1A);  // Enable Output Compare Interrupt on Match A
 7d0:	8c 91       	ld	r24, X
 7d2:	82 60       	ori	r24, 0x02	; 2
 7d4:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_PRESCALE_MASK; // Enable timer1 clock source (disables timer)
 7d6:	80 81       	ld	r24, Z
 7d8:	83 60       	ori	r24, 0x03	; 3
 7da:	80 83       	st	Z, r24
 7dc:	08 95       	ret

000007de <delay>:
* @brief Delay milliseconds
* @param uint16_t delay_ms  Time to delay in milliseconds
* @return void
*/
void delay(uint16_t delay_ms) {
    uint32_t systck_1 = systck;
 7de:	40 91 a9 05 	lds	r20, 0x05A9
 7e2:	50 91 aa 05 	lds	r21, 0x05AA
 7e6:	60 91 ab 05 	lds	r22, 0x05AB
 7ea:	70 91 ac 05 	lds	r23, 0x05AC
    while(systck < (systck_1 + delay_ms));  // delay
 7ee:	48 0f       	add	r20, r24
 7f0:	59 1f       	adc	r21, r25
 7f2:	61 1d       	adc	r22, r1
 7f4:	71 1d       	adc	r23, r1
 7f6:	80 91 a9 05 	lds	r24, 0x05A9
 7fa:	90 91 aa 05 	lds	r25, 0x05AA
 7fe:	a0 91 ab 05 	lds	r26, 0x05AB
 802:	b0 91 ac 05 	lds	r27, 0x05AC
 806:	84 17       	cp	r24, r20
 808:	95 07       	cpc	r25, r21
 80a:	a6 07       	cpc	r26, r22
 80c:	b7 07       	cpc	r27, r23
 80e:	98 f3       	brcs	.-26     	; 0x7f6 <delay+0x18>
 810:	08 95       	ret

00000812 <__udivmodsi4>:
 812:	a1 e2       	ldi	r26, 0x21	; 33
 814:	1a 2e       	mov	r1, r26
 816:	aa 1b       	sub	r26, r26
 818:	bb 1b       	sub	r27, r27
 81a:	fd 01       	movw	r30, r26
 81c:	0d c0       	rjmp	.+26     	; 0x838 <__udivmodsi4_ep>

0000081e <__udivmodsi4_loop>:
 81e:	aa 1f       	adc	r26, r26
 820:	bb 1f       	adc	r27, r27
 822:	ee 1f       	adc	r30, r30
 824:	ff 1f       	adc	r31, r31
 826:	a2 17       	cp	r26, r18
 828:	b3 07       	cpc	r27, r19
 82a:	e4 07       	cpc	r30, r20
 82c:	f5 07       	cpc	r31, r21
 82e:	20 f0       	brcs	.+8      	; 0x838 <__udivmodsi4_ep>
 830:	a2 1b       	sub	r26, r18
 832:	b3 0b       	sbc	r27, r19
 834:	e4 0b       	sbc	r30, r20
 836:	f5 0b       	sbc	r31, r21

00000838 <__udivmodsi4_ep>:
 838:	66 1f       	adc	r22, r22
 83a:	77 1f       	adc	r23, r23
 83c:	88 1f       	adc	r24, r24
 83e:	99 1f       	adc	r25, r25
 840:	1a 94       	dec	r1
 842:	69 f7       	brne	.-38     	; 0x81e <__udivmodsi4_loop>
 844:	60 95       	com	r22
 846:	70 95       	com	r23
 848:	80 95       	com	r24
 84a:	90 95       	com	r25
 84c:	9b 01       	movw	r18, r22
 84e:	ac 01       	movw	r20, r24
 850:	bd 01       	movw	r22, r26
 852:	cf 01       	movw	r24, r30
 854:	08 95       	ret

00000856 <sprintf>:
 856:	ae e0       	ldi	r26, 0x0E	; 14
 858:	b0 e0       	ldi	r27, 0x00	; 0
 85a:	e1 e3       	ldi	r30, 0x31	; 49
 85c:	f4 e0       	ldi	r31, 0x04	; 4
 85e:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__prologue_saves__+0x1c>
 862:	0d 89       	ldd	r16, Y+21	; 0x15
 864:	1e 89       	ldd	r17, Y+22	; 0x16
 866:	86 e0       	ldi	r24, 0x06	; 6
 868:	8c 83       	std	Y+4, r24	; 0x04
 86a:	1a 83       	std	Y+2, r17	; 0x02
 86c:	09 83       	std	Y+1, r16	; 0x01
 86e:	8f ef       	ldi	r24, 0xFF	; 255
 870:	9f e7       	ldi	r25, 0x7F	; 127
 872:	9e 83       	std	Y+6, r25	; 0x06
 874:	8d 83       	std	Y+5, r24	; 0x05
 876:	ae 01       	movw	r20, r28
 878:	47 5e       	subi	r20, 0xE7	; 231
 87a:	5f 4f       	sbci	r21, 0xFF	; 255
 87c:	6f 89       	ldd	r22, Y+23	; 0x17
 87e:	78 8d       	ldd	r23, Y+24	; 0x18
 880:	ce 01       	movw	r24, r28
 882:	01 96       	adiw	r24, 0x01	; 1
 884:	0e 94 4e 04 	call	0x89c	; 0x89c <vfprintf>
 888:	2f 81       	ldd	r18, Y+7	; 0x07
 88a:	38 85       	ldd	r19, Y+8	; 0x08
 88c:	f8 01       	movw	r30, r16
 88e:	e2 0f       	add	r30, r18
 890:	f3 1f       	adc	r31, r19
 892:	10 82       	st	Z, r1
 894:	2e 96       	adiw	r28, 0x0e	; 14
 896:	e4 e0       	ldi	r30, 0x04	; 4
 898:	0c 94 f6 06 	jmp	0xdec	; 0xdec <__epilogue_restores__+0x1c>

0000089c <vfprintf>:
 89c:	ac e0       	ldi	r26, 0x0C	; 12
 89e:	b0 e0       	ldi	r27, 0x00	; 0
 8a0:	e4 e5       	ldi	r30, 0x54	; 84
 8a2:	f4 e0       	ldi	r31, 0x04	; 4
 8a4:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__prologue_saves__>
 8a8:	7c 01       	movw	r14, r24
 8aa:	6b 01       	movw	r12, r22
 8ac:	8a 01       	movw	r16, r20
 8ae:	fc 01       	movw	r30, r24
 8b0:	17 82       	std	Z+7, r1	; 0x07
 8b2:	16 82       	std	Z+6, r1	; 0x06
 8b4:	83 81       	ldd	r24, Z+3	; 0x03
 8b6:	81 ff       	sbrs	r24, 1
 8b8:	bd c1       	rjmp	.+890    	; 0xc34 <__stack+0x335>
 8ba:	ce 01       	movw	r24, r28
 8bc:	01 96       	adiw	r24, 0x01	; 1
 8be:	4c 01       	movw	r8, r24
 8c0:	f7 01       	movw	r30, r14
 8c2:	93 81       	ldd	r25, Z+3	; 0x03
 8c4:	f6 01       	movw	r30, r12
 8c6:	93 fd       	sbrc	r25, 3
 8c8:	85 91       	lpm	r24, Z+
 8ca:	93 ff       	sbrs	r25, 3
 8cc:	81 91       	ld	r24, Z+
 8ce:	6f 01       	movw	r12, r30
 8d0:	88 23       	and	r24, r24
 8d2:	09 f4       	brne	.+2      	; 0x8d6 <vfprintf+0x3a>
 8d4:	ab c1       	rjmp	.+854    	; 0xc2c <__stack+0x32d>
 8d6:	85 32       	cpi	r24, 0x25	; 37
 8d8:	39 f4       	brne	.+14     	; 0x8e8 <vfprintf+0x4c>
 8da:	93 fd       	sbrc	r25, 3
 8dc:	85 91       	lpm	r24, Z+
 8de:	93 ff       	sbrs	r25, 3
 8e0:	81 91       	ld	r24, Z+
 8e2:	6f 01       	movw	r12, r30
 8e4:	85 32       	cpi	r24, 0x25	; 37
 8e6:	29 f4       	brne	.+10     	; 0x8f2 <vfprintf+0x56>
 8e8:	b7 01       	movw	r22, r14
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	0e 94 36 06 	call	0xc6c	; 0xc6c <fputc>
 8f0:	e7 cf       	rjmp	.-50     	; 0x8c0 <vfprintf+0x24>
 8f2:	51 2c       	mov	r5, r1
 8f4:	31 2c       	mov	r3, r1
 8f6:	20 e0       	ldi	r18, 0x00	; 0
 8f8:	20 32       	cpi	r18, 0x20	; 32
 8fa:	a0 f4       	brcc	.+40     	; 0x924 <__stack+0x25>
 8fc:	8b 32       	cpi	r24, 0x2B	; 43
 8fe:	69 f0       	breq	.+26     	; 0x91a <__stack+0x1b>
 900:	30 f4       	brcc	.+12     	; 0x90e <__stack+0xf>
 902:	80 32       	cpi	r24, 0x20	; 32
 904:	59 f0       	breq	.+22     	; 0x91c <__stack+0x1d>
 906:	83 32       	cpi	r24, 0x23	; 35
 908:	69 f4       	brne	.+26     	; 0x924 <__stack+0x25>
 90a:	20 61       	ori	r18, 0x10	; 16
 90c:	2c c0       	rjmp	.+88     	; 0x966 <__stack+0x67>
 90e:	8d 32       	cpi	r24, 0x2D	; 45
 910:	39 f0       	breq	.+14     	; 0x920 <__stack+0x21>
 912:	80 33       	cpi	r24, 0x30	; 48
 914:	39 f4       	brne	.+14     	; 0x924 <__stack+0x25>
 916:	21 60       	ori	r18, 0x01	; 1
 918:	26 c0       	rjmp	.+76     	; 0x966 <__stack+0x67>
 91a:	22 60       	ori	r18, 0x02	; 2
 91c:	24 60       	ori	r18, 0x04	; 4
 91e:	23 c0       	rjmp	.+70     	; 0x966 <__stack+0x67>
 920:	28 60       	ori	r18, 0x08	; 8
 922:	21 c0       	rjmp	.+66     	; 0x966 <__stack+0x67>
 924:	27 fd       	sbrc	r18, 7
 926:	27 c0       	rjmp	.+78     	; 0x976 <__stack+0x77>
 928:	30 ed       	ldi	r19, 0xD0	; 208
 92a:	38 0f       	add	r19, r24
 92c:	3a 30       	cpi	r19, 0x0A	; 10
 92e:	78 f4       	brcc	.+30     	; 0x94e <__stack+0x4f>
 930:	26 ff       	sbrs	r18, 6
 932:	06 c0       	rjmp	.+12     	; 0x940 <__stack+0x41>
 934:	fa e0       	ldi	r31, 0x0A	; 10
 936:	5f 9e       	mul	r5, r31
 938:	30 0d       	add	r19, r0
 93a:	11 24       	eor	r1, r1
 93c:	53 2e       	mov	r5, r19
 93e:	13 c0       	rjmp	.+38     	; 0x966 <__stack+0x67>
 940:	8a e0       	ldi	r24, 0x0A	; 10
 942:	38 9e       	mul	r3, r24
 944:	30 0d       	add	r19, r0
 946:	11 24       	eor	r1, r1
 948:	33 2e       	mov	r3, r19
 94a:	20 62       	ori	r18, 0x20	; 32
 94c:	0c c0       	rjmp	.+24     	; 0x966 <__stack+0x67>
 94e:	8e 32       	cpi	r24, 0x2E	; 46
 950:	21 f4       	brne	.+8      	; 0x95a <__stack+0x5b>
 952:	26 fd       	sbrc	r18, 6
 954:	6b c1       	rjmp	.+726    	; 0xc2c <__stack+0x32d>
 956:	20 64       	ori	r18, 0x40	; 64
 958:	06 c0       	rjmp	.+12     	; 0x966 <__stack+0x67>
 95a:	8c 36       	cpi	r24, 0x6C	; 108
 95c:	11 f4       	brne	.+4      	; 0x962 <__stack+0x63>
 95e:	20 68       	ori	r18, 0x80	; 128
 960:	02 c0       	rjmp	.+4      	; 0x966 <__stack+0x67>
 962:	88 36       	cpi	r24, 0x68	; 104
 964:	41 f4       	brne	.+16     	; 0x976 <__stack+0x77>
 966:	f6 01       	movw	r30, r12
 968:	93 fd       	sbrc	r25, 3
 96a:	85 91       	lpm	r24, Z+
 96c:	93 ff       	sbrs	r25, 3
 96e:	81 91       	ld	r24, Z+
 970:	6f 01       	movw	r12, r30
 972:	81 11       	cpse	r24, r1
 974:	c1 cf       	rjmp	.-126    	; 0x8f8 <vfprintf+0x5c>
 976:	98 2f       	mov	r25, r24
 978:	9f 7d       	andi	r25, 0xDF	; 223
 97a:	95 54       	subi	r25, 0x45	; 69
 97c:	93 30       	cpi	r25, 0x03	; 3
 97e:	28 f4       	brcc	.+10     	; 0x98a <__stack+0x8b>
 980:	0c 5f       	subi	r16, 0xFC	; 252
 982:	1f 4f       	sbci	r17, 0xFF	; 255
 984:	ff e3       	ldi	r31, 0x3F	; 63
 986:	f9 83       	std	Y+1, r31	; 0x01
 988:	0d c0       	rjmp	.+26     	; 0x9a4 <__stack+0xa5>
 98a:	83 36       	cpi	r24, 0x63	; 99
 98c:	31 f0       	breq	.+12     	; 0x99a <__stack+0x9b>
 98e:	83 37       	cpi	r24, 0x73	; 115
 990:	71 f0       	breq	.+28     	; 0x9ae <__stack+0xaf>
 992:	83 35       	cpi	r24, 0x53	; 83
 994:	09 f0       	breq	.+2      	; 0x998 <__stack+0x99>
 996:	5b c0       	rjmp	.+182    	; 0xa4e <__stack+0x14f>
 998:	22 c0       	rjmp	.+68     	; 0x9de <__stack+0xdf>
 99a:	f8 01       	movw	r30, r16
 99c:	80 81       	ld	r24, Z
 99e:	89 83       	std	Y+1, r24	; 0x01
 9a0:	0e 5f       	subi	r16, 0xFE	; 254
 9a2:	1f 4f       	sbci	r17, 0xFF	; 255
 9a4:	44 24       	eor	r4, r4
 9a6:	43 94       	inc	r4
 9a8:	51 2c       	mov	r5, r1
 9aa:	54 01       	movw	r10, r8
 9ac:	15 c0       	rjmp	.+42     	; 0x9d8 <__stack+0xd9>
 9ae:	38 01       	movw	r6, r16
 9b0:	f2 e0       	ldi	r31, 0x02	; 2
 9b2:	6f 0e       	add	r6, r31
 9b4:	71 1c       	adc	r7, r1
 9b6:	f8 01       	movw	r30, r16
 9b8:	a0 80       	ld	r10, Z
 9ba:	b1 80       	ldd	r11, Z+1	; 0x01
 9bc:	26 ff       	sbrs	r18, 6
 9be:	03 c0       	rjmp	.+6      	; 0x9c6 <__stack+0xc7>
 9c0:	65 2d       	mov	r22, r5
 9c2:	70 e0       	ldi	r23, 0x00	; 0
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <__stack+0xcb>
 9c6:	6f ef       	ldi	r22, 0xFF	; 255
 9c8:	7f ef       	ldi	r23, 0xFF	; 255
 9ca:	c5 01       	movw	r24, r10
 9cc:	2c 87       	std	Y+12, r18	; 0x0c
 9ce:	0e 94 2b 06 	call	0xc56	; 0xc56 <strnlen>
 9d2:	2c 01       	movw	r4, r24
 9d4:	83 01       	movw	r16, r6
 9d6:	2c 85       	ldd	r18, Y+12	; 0x0c
 9d8:	2f 77       	andi	r18, 0x7F	; 127
 9da:	22 2e       	mov	r2, r18
 9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__stack+0x10d>
 9de:	38 01       	movw	r6, r16
 9e0:	f2 e0       	ldi	r31, 0x02	; 2
 9e2:	6f 0e       	add	r6, r31
 9e4:	71 1c       	adc	r7, r1
 9e6:	f8 01       	movw	r30, r16
 9e8:	a0 80       	ld	r10, Z
 9ea:	b1 80       	ldd	r11, Z+1	; 0x01
 9ec:	26 ff       	sbrs	r18, 6
 9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <__stack+0xf7>
 9f0:	65 2d       	mov	r22, r5
 9f2:	70 e0       	ldi	r23, 0x00	; 0
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <__stack+0xfb>
 9f6:	6f ef       	ldi	r22, 0xFF	; 255
 9f8:	7f ef       	ldi	r23, 0xFF	; 255
 9fa:	c5 01       	movw	r24, r10
 9fc:	2c 87       	std	Y+12, r18	; 0x0c
 9fe:	0e 94 20 06 	call	0xc40	; 0xc40 <strnlen_P>
 a02:	2c 01       	movw	r4, r24
 a04:	2c 85       	ldd	r18, Y+12	; 0x0c
 a06:	20 68       	ori	r18, 0x80	; 128
 a08:	22 2e       	mov	r2, r18
 a0a:	83 01       	movw	r16, r6
 a0c:	23 fc       	sbrc	r2, 3
 a0e:	1b c0       	rjmp	.+54     	; 0xa46 <__stack+0x147>
 a10:	83 2d       	mov	r24, r3
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	48 16       	cp	r4, r24
 a16:	59 06       	cpc	r5, r25
 a18:	b0 f4       	brcc	.+44     	; 0xa46 <__stack+0x147>
 a1a:	b7 01       	movw	r22, r14
 a1c:	80 e2       	ldi	r24, 0x20	; 32
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e 94 36 06 	call	0xc6c	; 0xc6c <fputc>
 a24:	3a 94       	dec	r3
 a26:	f4 cf       	rjmp	.-24     	; 0xa10 <__stack+0x111>
 a28:	f5 01       	movw	r30, r10
 a2a:	27 fc       	sbrc	r2, 7
 a2c:	85 91       	lpm	r24, Z+
 a2e:	27 fe       	sbrs	r2, 7
 a30:	81 91       	ld	r24, Z+
 a32:	5f 01       	movw	r10, r30
 a34:	b7 01       	movw	r22, r14
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	0e 94 36 06 	call	0xc6c	; 0xc6c <fputc>
 a3c:	31 10       	cpse	r3, r1
 a3e:	3a 94       	dec	r3
 a40:	f1 e0       	ldi	r31, 0x01	; 1
 a42:	4f 1a       	sub	r4, r31
 a44:	51 08       	sbc	r5, r1
 a46:	41 14       	cp	r4, r1
 a48:	51 04       	cpc	r5, r1
 a4a:	71 f7       	brne	.-36     	; 0xa28 <__stack+0x129>
 a4c:	e5 c0       	rjmp	.+458    	; 0xc18 <__stack+0x319>
 a4e:	84 36       	cpi	r24, 0x64	; 100
 a50:	11 f0       	breq	.+4      	; 0xa56 <__stack+0x157>
 a52:	89 36       	cpi	r24, 0x69	; 105
 a54:	39 f5       	brne	.+78     	; 0xaa4 <__stack+0x1a5>
 a56:	f8 01       	movw	r30, r16
 a58:	27 ff       	sbrs	r18, 7
 a5a:	07 c0       	rjmp	.+14     	; 0xa6a <__stack+0x16b>
 a5c:	60 81       	ld	r22, Z
 a5e:	71 81       	ldd	r23, Z+1	; 0x01
 a60:	82 81       	ldd	r24, Z+2	; 0x02
 a62:	93 81       	ldd	r25, Z+3	; 0x03
 a64:	0c 5f       	subi	r16, 0xFC	; 252
 a66:	1f 4f       	sbci	r17, 0xFF	; 255
 a68:	08 c0       	rjmp	.+16     	; 0xa7a <__stack+0x17b>
 a6a:	60 81       	ld	r22, Z
 a6c:	71 81       	ldd	r23, Z+1	; 0x01
 a6e:	07 2e       	mov	r0, r23
 a70:	00 0c       	add	r0, r0
 a72:	88 0b       	sbc	r24, r24
 a74:	99 0b       	sbc	r25, r25
 a76:	0e 5f       	subi	r16, 0xFE	; 254
 a78:	1f 4f       	sbci	r17, 0xFF	; 255
 a7a:	2f 76       	andi	r18, 0x6F	; 111
 a7c:	72 2e       	mov	r7, r18
 a7e:	97 ff       	sbrs	r25, 7
 a80:	09 c0       	rjmp	.+18     	; 0xa94 <__stack+0x195>
 a82:	90 95       	com	r25
 a84:	80 95       	com	r24
 a86:	70 95       	com	r23
 a88:	61 95       	neg	r22
 a8a:	7f 4f       	sbci	r23, 0xFF	; 255
 a8c:	8f 4f       	sbci	r24, 0xFF	; 255
 a8e:	9f 4f       	sbci	r25, 0xFF	; 255
 a90:	20 68       	ori	r18, 0x80	; 128
 a92:	72 2e       	mov	r7, r18
 a94:	2a e0       	ldi	r18, 0x0A	; 10
 a96:	30 e0       	ldi	r19, 0x00	; 0
 a98:	a4 01       	movw	r20, r8
 a9a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__ultoa_invert>
 a9e:	a8 2e       	mov	r10, r24
 aa0:	a8 18       	sub	r10, r8
 aa2:	44 c0       	rjmp	.+136    	; 0xb2c <__stack+0x22d>
 aa4:	85 37       	cpi	r24, 0x75	; 117
 aa6:	29 f4       	brne	.+10     	; 0xab2 <__stack+0x1b3>
 aa8:	2f 7e       	andi	r18, 0xEF	; 239
 aaa:	b2 2e       	mov	r11, r18
 aac:	2a e0       	ldi	r18, 0x0A	; 10
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	25 c0       	rjmp	.+74     	; 0xafc <__stack+0x1fd>
 ab2:	f2 2f       	mov	r31, r18
 ab4:	f9 7f       	andi	r31, 0xF9	; 249
 ab6:	bf 2e       	mov	r11, r31
 ab8:	8f 36       	cpi	r24, 0x6F	; 111
 aba:	c1 f0       	breq	.+48     	; 0xaec <__stack+0x1ed>
 abc:	18 f4       	brcc	.+6      	; 0xac4 <__stack+0x1c5>
 abe:	88 35       	cpi	r24, 0x58	; 88
 ac0:	79 f0       	breq	.+30     	; 0xae0 <__stack+0x1e1>
 ac2:	b4 c0       	rjmp	.+360    	; 0xc2c <__stack+0x32d>
 ac4:	80 37       	cpi	r24, 0x70	; 112
 ac6:	19 f0       	breq	.+6      	; 0xace <__stack+0x1cf>
 ac8:	88 37       	cpi	r24, 0x78	; 120
 aca:	21 f0       	breq	.+8      	; 0xad4 <__stack+0x1d5>
 acc:	af c0       	rjmp	.+350    	; 0xc2c <__stack+0x32d>
 ace:	2f 2f       	mov	r18, r31
 ad0:	20 61       	ori	r18, 0x10	; 16
 ad2:	b2 2e       	mov	r11, r18
 ad4:	b4 fe       	sbrs	r11, 4
 ad6:	0d c0       	rjmp	.+26     	; 0xaf2 <__stack+0x1f3>
 ad8:	8b 2d       	mov	r24, r11
 ada:	84 60       	ori	r24, 0x04	; 4
 adc:	b8 2e       	mov	r11, r24
 ade:	09 c0       	rjmp	.+18     	; 0xaf2 <__stack+0x1f3>
 ae0:	24 ff       	sbrs	r18, 4
 ae2:	0a c0       	rjmp	.+20     	; 0xaf8 <__stack+0x1f9>
 ae4:	9f 2f       	mov	r25, r31
 ae6:	96 60       	ori	r25, 0x06	; 6
 ae8:	b9 2e       	mov	r11, r25
 aea:	06 c0       	rjmp	.+12     	; 0xaf8 <__stack+0x1f9>
 aec:	28 e0       	ldi	r18, 0x08	; 8
 aee:	30 e0       	ldi	r19, 0x00	; 0
 af0:	05 c0       	rjmp	.+10     	; 0xafc <__stack+0x1fd>
 af2:	20 e1       	ldi	r18, 0x10	; 16
 af4:	30 e0       	ldi	r19, 0x00	; 0
 af6:	02 c0       	rjmp	.+4      	; 0xafc <__stack+0x1fd>
 af8:	20 e1       	ldi	r18, 0x10	; 16
 afa:	32 e0       	ldi	r19, 0x02	; 2
 afc:	f8 01       	movw	r30, r16
 afe:	b7 fe       	sbrs	r11, 7
 b00:	07 c0       	rjmp	.+14     	; 0xb10 <__stack+0x211>
 b02:	60 81       	ld	r22, Z
 b04:	71 81       	ldd	r23, Z+1	; 0x01
 b06:	82 81       	ldd	r24, Z+2	; 0x02
 b08:	93 81       	ldd	r25, Z+3	; 0x03
 b0a:	0c 5f       	subi	r16, 0xFC	; 252
 b0c:	1f 4f       	sbci	r17, 0xFF	; 255
 b0e:	06 c0       	rjmp	.+12     	; 0xb1c <__stack+0x21d>
 b10:	60 81       	ld	r22, Z
 b12:	71 81       	ldd	r23, Z+1	; 0x01
 b14:	80 e0       	ldi	r24, 0x00	; 0
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	0e 5f       	subi	r16, 0xFE	; 254
 b1a:	1f 4f       	sbci	r17, 0xFF	; 255
 b1c:	a4 01       	movw	r20, r8
 b1e:	0e 94 6e 06 	call	0xcdc	; 0xcdc <__ultoa_invert>
 b22:	a8 2e       	mov	r10, r24
 b24:	a8 18       	sub	r10, r8
 b26:	fb 2d       	mov	r31, r11
 b28:	ff 77       	andi	r31, 0x7F	; 127
 b2a:	7f 2e       	mov	r7, r31
 b2c:	76 fe       	sbrs	r7, 6
 b2e:	0b c0       	rjmp	.+22     	; 0xb46 <__stack+0x247>
 b30:	37 2d       	mov	r19, r7
 b32:	3e 7f       	andi	r19, 0xFE	; 254
 b34:	a5 14       	cp	r10, r5
 b36:	50 f4       	brcc	.+20     	; 0xb4c <__stack+0x24d>
 b38:	74 fe       	sbrs	r7, 4
 b3a:	0a c0       	rjmp	.+20     	; 0xb50 <__stack+0x251>
 b3c:	72 fc       	sbrc	r7, 2
 b3e:	08 c0       	rjmp	.+16     	; 0xb50 <__stack+0x251>
 b40:	37 2d       	mov	r19, r7
 b42:	3e 7e       	andi	r19, 0xEE	; 238
 b44:	05 c0       	rjmp	.+10     	; 0xb50 <__stack+0x251>
 b46:	ba 2c       	mov	r11, r10
 b48:	37 2d       	mov	r19, r7
 b4a:	03 c0       	rjmp	.+6      	; 0xb52 <__stack+0x253>
 b4c:	ba 2c       	mov	r11, r10
 b4e:	01 c0       	rjmp	.+2      	; 0xb52 <__stack+0x253>
 b50:	b5 2c       	mov	r11, r5
 b52:	34 ff       	sbrs	r19, 4
 b54:	0d c0       	rjmp	.+26     	; 0xb70 <__stack+0x271>
 b56:	fe 01       	movw	r30, r28
 b58:	ea 0d       	add	r30, r10
 b5a:	f1 1d       	adc	r31, r1
 b5c:	80 81       	ld	r24, Z
 b5e:	80 33       	cpi	r24, 0x30	; 48
 b60:	11 f4       	brne	.+4      	; 0xb66 <__stack+0x267>
 b62:	39 7e       	andi	r19, 0xE9	; 233
 b64:	09 c0       	rjmp	.+18     	; 0xb78 <__stack+0x279>
 b66:	32 ff       	sbrs	r19, 2
 b68:	06 c0       	rjmp	.+12     	; 0xb76 <__stack+0x277>
 b6a:	b3 94       	inc	r11
 b6c:	b3 94       	inc	r11
 b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__stack+0x279>
 b70:	83 2f       	mov	r24, r19
 b72:	86 78       	andi	r24, 0x86	; 134
 b74:	09 f0       	breq	.+2      	; 0xb78 <__stack+0x279>
 b76:	b3 94       	inc	r11
 b78:	33 fd       	sbrc	r19, 3
 b7a:	13 c0       	rjmp	.+38     	; 0xba2 <__stack+0x2a3>
 b7c:	30 ff       	sbrs	r19, 0
 b7e:	06 c0       	rjmp	.+12     	; 0xb8c <__stack+0x28d>
 b80:	5a 2c       	mov	r5, r10
 b82:	b3 14       	cp	r11, r3
 b84:	18 f4       	brcc	.+6      	; 0xb8c <__stack+0x28d>
 b86:	53 0c       	add	r5, r3
 b88:	5b 18       	sub	r5, r11
 b8a:	b3 2c       	mov	r11, r3
 b8c:	b3 14       	cp	r11, r3
 b8e:	68 f4       	brcc	.+26     	; 0xbaa <__stack+0x2ab>
 b90:	b7 01       	movw	r22, r14
 b92:	80 e2       	ldi	r24, 0x20	; 32
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	3c 87       	std	Y+12, r19	; 0x0c
 b98:	0e 94 36 06 	call	0xc6c	; 0xc6c <fputc>
 b9c:	b3 94       	inc	r11
 b9e:	3c 85       	ldd	r19, Y+12	; 0x0c
 ba0:	f5 cf       	rjmp	.-22     	; 0xb8c <__stack+0x28d>
 ba2:	b3 14       	cp	r11, r3
 ba4:	10 f4       	brcc	.+4      	; 0xbaa <__stack+0x2ab>
 ba6:	3b 18       	sub	r3, r11
 ba8:	01 c0       	rjmp	.+2      	; 0xbac <__stack+0x2ad>
 baa:	31 2c       	mov	r3, r1
 bac:	34 ff       	sbrs	r19, 4
 bae:	12 c0       	rjmp	.+36     	; 0xbd4 <__stack+0x2d5>
 bb0:	b7 01       	movw	r22, r14
 bb2:	80 e3       	ldi	r24, 0x30	; 48
 bb4:	90 e0       	ldi	r25, 0x00	; 0
 bb6:	3c 87       	std	Y+12, r19	; 0x0c
 bb8:	0e 94 36 06 	call	0xc6c	; 0xc6c <fputc>
 bbc:	3c 85       	ldd	r19, Y+12	; 0x0c
 bbe:	32 ff       	sbrs	r19, 2
 bc0:	17 c0       	rjmp	.+46     	; 0xbf0 <__stack+0x2f1>
 bc2:	31 fd       	sbrc	r19, 1
 bc4:	03 c0       	rjmp	.+6      	; 0xbcc <__stack+0x2cd>
 bc6:	88 e7       	ldi	r24, 0x78	; 120
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	02 c0       	rjmp	.+4      	; 0xbd0 <__stack+0x2d1>
 bcc:	88 e5       	ldi	r24, 0x58	; 88
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	b7 01       	movw	r22, r14
 bd2:	0c c0       	rjmp	.+24     	; 0xbec <__stack+0x2ed>
 bd4:	83 2f       	mov	r24, r19
 bd6:	86 78       	andi	r24, 0x86	; 134
 bd8:	59 f0       	breq	.+22     	; 0xbf0 <__stack+0x2f1>
 bda:	31 ff       	sbrs	r19, 1
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <__stack+0x2e3>
 bde:	8b e2       	ldi	r24, 0x2B	; 43
 be0:	01 c0       	rjmp	.+2      	; 0xbe4 <__stack+0x2e5>
 be2:	80 e2       	ldi	r24, 0x20	; 32
 be4:	37 fd       	sbrc	r19, 7
 be6:	8d e2       	ldi	r24, 0x2D	; 45
 be8:	b7 01       	movw	r22, r14
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 36 06 	call	0xc6c	; 0xc6c <fputc>
 bf0:	a5 14       	cp	r10, r5
 bf2:	38 f4       	brcc	.+14     	; 0xc02 <__stack+0x303>
 bf4:	b7 01       	movw	r22, r14
 bf6:	80 e3       	ldi	r24, 0x30	; 48
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	0e 94 36 06 	call	0xc6c	; 0xc6c <fputc>
 bfe:	5a 94       	dec	r5
 c00:	f7 cf       	rjmp	.-18     	; 0xbf0 <__stack+0x2f1>
 c02:	aa 94       	dec	r10
 c04:	f4 01       	movw	r30, r8
 c06:	ea 0d       	add	r30, r10
 c08:	f1 1d       	adc	r31, r1
 c0a:	80 81       	ld	r24, Z
 c0c:	b7 01       	movw	r22, r14
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0e 94 36 06 	call	0xc6c	; 0xc6c <fputc>
 c14:	a1 10       	cpse	r10, r1
 c16:	f5 cf       	rjmp	.-22     	; 0xc02 <__stack+0x303>
 c18:	33 20       	and	r3, r3
 c1a:	09 f4       	brne	.+2      	; 0xc1e <__stack+0x31f>
 c1c:	51 ce       	rjmp	.-862    	; 0x8c0 <vfprintf+0x24>
 c1e:	b7 01       	movw	r22, r14
 c20:	80 e2       	ldi	r24, 0x20	; 32
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	0e 94 36 06 	call	0xc6c	; 0xc6c <fputc>
 c28:	3a 94       	dec	r3
 c2a:	f6 cf       	rjmp	.-20     	; 0xc18 <__stack+0x319>
 c2c:	f7 01       	movw	r30, r14
 c2e:	86 81       	ldd	r24, Z+6	; 0x06
 c30:	97 81       	ldd	r25, Z+7	; 0x07
 c32:	02 c0       	rjmp	.+4      	; 0xc38 <__stack+0x339>
 c34:	8f ef       	ldi	r24, 0xFF	; 255
 c36:	9f ef       	ldi	r25, 0xFF	; 255
 c38:	2c 96       	adiw	r28, 0x0c	; 12
 c3a:	e2 e1       	ldi	r30, 0x12	; 18
 c3c:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__epilogue_restores__>

00000c40 <strnlen_P>:
 c40:	fc 01       	movw	r30, r24
 c42:	05 90       	lpm	r0, Z+
 c44:	61 50       	subi	r22, 0x01	; 1
 c46:	70 40       	sbci	r23, 0x00	; 0
 c48:	01 10       	cpse	r0, r1
 c4a:	d8 f7       	brcc	.-10     	; 0xc42 <strnlen_P+0x2>
 c4c:	80 95       	com	r24
 c4e:	90 95       	com	r25
 c50:	8e 0f       	add	r24, r30
 c52:	9f 1f       	adc	r25, r31
 c54:	08 95       	ret

00000c56 <strnlen>:
 c56:	fc 01       	movw	r30, r24
 c58:	61 50       	subi	r22, 0x01	; 1
 c5a:	70 40       	sbci	r23, 0x00	; 0
 c5c:	01 90       	ld	r0, Z+
 c5e:	01 10       	cpse	r0, r1
 c60:	d8 f7       	brcc	.-10     	; 0xc58 <strnlen+0x2>
 c62:	80 95       	com	r24
 c64:	90 95       	com	r25
 c66:	8e 0f       	add	r24, r30
 c68:	9f 1f       	adc	r25, r31
 c6a:	08 95       	ret

00000c6c <fputc>:
 c6c:	0f 93       	push	r16
 c6e:	1f 93       	push	r17
 c70:	cf 93       	push	r28
 c72:	df 93       	push	r29
 c74:	fb 01       	movw	r30, r22
 c76:	23 81       	ldd	r18, Z+3	; 0x03
 c78:	21 fd       	sbrc	r18, 1
 c7a:	03 c0       	rjmp	.+6      	; 0xc82 <fputc+0x16>
 c7c:	8f ef       	ldi	r24, 0xFF	; 255
 c7e:	9f ef       	ldi	r25, 0xFF	; 255
 c80:	28 c0       	rjmp	.+80     	; 0xcd2 <fputc+0x66>
 c82:	22 ff       	sbrs	r18, 2
 c84:	16 c0       	rjmp	.+44     	; 0xcb2 <fputc+0x46>
 c86:	46 81       	ldd	r20, Z+6	; 0x06
 c88:	57 81       	ldd	r21, Z+7	; 0x07
 c8a:	24 81       	ldd	r18, Z+4	; 0x04
 c8c:	35 81       	ldd	r19, Z+5	; 0x05
 c8e:	42 17       	cp	r20, r18
 c90:	53 07       	cpc	r21, r19
 c92:	44 f4       	brge	.+16     	; 0xca4 <fputc+0x38>
 c94:	a0 81       	ld	r26, Z
 c96:	b1 81       	ldd	r27, Z+1	; 0x01
 c98:	9d 01       	movw	r18, r26
 c9a:	2f 5f       	subi	r18, 0xFF	; 255
 c9c:	3f 4f       	sbci	r19, 0xFF	; 255
 c9e:	31 83       	std	Z+1, r19	; 0x01
 ca0:	20 83       	st	Z, r18
 ca2:	8c 93       	st	X, r24
 ca4:	26 81       	ldd	r18, Z+6	; 0x06
 ca6:	37 81       	ldd	r19, Z+7	; 0x07
 ca8:	2f 5f       	subi	r18, 0xFF	; 255
 caa:	3f 4f       	sbci	r19, 0xFF	; 255
 cac:	37 83       	std	Z+7, r19	; 0x07
 cae:	26 83       	std	Z+6, r18	; 0x06
 cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <fputc+0x66>
 cb2:	eb 01       	movw	r28, r22
 cb4:	09 2f       	mov	r16, r25
 cb6:	18 2f       	mov	r17, r24
 cb8:	00 84       	ldd	r0, Z+8	; 0x08
 cba:	f1 85       	ldd	r31, Z+9	; 0x09
 cbc:	e0 2d       	mov	r30, r0
 cbe:	09 95       	icall
 cc0:	89 2b       	or	r24, r25
 cc2:	e1 f6       	brne	.-72     	; 0xc7c <fputc+0x10>
 cc4:	8e 81       	ldd	r24, Y+6	; 0x06
 cc6:	9f 81       	ldd	r25, Y+7	; 0x07
 cc8:	01 96       	adiw	r24, 0x01	; 1
 cca:	9f 83       	std	Y+7, r25	; 0x07
 ccc:	8e 83       	std	Y+6, r24	; 0x06
 cce:	81 2f       	mov	r24, r17
 cd0:	90 2f       	mov	r25, r16
 cd2:	df 91       	pop	r29
 cd4:	cf 91       	pop	r28
 cd6:	1f 91       	pop	r17
 cd8:	0f 91       	pop	r16
 cda:	08 95       	ret

00000cdc <__ultoa_invert>:
 cdc:	fa 01       	movw	r30, r20
 cde:	aa 27       	eor	r26, r26
 ce0:	28 30       	cpi	r18, 0x08	; 8
 ce2:	51 f1       	breq	.+84     	; 0xd38 <__ultoa_invert+0x5c>
 ce4:	20 31       	cpi	r18, 0x10	; 16
 ce6:	81 f1       	breq	.+96     	; 0xd48 <__ultoa_invert+0x6c>
 ce8:	e8 94       	clt
 cea:	6f 93       	push	r22
 cec:	6e 7f       	andi	r22, 0xFE	; 254
 cee:	6e 5f       	subi	r22, 0xFE	; 254
 cf0:	7f 4f       	sbci	r23, 0xFF	; 255
 cf2:	8f 4f       	sbci	r24, 0xFF	; 255
 cf4:	9f 4f       	sbci	r25, 0xFF	; 255
 cf6:	af 4f       	sbci	r26, 0xFF	; 255
 cf8:	b1 e0       	ldi	r27, 0x01	; 1
 cfa:	3e d0       	rcall	.+124    	; 0xd78 <__ultoa_invert+0x9c>
 cfc:	b4 e0       	ldi	r27, 0x04	; 4
 cfe:	3c d0       	rcall	.+120    	; 0xd78 <__ultoa_invert+0x9c>
 d00:	67 0f       	add	r22, r23
 d02:	78 1f       	adc	r23, r24
 d04:	89 1f       	adc	r24, r25
 d06:	9a 1f       	adc	r25, r26
 d08:	a1 1d       	adc	r26, r1
 d0a:	68 0f       	add	r22, r24
 d0c:	79 1f       	adc	r23, r25
 d0e:	8a 1f       	adc	r24, r26
 d10:	91 1d       	adc	r25, r1
 d12:	a1 1d       	adc	r26, r1
 d14:	6a 0f       	add	r22, r26
 d16:	71 1d       	adc	r23, r1
 d18:	81 1d       	adc	r24, r1
 d1a:	91 1d       	adc	r25, r1
 d1c:	a1 1d       	adc	r26, r1
 d1e:	20 d0       	rcall	.+64     	; 0xd60 <__ultoa_invert+0x84>
 d20:	09 f4       	brne	.+2      	; 0xd24 <__ultoa_invert+0x48>
 d22:	68 94       	set
 d24:	3f 91       	pop	r19
 d26:	2a e0       	ldi	r18, 0x0A	; 10
 d28:	26 9f       	mul	r18, r22
 d2a:	11 24       	eor	r1, r1
 d2c:	30 19       	sub	r19, r0
 d2e:	30 5d       	subi	r19, 0xD0	; 208
 d30:	31 93       	st	Z+, r19
 d32:	de f6       	brtc	.-74     	; 0xcea <__ultoa_invert+0xe>
 d34:	cf 01       	movw	r24, r30
 d36:	08 95       	ret
 d38:	46 2f       	mov	r20, r22
 d3a:	47 70       	andi	r20, 0x07	; 7
 d3c:	40 5d       	subi	r20, 0xD0	; 208
 d3e:	41 93       	st	Z+, r20
 d40:	b3 e0       	ldi	r27, 0x03	; 3
 d42:	0f d0       	rcall	.+30     	; 0xd62 <__ultoa_invert+0x86>
 d44:	c9 f7       	brne	.-14     	; 0xd38 <__ultoa_invert+0x5c>
 d46:	f6 cf       	rjmp	.-20     	; 0xd34 <__ultoa_invert+0x58>
 d48:	46 2f       	mov	r20, r22
 d4a:	4f 70       	andi	r20, 0x0F	; 15
 d4c:	40 5d       	subi	r20, 0xD0	; 208
 d4e:	4a 33       	cpi	r20, 0x3A	; 58
 d50:	18 f0       	brcs	.+6      	; 0xd58 <__ultoa_invert+0x7c>
 d52:	49 5d       	subi	r20, 0xD9	; 217
 d54:	31 fd       	sbrc	r19, 1
 d56:	40 52       	subi	r20, 0x20	; 32
 d58:	41 93       	st	Z+, r20
 d5a:	02 d0       	rcall	.+4      	; 0xd60 <__ultoa_invert+0x84>
 d5c:	a9 f7       	brne	.-22     	; 0xd48 <__ultoa_invert+0x6c>
 d5e:	ea cf       	rjmp	.-44     	; 0xd34 <__ultoa_invert+0x58>
 d60:	b4 e0       	ldi	r27, 0x04	; 4
 d62:	a6 95       	lsr	r26
 d64:	97 95       	ror	r25
 d66:	87 95       	ror	r24
 d68:	77 95       	ror	r23
 d6a:	67 95       	ror	r22
 d6c:	ba 95       	dec	r27
 d6e:	c9 f7       	brne	.-14     	; 0xd62 <__ultoa_invert+0x86>
 d70:	00 97       	sbiw	r24, 0x00	; 0
 d72:	61 05       	cpc	r22, r1
 d74:	71 05       	cpc	r23, r1
 d76:	08 95       	ret
 d78:	9b 01       	movw	r18, r22
 d7a:	ac 01       	movw	r20, r24
 d7c:	0a 2e       	mov	r0, r26
 d7e:	06 94       	lsr	r0
 d80:	57 95       	ror	r21
 d82:	47 95       	ror	r20
 d84:	37 95       	ror	r19
 d86:	27 95       	ror	r18
 d88:	ba 95       	dec	r27
 d8a:	c9 f7       	brne	.-14     	; 0xd7e <__ultoa_invert+0xa2>
 d8c:	62 0f       	add	r22, r18
 d8e:	73 1f       	adc	r23, r19
 d90:	84 1f       	adc	r24, r20
 d92:	95 1f       	adc	r25, r21
 d94:	a0 1d       	adc	r26, r0
 d96:	08 95       	ret

00000d98 <__prologue_saves__>:
 d98:	2f 92       	push	r2
 d9a:	3f 92       	push	r3
 d9c:	4f 92       	push	r4
 d9e:	5f 92       	push	r5
 da0:	6f 92       	push	r6
 da2:	7f 92       	push	r7
 da4:	8f 92       	push	r8
 da6:	9f 92       	push	r9
 da8:	af 92       	push	r10
 daa:	bf 92       	push	r11
 dac:	cf 92       	push	r12
 dae:	df 92       	push	r13
 db0:	ef 92       	push	r14
 db2:	ff 92       	push	r15
 db4:	0f 93       	push	r16
 db6:	1f 93       	push	r17
 db8:	cf 93       	push	r28
 dba:	df 93       	push	r29
 dbc:	cd b7       	in	r28, 0x3d	; 61
 dbe:	de b7       	in	r29, 0x3e	; 62
 dc0:	ca 1b       	sub	r28, r26
 dc2:	db 0b       	sbc	r29, r27
 dc4:	0f b6       	in	r0, 0x3f	; 63
 dc6:	f8 94       	cli
 dc8:	de bf       	out	0x3e, r29	; 62
 dca:	0f be       	out	0x3f, r0	; 63
 dcc:	cd bf       	out	0x3d, r28	; 61
 dce:	09 94       	ijmp

00000dd0 <__epilogue_restores__>:
 dd0:	2a 88       	ldd	r2, Y+18	; 0x12
 dd2:	39 88       	ldd	r3, Y+17	; 0x11
 dd4:	48 88       	ldd	r4, Y+16	; 0x10
 dd6:	5f 84       	ldd	r5, Y+15	; 0x0f
 dd8:	6e 84       	ldd	r6, Y+14	; 0x0e
 dda:	7d 84       	ldd	r7, Y+13	; 0x0d
 ddc:	8c 84       	ldd	r8, Y+12	; 0x0c
 dde:	9b 84       	ldd	r9, Y+11	; 0x0b
 de0:	aa 84       	ldd	r10, Y+10	; 0x0a
 de2:	b9 84       	ldd	r11, Y+9	; 0x09
 de4:	c8 84       	ldd	r12, Y+8	; 0x08
 de6:	df 80       	ldd	r13, Y+7	; 0x07
 de8:	ee 80       	ldd	r14, Y+6	; 0x06
 dea:	fd 80       	ldd	r15, Y+5	; 0x05
 dec:	0c 81       	ldd	r16, Y+4	; 0x04
 dee:	1b 81       	ldd	r17, Y+3	; 0x03
 df0:	aa 81       	ldd	r26, Y+2	; 0x02
 df2:	b9 81       	ldd	r27, Y+1	; 0x01
 df4:	ce 0f       	add	r28, r30
 df6:	d1 1d       	adc	r29, r1
 df8:	0f b6       	in	r0, 0x3f	; 63
 dfa:	f8 94       	cli
 dfc:	de bf       	out	0x3e, r29	; 62
 dfe:	0f be       	out	0x3f, r0	; 63
 e00:	cd bf       	out	0x3d, r28	; 61
 e02:	ed 01       	movw	r28, r26
 e04:	08 95       	ret

00000e06 <_exit>:
 e06:	f8 94       	cli

00000e08 <__stop_program>:
 e08:	ff cf       	rjmp	.-2      	; 0xe08 <__stop_program>
