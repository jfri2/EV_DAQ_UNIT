
EV_DAQ_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  000010dc  00001170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  0080014e  0080014e  000011be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001799  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1a  00000000  00000000  00002b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000848  00000000  00000000  0000359f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  00003de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005af  00000000  00000000  000041dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f74  00000000  00000000  0000478b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000056ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 a6 03 	jmp	0x74c	; 0x74c <__vector_11>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	11 e0       	ldi	r17, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ec ed       	ldi	r30, 0xDC	; 220
      c8:	f0 e1       	ldi	r31, 0x10	; 16
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	ae 34       	cpi	r26, 0x4E	; 78
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	ae e4       	ldi	r26, 0x4E	; 78
      da:	b1 e0       	ldi	r27, 0x01	; 1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a3 3d       	cpi	r26, 0xD3	; 211
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 c6 02 	call	0x58c	; 0x58c <main>
      ea:	0c 94 6c 08 	jmp	0x10d8	; 0x10d8 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <adc_init>:
* @param[in] adc_div          ADC prescalar (clock divider)
* @param[in] adc_ref          ADC reference selection
* @return void
*/
void adc_init(uint8_t adc_dig_disable, uint8_t adc_div, uint8_t adc_ref) {
    DIDR0 = adc_dig_disable;    // Disable digital input buffer (saves power and causes PIN to always read 0)         
      f2:	80 93 7e 00 	sts	0x007E, r24
    ADMUX |= (adc_ref & 0b11000000);    // Set analog reference source
      f6:	ec e7       	ldi	r30, 0x7C	; 124
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	40 7c       	andi	r20, 0xC0	; 192
      fe:	48 2b       	or	r20, r24
     100:	40 83       	st	Z, r20
    ADCSRA = ((1<<ADEN) | (adc_div & 0b00000111));   // Enable ADC and set proper prescale
     102:	67 70       	andi	r22, 0x07	; 7
     104:	60 68       	ori	r22, 0x80	; 128
     106:	60 93 7a 00 	sts	0x007A, r22
     10a:	08 95       	ret

0000010c <adc_read_one>:
*/
uint16_t adc_read_one(uint8_t adc_mux) {
    uint16_t adc_val = 0;
    static uint8_t adc_last_adcmux;     // Holds adc_mux value from previous function call
    
    if(adc_last_adcmux != adc_mux) {    // Check if sequential function calls use same ADC channel
     10c:	88 23       	and	r24, r24
     10e:	81 f0       	breq	.+32     	; 0x130 <adc_read_one+0x24>
        ADMUX |= adc_mux;    // Set new ADMUX value
     110:	ec e7       	ldi	r30, 0x7C	; 124
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	90 81       	ld	r25, Z
     116:	89 2b       	or	r24, r25
     118:	80 83       	st	Z, r24
     11a:	93 e0       	ldi	r25, 0x03	; 3
        for(uint8_t i=0; i < ADC_BAD_CONVERSIONS; i++) {
            /* Throw out first few conversions */
            ADCSRA |= (1<<ADSC);    // start ADC conversion.
     11c:	ea e7       	ldi	r30, 0x7A	; 122
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	80 64       	ori	r24, 0x40	; 64
     124:	80 83       	st	Z, r24
            while(ADCSRA & (1<<ADSC)); // wait for conversion complete
     126:	80 81       	ld	r24, Z
     128:	86 fd       	sbrc	r24, 6
     12a:	fd cf       	rjmp	.-6      	; 0x126 <adc_read_one+0x1a>
     12c:	91 50       	subi	r25, 0x01	; 1
    uint16_t adc_val = 0;
    static uint8_t adc_last_adcmux;     // Holds adc_mux value from previous function call
    
    if(adc_last_adcmux != adc_mux) {    // Check if sequential function calls use same ADC channel
        ADMUX |= adc_mux;    // Set new ADMUX value
        for(uint8_t i=0; i < ADC_BAD_CONVERSIONS; i++) {
     12e:	c1 f7       	brne	.-16     	; 0x120 <adc_read_one+0x14>
            ADCSRA |= (1<<ADSC);    // start ADC conversion.
            while(ADCSRA & (1<<ADSC)); // wait for conversion complete
        }
    }
    
    ADCSRA |= (1<<ADSC);   // Start ADC conversion
     130:	ea e7       	ldi	r30, 0x7A	; 122
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	80 81       	ld	r24, Z
     136:	80 64       	ori	r24, 0x40	; 64
     138:	80 83       	st	Z, r24
    while(ADCSRA & (1<<ADSC));  // Wait until conversion is complete (13 adc clock cycles)
     13a:	80 81       	ld	r24, Z
     13c:	86 fd       	sbrc	r24, 6
     13e:	fd cf       	rjmp	.-6      	; 0x13a <adc_read_one+0x2e>
    adc_val = ADC;         // Read & store adc result
     140:	80 91 78 00 	lds	r24, 0x0078
     144:	90 91 79 00 	lds	r25, 0x0079
    
    return(adc_val);
}
     148:	08 95       	ret

0000014a <adc_read>:
* @param[in] adc_mux    ADC channel to read
* @param[in] *adc_val   Pointer to location to store data read from ADC
* @param[in] *adc_val_len   Length of adc_val (number of reads to perform)
* @return void
*/
void adc_read(uint8_t adc_mux, uint16_t *adc_val, uint16_t adc_val_len) {
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
    for(uint16_t i=0; i < adc_val_len; i++) {
     158:	41 15       	cp	r20, r1
     15a:	51 05       	cpc	r21, r1
     15c:	89 f0       	breq	.+34     	; 0x180 <adc_read+0x36>
     15e:	7a 01       	movw	r14, r20
     160:	d8 2e       	mov	r13, r24
     162:	06 2f       	mov	r16, r22
     164:	17 2f       	mov	r17, r23
     166:	c0 e0       	ldi	r28, 0x00	; 0
     168:	d0 e0       	ldi	r29, 0x00	; 0
        adc_val[i] = adc_read_one(adc_mux);
     16a:	8d 2d       	mov	r24, r13
     16c:	0e 94 86 00 	call	0x10c	; 0x10c <adc_read_one>
     170:	f8 01       	movw	r30, r16
     172:	81 93       	st	Z+, r24
     174:	91 93       	st	Z+, r25
     176:	8f 01       	movw	r16, r30
* @param[in] *adc_val   Pointer to location to store data read from ADC
* @param[in] *adc_val_len   Length of adc_val (number of reads to perform)
* @return void
*/
void adc_read(uint8_t adc_mux, uint16_t *adc_val, uint16_t adc_val_len) {
    for(uint16_t i=0; i < adc_val_len; i++) {
     178:	21 96       	adiw	r28, 0x01	; 1
     17a:	ce 15       	cp	r28, r14
     17c:	df 05       	cpc	r29, r15
     17e:	a9 f7       	brne	.-22     	; 0x16a <adc_read+0x20>
        adc_val[i] = adc_read_one(adc_mux);
    }
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	1f 91       	pop	r17
     186:	0f 91       	pop	r16
     188:	ff 90       	pop	r15
     18a:	ef 90       	pop	r14
     18c:	df 90       	pop	r13
     18e:	08 95       	ret

00000190 <data_insertion_sort_uint16>:
* @brief Insertion sort for uint16 array where max length is 65535 (2^16-1)
* @param[in] uint16_t *data     Pointer to array that contains data to average
* @param[in] uint16_t data_len  Length of data array
* @return void
*/
void data_insertion_sort_uint16(uint16_t *data, uint16_t data_len) {
     190:	8f 92       	push	r8
     192:	9f 92       	push	r9
     194:	af 92       	push	r10
     196:	bf 92       	push	r11
     198:	cf 92       	push	r12
     19a:	df 92       	push	r13
     19c:	ef 92       	push	r14
     19e:	ff 92       	push	r15
     1a0:	0f 93       	push	r16
     1a2:	1f 93       	push	r17
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
    uint16_t i = 0;
    int32_t j = 0;
    uint16_t temp = 0;

    for(i=1; i < data_len; i++) {
     1a8:	62 30       	cpi	r22, 0x02	; 2
     1aa:	71 05       	cpc	r23, r1
     1ac:	b8 f1       	brcs	.+110    	; 0x21c <data_insertion_sort_uint16+0x8c>
     1ae:	8c 01       	movw	r16, r24
     1b0:	0e 5f       	subi	r16, 0xFE	; 254
     1b2:	1f 4f       	sbci	r17, 0xFF	; 255
     1b4:	ec 01       	movw	r28, r24
     1b6:	81 2c       	mov	r8, r1
     1b8:	91 2c       	mov	r9, r1
     1ba:	54 01       	movw	r10, r8
        temp = data[i];
     1bc:	f8 01       	movw	r30, r16
     1be:	41 91       	ld	r20, Z+
     1c0:	51 91       	ld	r21, Z+
     1c2:	8f 01       	movw	r16, r30
        j = i - 1;
     1c4:	75 01       	movw	r14, r10
     1c6:	64 01       	movw	r12, r8
        while((temp < data[j]) && (j >= 0)) {
     1c8:	28 81       	ld	r18, Y
     1ca:	39 81       	ldd	r19, Y+1	; 0x01
     1cc:	42 17       	cp	r20, r18
     1ce:	53 07       	cpc	r21, r19
     1d0:	78 f4       	brcc	.+30     	; 0x1f0 <data_insertion_sort_uint16+0x60>
     1d2:	de 01       	movw	r26, r28
            data[j+1] = data[j];
     1d4:	32 93       	st	-Z, r19
     1d6:	22 93       	st	-Z, r18
            j = j - 1;
     1d8:	21 e0       	ldi	r18, 0x01	; 1
     1da:	c2 1a       	sub	r12, r18
     1dc:	d1 08       	sbc	r13, r1
     1de:	e1 08       	sbc	r14, r1
     1e0:	f1 08       	sbc	r15, r1
    uint16_t temp = 0;

    for(i=1; i < data_len; i++) {
        temp = data[i];
        j = i - 1;
        while((temp < data[j]) && (j >= 0)) {
     1e2:	3e 91       	ld	r19, -X
     1e4:	2e 91       	ld	r18, -X
     1e6:	42 17       	cp	r20, r18
     1e8:	53 07       	cpc	r21, r19
     1ea:	10 f4       	brcc	.+4      	; 0x1f0 <data_insertion_sort_uint16+0x60>
     1ec:	ff 20       	and	r15, r15
     1ee:	94 f7       	brge	.-28     	; 0x1d4 <data_insertion_sort_uint16+0x44>
            data[j+1] = data[j];
            j = j - 1;
        }
        data[j+1] = temp;
     1f0:	ef ef       	ldi	r30, 0xFF	; 255
     1f2:	ce 1a       	sub	r12, r30
     1f4:	de 0a       	sbc	r13, r30
     1f6:	cc 0c       	add	r12, r12
     1f8:	dd 1c       	adc	r13, r13
     1fa:	fc 01       	movw	r30, r24
     1fc:	ec 0d       	add	r30, r12
     1fe:	fd 1d       	adc	r31, r13
     200:	51 83       	std	Z+1, r21	; 0x01
     202:	40 83       	st	Z, r20
     204:	22 96       	adiw	r28, 0x02	; 2
     206:	ff ef       	ldi	r31, 0xFF	; 255
     208:	8f 1a       	sub	r8, r31
     20a:	9f 0a       	sbc	r9, r31
     20c:	af 0a       	sbc	r10, r31
     20e:	bf 0a       	sbc	r11, r31
     210:	94 01       	movw	r18, r8
     212:	2f 5f       	subi	r18, 0xFF	; 255
     214:	3f 4f       	sbci	r19, 0xFF	; 255
void data_insertion_sort_uint16(uint16_t *data, uint16_t data_len) {
    uint16_t i = 0;
    int32_t j = 0;
    uint16_t temp = 0;

    for(i=1; i < data_len; i++) {
     216:	26 17       	cp	r18, r22
     218:	37 07       	cpc	r19, r23
     21a:	80 f2       	brcs	.-96     	; 0x1bc <data_insertion_sort_uint16+0x2c>
            data[j+1] = data[j];
            j = j - 1;
        }
        data[j+1] = temp;
    }
}
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	1f 91       	pop	r17
     222:	0f 91       	pop	r16
     224:	ff 90       	pop	r15
     226:	ef 90       	pop	r14
     228:	df 90       	pop	r13
     22a:	cf 90       	pop	r12
     22c:	bf 90       	pop	r11
     22e:	af 90       	pop	r10
     230:	9f 90       	pop	r9
     232:	8f 90       	pop	r8
     234:	08 95       	ret

00000236 <data_2n_average_uint16>:
* @brief Average a uint16 array of 2^n length where max length is 65535 (2^16-1)
* @param[in] uint16_t *data     Pointer to array that contains data to average
* @param[in] uint16_t data_len  Length of data array
* @return uint16_t   Data average over entire array length. Returns 0xFFFF if array is not power of 2. 
*/
uint16_t data_2n_average_uint16(uint16_t *data, uint16_t data_len) {
     236:	db 01       	movw	r26, r22
    uint16_t pow2_val = 1;              // Power of two to check length of array and calculate dividing factor
    uint8_t pow2_div = 0;               // Power of two divider
    uint16_t pow2_max_val = 0xFFFF;     // Maximum value for an 16-bit unsigned integer
    
    /* Check to see how long it is */
    if(data_len <= 1) { 
     238:	62 30       	cpi	r22, 0x02	; 2
     23a:	71 05       	cpc	r23, r1
     23c:	30 f0       	brcs	.+12     	; 0x24a <data_2n_average_uint16+0x14>
        return(data[0]); // Break from function if not more than one data point 
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
     23e:	10 97       	sbiw	r26, 0x00	; 0
     240:	41 f4       	brne	.+16     	; 0x252 <data_2n_average_uint16+0x1c>
     242:	40 e0       	ldi	r20, 0x00	; 0
     244:	50 e0       	ldi	r21, 0x00	; 0
     246:	ba 01       	movw	r22, r20
     248:	2c c0       	rjmp	.+88     	; 0x2a2 <data_2n_average_uint16+0x6c>
    uint8_t pow2_div = 0;               // Power of two divider
    uint16_t pow2_max_val = 0xFFFF;     // Maximum value for an 16-bit unsigned integer
    
    /* Check to see how long it is */
    if(data_len <= 1) { 
        return(data[0]); // Break from function if not more than one data point 
     24a:	fc 01       	movw	r30, r24
     24c:	80 81       	ld	r24, Z
     24e:	91 81       	ldd	r25, Z+1	; 0x01
     250:	08 95       	ret
     252:	fc 01       	movw	r30, r24
     254:	9b 01       	movw	r18, r22
     256:	22 0f       	add	r18, r18
     258:	33 1f       	adc	r19, r19
     25a:	82 0f       	add	r24, r18
     25c:	93 1f       	adc	r25, r19
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	ba 01       	movw	r22, r20
        avg_acc += data[i];
     264:	21 91       	ld	r18, Z+
     266:	31 91       	ld	r19, Z+
     268:	42 0f       	add	r20, r18
     26a:	53 1f       	adc	r21, r19
     26c:	61 1d       	adc	r22, r1
     26e:	71 1d       	adc	r23, r1
    if(data_len <= 1) { 
        return(data[0]); // Break from function if not more than one data point 
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
     270:	e8 17       	cp	r30, r24
     272:	f9 07       	cpc	r31, r25
     274:	b9 f7       	brne	.-18     	; 0x264 <data_2n_average_uint16+0x2e>
     276:	15 c0       	rjmp	.+42     	; 0x2a2 <data_2n_average_uint16+0x6c>
        avg_acc += data[i];
    }
    
    /* Find power2_div where 2^power2_div is length of array */
    while((pow2_val < data_len) && (pow2_val <= pow2_max_val)) {
        pow2_val *= 2;  // Increment pow2_val by next power of 2
     278:	22 0f       	add	r18, r18
     27a:	33 1f       	adc	r19, r19
        pow2_div++;     // Increment divider by one
     27c:	8f 5f       	subi	r24, 0xFF	; 255
    for(uint16_t i = 0; i < data_len; i++) {
        avg_acc += data[i];
    }
    
    /* Find power2_div where 2^power2_div is length of array */
    while((pow2_val < data_len) && (pow2_val <= pow2_max_val)) {
     27e:	2a 17       	cp	r18, r26
     280:	3b 07       	cpc	r19, r27
     282:	d0 f3       	brcs	.-12     	; 0x278 <data_2n_average_uint16+0x42>
        pow2_val *= 2;  // Increment pow2_val by next power of 2
        pow2_div++;     // Increment divider by one
    }
    
    /* Break from function and return 0xFFFF if array is actually not a power of 2 */
    if(pow2_val != data_len) {
     284:	2a 17       	cp	r18, r26
     286:	3b 07       	cpc	r19, r27
     288:	49 f4       	brne	.+18     	; 0x29c <data_2n_average_uint16+0x66>
        return(0xFFFF);
    }

    /* Average and return accumulated value */
    return((uint16_t)(avg_acc >> pow2_div));
     28a:	04 c0       	rjmp	.+8      	; 0x294 <data_2n_average_uint16+0x5e>
     28c:	76 95       	lsr	r23
     28e:	67 95       	ror	r22
     290:	57 95       	ror	r21
     292:	47 95       	ror	r20
     294:	8a 95       	dec	r24
     296:	d2 f7       	brpl	.-12     	; 0x28c <data_2n_average_uint16+0x56>
     298:	ca 01       	movw	r24, r20
     29a:	08 95       	ret
        pow2_div++;     // Increment divider by one
    }
    
    /* Break from function and return 0xFFFF if array is actually not a power of 2 */
    if(pow2_val != data_len) {
        return(0xFFFF);
     29c:	8f ef       	ldi	r24, 0xFF	; 255
     29e:	9f ef       	ldi	r25, 0xFF	; 255
     2a0:	08 95       	ret
    if(data_len <= 1) { 
        return(data[0]); // Break from function if not more than one data point 
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	21 e0       	ldi	r18, 0x01	; 1
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	e7 cf       	rjmp	.-50     	; 0x278 <data_2n_average_uint16+0x42>

000002aa <data_trim_uint16>:
* @param[in] uint16_t trim_val      Amount to trim from both sides of array (ex. 2 will eliminate data_from[0, 1] and data_to[n, n-1])
* @return void
*/
// TODO: test this function. trim_val in the for loop may need to be altered
void data_trim_uint16(uint16_t *data_from, uint16_t *data_to, uint16_t raw_len, uint16_t trim_val) {
    for(uint16_t i=trim_val; i < (raw_len - trim_val); i++) {
     2aa:	42 1b       	sub	r20, r18
     2ac:	53 0b       	sbc	r21, r19
     2ae:	24 17       	cp	r18, r20
     2b0:	35 07       	cpc	r19, r21
     2b2:	98 f4       	brcc	.+38     	; 0x2da <data_trim_uint16+0x30>
     2b4:	22 0f       	add	r18, r18
     2b6:	33 1f       	adc	r19, r19
     2b8:	fc 01       	movw	r30, r24
     2ba:	e2 0f       	add	r30, r18
     2bc:	f3 1f       	adc	r31, r19
     2be:	db 01       	movw	r26, r22
     2c0:	a2 0f       	add	r26, r18
     2c2:	b3 1f       	adc	r27, r19
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	84 0f       	add	r24, r20
     2ca:	95 1f       	adc	r25, r21
        data_to[i] = data_from[i];
     2cc:	21 91       	ld	r18, Z+
     2ce:	31 91       	ld	r19, Z+
     2d0:	2d 93       	st	X+, r18
     2d2:	3d 93       	st	X+, r19
* @param[in] uint16_t trim_val      Amount to trim from both sides of array (ex. 2 will eliminate data_from[0, 1] and data_to[n, n-1])
* @return void
*/
// TODO: test this function. trim_val in the for loop may need to be altered
void data_trim_uint16(uint16_t *data_from, uint16_t *data_to, uint16_t raw_len, uint16_t trim_val) {
    for(uint16_t i=trim_val; i < (raw_len - trim_val); i++) {
     2d4:	e8 17       	cp	r30, r24
     2d6:	f9 07       	cpc	r31, r25
     2d8:	c9 f7       	brne	.-14     	; 0x2cc <data_trim_uint16+0x22>
     2da:	08 95       	ret

000002dc <gpio_init>:
* @brief Initialize GPIO for EV DAQ UNIT project
* @return void
*/
void gpio_init(void) {
    /* Setup Switches */
    clrbits(SW_DDR, ((1<<SW1)|(1<<SW2))); // Set switches to input
     2dc:	84 b1       	in	r24, 0x04	; 4
     2de:	8c 7f       	andi	r24, 0xFC	; 252
     2e0:	84 b9       	out	0x04, r24	; 4
    sbits(SW_PORT, ((1<<SW1)|(1<<SW2)));  // Turn on pullups on switches
     2e2:	85 b1       	in	r24, 0x05	; 5
     2e4:	83 60       	ori	r24, 0x03	; 3
     2e6:	85 b9       	out	0x05, r24	; 5
    
    /* Setup LEDs */
    sbits(LED_DDR, ((1<<LED_RED)|(1<<LED_YLW)));  // LEDs as output
     2e8:	8a b1       	in	r24, 0x0a	; 10
     2ea:	80 6c       	ori	r24, 0xC0	; 192
     2ec:	8a b9       	out	0x0a, r24	; 10
    
    /* Setup LCD /RST */
    sbit(LCD_RST_DDR, LCD_RST);     // Set LCD_RST to output
     2ee:	22 9a       	sbi	0x04, 2	; 4
    sbit(LCD_RST_PORT, LCD_RST);    // Drive LCD_RST high    
     2f0:	2a 9a       	sbi	0x05, 2	; 5
     2f2:	08 95       	ret

000002f4 <i2c1_init>:
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return uint8_t   Division factor
*/
uint8_t i2c_calc_br_div(uint32_t cpu_freq, uint32_t i2c_freq) {
    return((uint8_t)(((cpu_freq/i2c_freq) - 16)>>1));
     2f4:	0e 94 72 05 	call	0xae4	; 0xae4 <__udivmodsi4>
     2f8:	da 01       	movw	r26, r20
     2fa:	c9 01       	movw	r24, r18
     2fc:	40 97       	sbiw	r24, 0x10	; 16
     2fe:	a1 09       	sbc	r26, r1
     300:	b1 09       	sbc	r27, r1
     302:	b6 95       	lsr	r27
     304:	a7 95       	ror	r26
     306:	97 95       	ror	r25
     308:	87 95       	ror	r24
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return void
*/
void i2c1_init(uint32_t cpu_freq, uint32_t i2c_freq) {
    TWBR1 = i2c_calc_br_div(cpu_freq, i2c_freq);   // Set I2C SCL to correct value
     30a:	80 93 d8 00 	sts	0x00D8, r24
    TWCR1 |= (1<<TWIE); // Enable TWI interrupt
     30e:	ec ed       	ldi	r30, 0xDC	; 220
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	81 60       	ori	r24, 0x01	; 1
     316:	80 83       	st	Z, r24
     318:	08 95       	ret

0000031a <i2c1_tx>:
* @brief Start I2C master tx event
* @param[in] i2c_event   Type of I2C event
* @return uint8_t I2C status register
*/
uint8_t i2c1_tx(uint8_t i2c_event) {
    switch(i2c_event) {
     31a:	81 30       	cpi	r24, 0x01	; 1
     31c:	69 f0       	breq	.+26     	; 0x338 <i2c1_tx+0x1e>
     31e:	18 f0       	brcs	.+6      	; 0x326 <i2c1_tx+0xc>
     320:	82 30       	cpi	r24, 0x02	; 2
     322:	99 f0       	breq	.+38     	; 0x34a <i2c1_tx+0x30>
     324:	1a c0       	rjmp	.+52     	; 0x35a <i2c1_tx+0x40>
        case I2C_START:
            TWCR1 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);    // Tx start condition
     326:	84 ea       	ldi	r24, 0xA4	; 164
     328:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWINT))); // Wait for current request to process            
     32c:	ec ed       	ldi	r30, 0xDC	; 220
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	80 81       	ld	r24, Z
     332:	88 23       	and	r24, r24
     334:	ec f7       	brge	.-6      	; 0x330 <i2c1_tx+0x16>
     336:	11 c0       	rjmp	.+34     	; 0x35a <i2c1_tx+0x40>
            break;
        case I2C_DATA:
            TWCR1 = (1<<TWINT) | (1<<TWEN);                 // Tx data
     338:	84 e8       	ldi	r24, 0x84	; 132
     33a:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWINT))); // Wait for current request to process
     33e:	ec ed       	ldi	r30, 0xDC	; 220
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	88 23       	and	r24, r24
     346:	ec f7       	brge	.-6      	; 0x342 <i2c1_tx+0x28>
     348:	08 c0       	rjmp	.+16     	; 0x35a <i2c1_tx+0x40>
            break;
        case I2C_STOP:
            TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);    // Tx stop condition
     34a:	84 e9       	ldi	r24, 0x94	; 148
     34c:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWSTO))); // Wait for current request to process
     350:	ec ed       	ldi	r30, 0xDC	; 220
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	84 ff       	sbrs	r24, 4
     358:	fd cf       	rjmp	.-6      	; 0x354 <i2c1_tx+0x3a>
            break;
    }
    return(TWSR1 & I2C_STATUS_REG_MASK);     // Return only status bits in status reg
     35a:	80 91 d9 00 	lds	r24, 0x00D9
}
     35e:	88 7f       	andi	r24, 0xF8	; 248
     360:	08 95       	ret

00000362 <lcd_write>:
* @param uint8_t cmd_data       0 to send command, others to send data
* @param uint8_t *data          Pointer to data array to send.
* @param uint16_t num_bytes     Length of data to send.
* @return void
*/
void lcd_write(uint8_t cmd_data, uint8_t *data, uint16_t num_bytes) {
     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	c8 2f       	mov	r28, r24
     370:	7b 01       	movw	r14, r22
     372:	8a 01       	movw	r16, r20
    i2c1_tx(I2C_START);     // Send start condition
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c1_tx>
    TWDR1 = LCD_I2C_ADDR;   // Set Slave Addr
     37a:	8c e7       	ldi	r24, 0x7C	; 124
     37c:	80 93 db 00 	sts	0x00DB, r24
    i2c1_tx(I2C_DATA);      // Send Slave Addr
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c1_tx>
    
    if(cmd_data == LCD_CMD) {
     386:	c1 11       	cpse	r28, r1
     388:	06 c0       	rjmp	.+12     	; 0x396 <lcd_write+0x34>
        TWDR1 = LCD_CMD;    // Load "Command" byte for LCD
     38a:	10 92 db 00 	sts	0x00DB, r1
        i2c1_tx(I2C_DATA);  // Send "Command" byte
     38e:	81 e0       	ldi	r24, 0x01	; 1
     390:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c1_tx>
     394:	06 c0       	rjmp	.+12     	; 0x3a2 <lcd_write+0x40>
    } else {
        TWDR1 = LCD_DATA;   // Load "Data" byte for LCD
     396:	80 e4       	ldi	r24, 0x40	; 64
     398:	80 93 db 00 	sts	0x00DB, r24
        i2c1_tx(I2C_DATA);  // Send "Data" byte
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c1_tx>
    }
    
    for(uint16_t i=0; i<num_bytes; i++) {   // Send bytes
     3a2:	01 15       	cp	r16, r1
     3a4:	11 05       	cpc	r17, r1
     3a6:	89 f0       	breq	.+34     	; 0x3ca <lcd_write+0x68>
     3a8:	e7 01       	movw	r28, r14
     3aa:	0e 0d       	add	r16, r14
     3ac:	1f 1d       	adc	r17, r15
        TWDR1 = data[i];
     3ae:	0f 2e       	mov	r0, r31
     3b0:	fb ed       	ldi	r31, 0xDB	; 219
     3b2:	ef 2e       	mov	r14, r31
     3b4:	f1 2c       	mov	r15, r1
     3b6:	f0 2d       	mov	r31, r0
     3b8:	89 91       	ld	r24, Y+
     3ba:	f7 01       	movw	r30, r14
     3bc:	80 83       	st	Z, r24
        i2c1_tx(I2C_DATA);
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c1_tx>
    } else {
        TWDR1 = LCD_DATA;   // Load "Data" byte for LCD
        i2c1_tx(I2C_DATA);  // Send "Data" byte
    }
    
    for(uint16_t i=0; i<num_bytes; i++) {   // Send bytes
     3c4:	c0 17       	cp	r28, r16
     3c6:	d1 07       	cpc	r29, r17
     3c8:	b9 f7       	brne	.-18     	; 0x3b8 <lcd_write+0x56>
        TWDR1 = data[i];
        i2c1_tx(I2C_DATA);
    }
    
    i2c1_tx(I2C_STOP);  // Send stop condition
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	0e 94 8d 01 	call	0x31a	; 0x31a <i2c1_tx>
}
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	08 95       	ret

000003de <lcd_set_line1>:

/*!
* @brief Set cursor to LCD line 1
* @return void
*/
void lcd_set_line1() {
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	1f 92       	push	r1
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
    uint8_t lcd_line1[1] = {LCD_LINE1};
     3e8:	80 e8       	ldi	r24, 0x80	; 128
     3ea:	89 83       	std	Y+1, r24	; 0x01
        lcd_write(LCD_CMD, lcd_line1, 1);
     3ec:	41 e0       	ldi	r20, 0x01	; 1
     3ee:	50 e0       	ldi	r21, 0x00	; 0
     3f0:	be 01       	movw	r22, r28
     3f2:	6f 5f       	subi	r22, 0xFF	; 255
     3f4:	7f 4f       	sbci	r23, 0xFF	; 255
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
        delay(10);
     3fc:	8a e0       	ldi	r24, 0x0A	; 10
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 27 04 	call	0x84e	; 0x84e <delay>
}
     404:	0f 90       	pop	r0
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <lcd_set_line2>:

/*!
* @brief Set cursor to LCD line 2
* @return void
*/
void lcd_set_line2() {
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
     410:	1f 92       	push	r1
     412:	cd b7       	in	r28, 0x3d	; 61
     414:	de b7       	in	r29, 0x3e	; 62
    uint8_t lcd_line2[1] = {LCD_LINE2};
     416:	80 ec       	ldi	r24, 0xC0	; 192
     418:	89 83       	std	Y+1, r24	; 0x01
    lcd_write(LCD_CMD, lcd_line2, 1);
     41a:	41 e0       	ldi	r20, 0x01	; 1
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	be 01       	movw	r22, r28
     420:	6f 5f       	subi	r22, 0xFF	; 255
     422:	7f 4f       	sbci	r23, 0xFF	; 255
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    delay(10);
     42a:	8a e0       	ldi	r24, 0x0A	; 10
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 27 04 	call	0x84e	; 0x84e <delay>
}
     432:	0f 90       	pop	r0
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <lcd_init>:

/*!
* @brief Initialize LCD
* @return void
*/
void lcd_init(void) {
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	aa 97       	sbiw	r28, 0x2a	; 42
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
    uint8_t lcd_config_1[1] = {0x38};
     44e:	88 e3       	ldi	r24, 0x38	; 56
     450:	89 83       	std	Y+1, r24	; 0x01
    uint8_t lcd_config_2[1] = {0x39};
     452:	89 e3       	ldi	r24, 0x39	; 57
     454:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t lcd_config_3[7] = {0x14, 0x78, 0x5E, 0x6D, 0x0C, 0x01, 0x06};
     456:	87 e0       	ldi	r24, 0x07	; 7
     458:	e0 e0       	ldi	r30, 0x00	; 0
     45a:	f1 e0       	ldi	r31, 0x01	; 1
     45c:	de 01       	movw	r26, r28
     45e:	13 96       	adiw	r26, 0x03	; 3
     460:	01 90       	ld	r0, Z+
     462:	0d 92       	st	X+, r0
     464:	8a 95       	dec	r24
     466:	e1 f7       	brne	.-8      	; 0x460 <lcd_init+0x26>
    uint8_t lcd_config_4[1] = {0x70};     // Set contrast 
     468:	80 e7       	ldi	r24, 0x70	; 112
     46a:	8a 87       	std	Y+10, r24	; 0x0a
                                
    uint8_t lcd_init_str1[16] = "EV DAQ UNIT v0.1";
     46c:	80 e1       	ldi	r24, 0x10	; 16
     46e:	e7 e0       	ldi	r30, 0x07	; 7
     470:	f1 e0       	ldi	r31, 0x01	; 1
     472:	de 01       	movw	r26, r28
     474:	1b 96       	adiw	r26, 0x0b	; 11
     476:	01 90       	ld	r0, Z+
     478:	0d 92       	st	X+, r0
     47a:	8a 95       	dec	r24
     47c:	e1 f7       	brne	.-8      	; 0x476 <lcd_init+0x3c>
    uint8_t lcd_init_str2[16] = "github.com/jfri2";
     47e:	80 e1       	ldi	r24, 0x10	; 16
     480:	e8 e1       	ldi	r30, 0x18	; 24
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	de 01       	movw	r26, r28
     486:	5b 96       	adiw	r26, 0x1b	; 27
     488:	01 90       	ld	r0, Z+
     48a:	0d 92       	st	X+, r0
     48c:	8a 95       	dec	r24
     48e:	e1 f7       	brne	.-8      	; 0x488 <lcd_init+0x4e>
    
    /* Reset LCD */
    clrbit(LCD_RST_PORT, LCD_RST);
     490:	2a 98       	cbi	0x05, 2	; 5
    delay(10);
     492:	8a e0       	ldi	r24, 0x0A	; 10
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 27 04 	call	0x84e	; 0x84e <delay>
    sbit(LCD_RST_PORT, LCD_RST);
     49a:	2a 9a       	sbi	0x05, 2	; 5
    delay(10);
     49c:	8a e0       	ldi	r24, 0x0A	; 10
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 27 04 	call	0x84e	; 0x84e <delay>
    
    /* Write Configuration to LCD */
    lcd_write(LCD_CMD, lcd_config_1, 1);
     4a4:	41 e0       	ldi	r20, 0x01	; 1
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	be 01       	movw	r22, r28
     4aa:	6f 5f       	subi	r22, 0xFF	; 255
     4ac:	7f 4f       	sbci	r23, 0xFF	; 255
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    delay(10);
     4b4:	8a e0       	ldi	r24, 0x0A	; 10
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 27 04 	call	0x84e	; 0x84e <delay>
    lcd_write(LCD_CMD, lcd_config_2, 1);
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	be 01       	movw	r22, r28
     4c2:	6e 5f       	subi	r22, 0xFE	; 254
     4c4:	7f 4f       	sbci	r23, 0xFF	; 255
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    delay(10);
     4cc:	8a e0       	ldi	r24, 0x0A	; 10
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 27 04 	call	0x84e	; 0x84e <delay>
    lcd_write(LCD_CMD, lcd_config_3, 7);
     4d4:	47 e0       	ldi	r20, 0x07	; 7
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	be 01       	movw	r22, r28
     4da:	6d 5f       	subi	r22, 0xFD	; 253
     4dc:	7f 4f       	sbci	r23, 0xFF	; 255
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    delay(10);
     4e4:	8a e0       	ldi	r24, 0x0A	; 10
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 27 04 	call	0x84e	; 0x84e <delay>
    lcd_write(LCD_CMD, lcd_config_4, 1);
     4ec:	41 e0       	ldi	r20, 0x01	; 1
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	be 01       	movw	r22, r28
     4f2:	66 5f       	subi	r22, 0xF6	; 246
     4f4:	7f 4f       	sbci	r23, 0xFF	; 255
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    delay(10);    
     4fc:	8a e0       	ldi	r24, 0x0A	; 10
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 27 04 	call	0x84e	; 0x84e <delay>
    
    /* Display Initial Message */
    //lcd_set_line1();
    lcd_write(LCD_DATA, lcd_init_str1, 16);
     504:	40 e1       	ldi	r20, 0x10	; 16
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	be 01       	movw	r22, r28
     50a:	65 5f       	subi	r22, 0xF5	; 245
     50c:	7f 4f       	sbci	r23, 0xFF	; 255
     50e:	80 e4       	ldi	r24, 0x40	; 64
     510:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
    lcd_set_line2();
     514:	0e 94 06 02 	call	0x40c	; 0x40c <lcd_set_line2>
    lcd_write(LCD_DATA, lcd_init_str2, 16);
     518:	40 e1       	ldi	r20, 0x10	; 16
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	be 01       	movw	r22, r28
     51e:	65 5e       	subi	r22, 0xE5	; 229
     520:	7f 4f       	sbci	r23, 0xFF	; 255
     522:	80 e4       	ldi	r24, 0x40	; 64
     524:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
}
     528:	aa 96       	adiw	r28, 0x2a	; 42
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
     534:	df 91       	pop	r29
     536:	cf 91       	pop	r28
     538:	08 95       	ret

0000053a <lc_get>:
uint16_t lc_get(uint8_t lc_adc_mux) {
    // Local variables
    static uint16_t lc_raw[LC_RAW_LEN] = {0};       // Stores raw values read from ADC
    static uint16_t lc_trim[LC_TRIM_LEN] = {0};     // Stores trimmed values read from ADC
    
    adc_read(lc_adc_mux, lc_raw, LC_RAW_LEN);               // Get LC_RAW_LEN values from ADC
     53a:	44 e1       	ldi	r20, 0x14	; 20
     53c:	50 e0       	ldi	r21, 0x00	; 0
     53e:	6e e6       	ldi	r22, 0x6E	; 110
     540:	71 e0       	ldi	r23, 0x01	; 1
     542:	0e 94 a5 00 	call	0x14a	; 0x14a <adc_read>
    data_insertion_sort_uint16(lc_raw, LC_RAW_LEN);    // Sort raw values from lowest to highest
     546:	64 e1       	ldi	r22, 0x14	; 20
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	8e e6       	ldi	r24, 0x6E	; 110
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 c8 00 	call	0x190	; 0x190 <data_insertion_sort_uint16>
    data_trim_uint16(lc_raw, lc_trim, LC_RAW_LEN, LC_TRIM_VAL);     // Eliminate 2 highest and 2 lowest values in array
     552:	22 e0       	ldi	r18, 0x02	; 2
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	44 e1       	ldi	r20, 0x14	; 20
     558:	50 e0       	ldi	r21, 0x00	; 0
     55a:	6e e4       	ldi	r22, 0x4E	; 78
     55c:	71 e0       	ldi	r23, 0x01	; 1
     55e:	8e e6       	ldi	r24, 0x6E	; 110
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	0e 94 55 01 	call	0x2aa	; 0x2aa <data_trim_uint16>
    return(data_2n_average_uint16(lc_trim, LC_TRIM_LEN));      // Average and return array
     566:	60 e1       	ldi	r22, 0x10	; 16
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	8e e4       	ldi	r24, 0x4E	; 78
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 1b 01 	call	0x236	; 0x236 <data_2n_average_uint16>
}
     572:	08 95       	ret

00000574 <lc_adc2force>:
* @brief Calculate force (Newtons)
* @param[in] float adc_val    10 bit value from ADC
* @return float
*/
float lc_adc2force(uint16_t adc_val) {
    return((float)(adc_val * 0.86879));
     574:	bc 01       	movw	r22, r24
     576:	80 e0       	ldi	r24, 0x00	; 0
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 77 04 	call	0x8ee	; 0x8ee <__floatunsisf>
     57e:	25 e0       	ldi	r18, 0x05	; 5
     580:	39 e6       	ldi	r19, 0x69	; 105
     582:	4e e5       	ldi	r20, 0x5E	; 94
     584:	5f e3       	ldi	r21, 0x3F	; 63
     586:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__mulsf3>
}
     58a:	08 95       	ret

0000058c <main>:
    return(adc_val);
}

int main(void) {
    /* Initialization Routines */
    sei();
     58c:	78 94       	sei
    timer1_1ms_init();
     58e:	0e 94 0b 04 	call	0x816	; 0x816 <timer1_1ms_init>
    gpio_init();
     592:	0e 94 6e 01 	call	0x2dc	; 0x2dc <gpio_init>
    adc_init(ADC_DIG_DIS_LC, ADC_DIV_128, ADC_REF_AREF);  // Currently disables all digital i/o on all ADC pins, set external 3V reference
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	67 e0       	ldi	r22, 0x07	; 7
     59a:	8f ef       	ldi	r24, 0xFF	; 255
     59c:	0e 94 79 00 	call	0xf2	; 0xf2 <adc_init>
    i2c1_init(F_CPU, I2C_SCL_FREQ);
     5a0:	20 e4       	ldi	r18, 0x40	; 64
     5a2:	3d e0       	ldi	r19, 0x0D	; 13
     5a4:	43 e0       	ldi	r20, 0x03	; 3
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	74 e2       	ldi	r23, 0x24	; 36
     5ac:	84 ef       	ldi	r24, 0xF4	; 244
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <i2c1_init>
    lcd_init();
     5b4:	0e 94 1d 02 	call	0x43a	; 0x43a <lcd_init>
    delay(2000);
     5b8:	80 ed       	ldi	r24, 0xD0	; 208
     5ba:	97 e0       	ldi	r25, 0x07	; 7
     5bc:	0e 94 27 04 	call	0x84e	; 0x84e <delay>
        }
                           
        /* Print Force & time values on screen @ one second intervals */            
        if(systck >= (systime_1 + 1000)) {                                
            /* Format to ASCII strings */
            sprintf(adc_str, "Force: %6d mN", milliforce);      // Display Force (milliNewtons)
     5c0:	0f 2e       	mov	r0, r31
     5c2:	f9 e2       	ldi	r31, 0x29	; 41
     5c4:	cf 2e       	mov	r12, r31
     5c6:	f1 e0       	ldi	r31, 0x01	; 1
     5c8:	df 2e       	mov	r13, r31
     5ca:	f0 2d       	mov	r31, r0
     5cc:	03 ec       	ldi	r16, 0xC3	; 195
     5ce:	11 e0       	ldi	r17, 0x01	; 1
            sprintf(time_str, "Time:   %02d:%02d:%02d", systime_h, systime_m, systime_s);   // Display time since last reset (hh:mm:ss)
     5d0:	0f 2e       	mov	r0, r31
     5d2:	f7 e3       	ldi	r31, 0x37	; 55
     5d4:	ef 2e       	mov	r14, r31
     5d6:	f1 e0       	ldi	r31, 0x01	; 1
     5d8:	ff 2e       	mov	r15, r31
     5da:	f0 2d       	mov	r31, r0
     5dc:	c3 eb       	ldi	r28, 0xB3	; 179
     5de:	d1 e0       	ldi	r29, 0x01	; 1
    delay(2000);

    while(1) {
        // Blink LEDs fast while SW2 is pressed 
        while((chkbit(SW_PIN, SW2) == 0)) {
            tbits(LED_PORT, (LED_ALL));
     5e0:	0f 2e       	mov	r0, r31
     5e2:	f0 ec       	ldi	r31, 0xC0	; 192
     5e4:	bf 2e       	mov	r11, r31
     5e6:	f0 2d       	mov	r31, r0
     5e8:	07 c0       	rjmp	.+14     	; 0x5f8 <main+0x6c>
     5ea:	8b b1       	in	r24, 0x0b	; 11
     5ec:	8b 25       	eor	r24, r11
     5ee:	8b b9       	out	0x0b, r24	; 11
            delay(100);
     5f0:	84 e6       	ldi	r24, 0x64	; 100
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	0e 94 27 04 	call	0x84e	; 0x84e <delay>
    lcd_init();
    delay(2000);

    while(1) {
        // Blink LEDs fast while SW2 is pressed 
        while((chkbit(SW_PIN, SW2) == 0)) {
     5f8:	19 9b       	sbis	0x03, 1	; 3
     5fa:	f7 cf       	rjmp	.-18     	; 0x5ea <main+0x5e>
            tbits(LED_PORT, (LED_ALL));
            delay(100);
        }        
            
        /* Get values to display on screen */
        systck_tmp = systck;   // Store current systck value
     5fc:	80 91 af 01 	lds	r24, 0x01AF
     600:	90 91 b0 01 	lds	r25, 0x01B0
     604:	a0 91 b1 01 	lds	r26, 0x01B1
     608:	b0 91 b2 01 	lds	r27, 0x01B2
     60c:	80 93 a2 01 	sts	0x01A2, r24
     610:	90 93 a3 01 	sts	0x01A3, r25
     614:	a0 93 a4 01 	sts	0x01A4, r26
     618:	b0 93 a5 01 	sts	0x01A5, r27
        adc_val = lc_get(ADC_MUX_ADC7);    // Read 40 Hz output from analog front end, 20 samples
     61c:	87 e0       	ldi	r24, 0x07	; 7
     61e:	0e 94 9d 02 	call	0x53a	; 0x53a <lc_get>
     622:	90 93 a7 01 	sts	0x01A7, r25
     626:	80 93 a6 01 	sts	0x01A6, r24
        adc_ms = ((uint16_t)(systck - systck_tmp));  // Save time (in milliseconds) it took to do A/D conversion
     62a:	40 91 af 01 	lds	r20, 0x01AF
     62e:	50 91 b0 01 	lds	r21, 0x01B0
     632:	60 91 b1 01 	lds	r22, 0x01B1
     636:	70 91 b2 01 	lds	r23, 0x01B2
     63a:	40 90 a2 01 	lds	r4, 0x01A2
     63e:	50 90 a3 01 	lds	r5, 0x01A3
     642:	60 90 a4 01 	lds	r6, 0x01A4
     646:	70 90 a5 01 	lds	r7, 0x01A5
     64a:	44 19       	sub	r20, r4
     64c:	55 09       	sbc	r21, r5
     64e:	50 93 a1 01 	sts	0x01A1, r21
     652:	40 93 a0 01 	sts	0x01A0, r20
            
        force = lc_adc2force(adc_val);    // Calculate force (Newtons)
     656:	0e 94 ba 02 	call	0x574	; 0x574 <lc_adc2force>
     65a:	60 93 9c 01 	sts	0x019C, r22
     65e:	70 93 9d 01 	sts	0x019D, r23
     662:	80 93 9e 01 	sts	0x019E, r24
     666:	90 93 9f 01 	sts	0x019F, r25
        milliforce = force * 1000;     
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	4a e7       	ldi	r20, 0x7A	; 122
     670:	54 e4       	ldi	r21, 0x44	; 68
     672:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__mulsf3>
     676:	0e 94 41 04 	call	0x882	; 0x882 <__fixsfsi>
     67a:	70 93 9b 01 	sts	0x019B, r23
     67e:	60 93 9a 01 	sts	0x019A, r22
        
        if(milliforce >= MAX_MILLI_NEWTONS) {
            sbit(LED_PORT, LED_RED);    // Turn on Red LED if overloaded
        } else {
            clrbit(LED_PORT, LED_RED);  // Turn off Red LED if not overloaded
     682:	5e 98       	cbi	0x0b, 6	; 11
        }
                           
        /* Print Force & time values on screen @ one second intervals */            
        if(systck >= (systime_1 + 1000)) {                                
     684:	40 91 af 01 	lds	r20, 0x01AF
     688:	50 91 b0 01 	lds	r21, 0x01B0
     68c:	60 91 b1 01 	lds	r22, 0x01B1
     690:	70 91 b2 01 	lds	r23, 0x01B2
     694:	80 91 96 01 	lds	r24, 0x0196
     698:	90 91 97 01 	lds	r25, 0x0197
     69c:	a0 91 98 01 	lds	r26, 0x0198
     6a0:	b0 91 99 01 	lds	r27, 0x0199
     6a4:	88 51       	subi	r24, 0x18	; 24
     6a6:	9c 4f       	sbci	r25, 0xFC	; 252
     6a8:	af 4f       	sbci	r26, 0xFF	; 255
     6aa:	bf 4f       	sbci	r27, 0xFF	; 255
     6ac:	48 17       	cp	r20, r24
     6ae:	59 07       	cpc	r21, r25
     6b0:	6a 07       	cpc	r22, r26
     6b2:	7b 07       	cpc	r23, r27
     6b4:	08 f4       	brcc	.+2      	; 0x6b8 <main+0x12c>
     6b6:	a0 cf       	rjmp	.-192    	; 0x5f8 <main+0x6c>
            /* Format to ASCII strings */
            sprintf(adc_str, "Force: %6d mN", milliforce);      // Display Force (milliNewtons)
     6b8:	80 91 9b 01 	lds	r24, 0x019B
     6bc:	8f 93       	push	r24
     6be:	80 91 9a 01 	lds	r24, 0x019A
     6c2:	8f 93       	push	r24
     6c4:	df 92       	push	r13
     6c6:	cf 92       	push	r12
     6c8:	1f 93       	push	r17
     6ca:	0f 93       	push	r16
     6cc:	0e 94 94 05 	call	0xb28	; 0xb28 <sprintf>
            sprintf(time_str, "Time:   %02d:%02d:%02d", systime_h, systime_m, systime_s);   // Display time since last reset (hh:mm:ss)
     6d0:	20 91 ac 01 	lds	r18, 0x01AC
     6d4:	90 91 ab 01 	lds	r25, 0x01AB
     6d8:	80 91 aa 01 	lds	r24, 0x01AA
     6dc:	1f 92       	push	r1
     6de:	2f 93       	push	r18
     6e0:	1f 92       	push	r1
     6e2:	9f 93       	push	r25
     6e4:	1f 92       	push	r1
     6e6:	8f 93       	push	r24
     6e8:	ff 92       	push	r15
     6ea:	ef 92       	push	r14
     6ec:	df 93       	push	r29
     6ee:	cf 93       	push	r28
     6f0:	0e 94 94 05 	call	0xb28	; 0xb28 <sprintf>
                        
            tbit(LED_PORT, LED_YLW);        // Toggle Yellow status LED every screen refresh
     6f4:	8b b1       	in	r24, 0x0b	; 11
     6f6:	80 58       	subi	r24, 0x80	; 128
     6f8:	8b b9       	out	0x0b, r24	; 11
            
            lcd_set_line1();
     6fa:	0e 94 ef 01 	call	0x3de	; 0x3de <lcd_set_line1>
            lcd_write(LCD_DATA, adc_str, 16);
     6fe:	40 e1       	ldi	r20, 0x10	; 16
     700:	50 e0       	ldi	r21, 0x00	; 0
     702:	b8 01       	movw	r22, r16
     704:	80 e4       	ldi	r24, 0x40	; 64
     706:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
            lcd_set_line2();
     70a:	0e 94 06 02 	call	0x40c	; 0x40c <lcd_set_line2>
            lcd_write(LCD_DATA, time_str, 16);                
     70e:	40 e1       	ldi	r20, 0x10	; 16
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	be 01       	movw	r22, r28
     714:	80 e4       	ldi	r24, 0x40	; 64
     716:	0e 94 b1 01 	call	0x362	; 0x362 <lcd_write>
            systime_1 = systck;       
     71a:	80 91 af 01 	lds	r24, 0x01AF
     71e:	90 91 b0 01 	lds	r25, 0x01B0
     722:	a0 91 b1 01 	lds	r26, 0x01B1
     726:	b0 91 b2 01 	lds	r27, 0x01B2
     72a:	80 93 96 01 	sts	0x0196, r24
     72e:	90 93 97 01 	sts	0x0197, r25
     732:	a0 93 98 01 	sts	0x0198, r26
     736:	b0 93 99 01 	sts	0x0199, r27
     73a:	8d b7       	in	r24, 0x3d	; 61
     73c:	9e b7       	in	r25, 0x3e	; 62
     73e:	40 96       	adiw	r24, 0x10	; 16
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	9e bf       	out	0x3e, r25	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	8d bf       	out	0x3d, r24	; 61
     74a:	56 cf       	rjmp	.-340    	; 0x5f8 <main+0x6c>

0000074c <__vector_11>:
volatile uint8_t systime_s = 0;
volatile uint8_t systime_m = 0;
volatile uint8_t systime_h = 0;
volatile uint16_t systime_d = 0;

ISR(TIMER1_COMPA_vect) {
     74c:	1f 92       	push	r1
     74e:	0f 92       	push	r0
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	0f 92       	push	r0
     754:	11 24       	eor	r1, r1
     756:	2f 93       	push	r18
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	af 93       	push	r26
     75e:	bf 93       	push	r27
    /* Increment systck global vars to keep system time */
    systck++;
     760:	80 91 af 01 	lds	r24, 0x01AF
     764:	90 91 b0 01 	lds	r25, 0x01B0
     768:	a0 91 b1 01 	lds	r26, 0x01B1
     76c:	b0 91 b2 01 	lds	r27, 0x01B2
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	a1 1d       	adc	r26, r1
     774:	b1 1d       	adc	r27, r1
     776:	80 93 af 01 	sts	0x01AF, r24
     77a:	90 93 b0 01 	sts	0x01B0, r25
     77e:	a0 93 b1 01 	sts	0x01B1, r26
     782:	b0 93 b2 01 	sts	0x01B2, r27
    systime_ms++;
     786:	80 91 ad 01 	lds	r24, 0x01AD
     78a:	90 91 ae 01 	lds	r25, 0x01AE
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	90 93 ae 01 	sts	0x01AE, r25
     794:	80 93 ad 01 	sts	0x01AD, r24
    if(systime_ms >= 1000) {
     798:	80 91 ad 01 	lds	r24, 0x01AD
     79c:	90 91 ae 01 	lds	r25, 0x01AE
     7a0:	88 3e       	cpi	r24, 0xE8	; 232
     7a2:	93 40       	sbci	r25, 0x03	; 3
     7a4:	70 f1       	brcs	.+92     	; 0x802 <__vector_11+0xb6>
        systime_ms = 0;
     7a6:	10 92 ae 01 	sts	0x01AE, r1
     7aa:	10 92 ad 01 	sts	0x01AD, r1
        systime_s++;
     7ae:	80 91 ac 01 	lds	r24, 0x01AC
     7b2:	8f 5f       	subi	r24, 0xFF	; 255
     7b4:	80 93 ac 01 	sts	0x01AC, r24
        if(systime_s >= 60) {
     7b8:	80 91 ac 01 	lds	r24, 0x01AC
     7bc:	8c 33       	cpi	r24, 0x3C	; 60
     7be:	08 f1       	brcs	.+66     	; 0x802 <__vector_11+0xb6>
            systime_s = 0;
     7c0:	10 92 ac 01 	sts	0x01AC, r1
            systime_m++;
     7c4:	80 91 ab 01 	lds	r24, 0x01AB
     7c8:	8f 5f       	subi	r24, 0xFF	; 255
     7ca:	80 93 ab 01 	sts	0x01AB, r24
            if(systime_m >= 60) {
     7ce:	80 91 ab 01 	lds	r24, 0x01AB
     7d2:	8c 33       	cpi	r24, 0x3C	; 60
     7d4:	b0 f0       	brcs	.+44     	; 0x802 <__vector_11+0xb6>
                systime_m = 0;
     7d6:	10 92 ab 01 	sts	0x01AB, r1
                systime_h++;
     7da:	80 91 aa 01 	lds	r24, 0x01AA
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	80 93 aa 01 	sts	0x01AA, r24
                if(systime_h >= 24) {
     7e4:	80 91 aa 01 	lds	r24, 0x01AA
     7e8:	88 31       	cpi	r24, 0x18	; 24
     7ea:	58 f0       	brcs	.+22     	; 0x802 <__vector_11+0xb6>
                    systime_h = 0;
     7ec:	10 92 aa 01 	sts	0x01AA, r1
                    systime_d++;
     7f0:	80 91 a8 01 	lds	r24, 0x01A8
     7f4:	90 91 a9 01 	lds	r25, 0x01A9
     7f8:	01 96       	adiw	r24, 0x01	; 1
     7fa:	90 93 a9 01 	sts	0x01A9, r25
     7fe:	80 93 a8 01 	sts	0x01A8, r24
                }
            }
        }        
    }
}
     802:	bf 91       	pop	r27
     804:	af 91       	pop	r26
     806:	9f 91       	pop	r25
     808:	8f 91       	pop	r24
     80a:	2f 91       	pop	r18
     80c:	0f 90       	pop	r0
     80e:	0f be       	out	0x3f, r0	; 63
     810:	0f 90       	pop	r0
     812:	1f 90       	pop	r1
     814:	18 95       	reti

00000816 <timer1_1ms_init>:
/*!
* @brief Disable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_disable(void) {
    TIMSK1 &= ~(1<<OCIE1A); // Disable Output compare Interrupt on Match A
     816:	af e6       	ldi	r26, 0x6F	; 111
     818:	b0 e0       	ldi	r27, 0x00	; 0
     81a:	8c 91       	ld	r24, X
     81c:	8d 7f       	andi	r24, 0xFD	; 253
     81e:	8c 93       	st	X, r24
    TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10)); // Disable timer1 clock source (disables timer)
     820:	e1 e8       	ldi	r30, 0x81	; 129
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	80 81       	ld	r24, Z
     826:	88 7f       	andi	r24, 0xF8	; 248
     828:	80 83       	st	Z, r24
*/
void timer1_1ms_init(void) {
    static uint16_t timer1_1ms_compare_value = 250-1;
        
    timer1_disable();
    TCCR1A = 0x00;  // Make sure no pins are set to output
     82a:	10 92 80 00 	sts	0x0080, r1
    TCCR1B |= (1<<WGM12) | TIMER1_PRESCALE_MASK;  // Set CTC, prescalar to clk(io)/64 (250 counts per 1ms)
     82e:	80 81       	ld	r24, Z
     830:	8b 60       	ori	r24, 0x0B	; 11
     832:	80 83       	st	Z, r24
    OCR1A = timer1_1ms_compare_value;    
     834:	89 ef       	ldi	r24, 0xF9	; 249
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	90 93 89 00 	sts	0x0089, r25
     83c:	80 93 88 00 	sts	0x0088, r24
/*!
* @brief Enable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_enable(void) {
    TIMSK1 |= (1<<OCIE1A);  // Enable Output Compare Interrupt on Match A
     840:	8c 91       	ld	r24, X
     842:	82 60       	ori	r24, 0x02	; 2
     844:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_PRESCALE_MASK; // Enable timer1 clock source (disables timer)
     846:	80 81       	ld	r24, Z
     848:	83 60       	ori	r24, 0x03	; 3
     84a:	80 83       	st	Z, r24
     84c:	08 95       	ret

0000084e <delay>:
* @brief Delay milliseconds
* @param uint16_t delay_ms  Time to delay in milliseconds
* @return void
*/
void delay(uint16_t delay_ms) {
    uint32_t systck_1 = systck;
     84e:	40 91 af 01 	lds	r20, 0x01AF
     852:	50 91 b0 01 	lds	r21, 0x01B0
     856:	60 91 b1 01 	lds	r22, 0x01B1
     85a:	70 91 b2 01 	lds	r23, 0x01B2
    while(systck < (systck_1 + delay_ms));  // delay
     85e:	48 0f       	add	r20, r24
     860:	59 1f       	adc	r21, r25
     862:	61 1d       	adc	r22, r1
     864:	71 1d       	adc	r23, r1
     866:	80 91 af 01 	lds	r24, 0x01AF
     86a:	90 91 b0 01 	lds	r25, 0x01B0
     86e:	a0 91 b1 01 	lds	r26, 0x01B1
     872:	b0 91 b2 01 	lds	r27, 0x01B2
     876:	84 17       	cp	r24, r20
     878:	95 07       	cpc	r25, r21
     87a:	a6 07       	cpc	r26, r22
     87c:	b7 07       	cpc	r27, r23
     87e:	98 f3       	brcs	.-26     	; 0x866 <delay+0x18>
     880:	08 95       	ret

00000882 <__fixsfsi>:
     882:	0e 94 48 04 	call	0x890	; 0x890 <__fixunssfsi>
     886:	68 94       	set
     888:	b1 11       	cpse	r27, r1
     88a:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__fp_szero>
     88e:	08 95       	ret

00000890 <__fixunssfsi>:
     890:	0e 94 bc 04 	call	0x978	; 0x978 <__fp_splitA>
     894:	88 f0       	brcs	.+34     	; 0x8b8 <__fixunssfsi+0x28>
     896:	9f 57       	subi	r25, 0x7F	; 127
     898:	98 f0       	brcs	.+38     	; 0x8c0 <__fixunssfsi+0x30>
     89a:	b9 2f       	mov	r27, r25
     89c:	99 27       	eor	r25, r25
     89e:	b7 51       	subi	r27, 0x17	; 23
     8a0:	b0 f0       	brcs	.+44     	; 0x8ce <__fixunssfsi+0x3e>
     8a2:	e1 f0       	breq	.+56     	; 0x8dc <__fixunssfsi+0x4c>
     8a4:	66 0f       	add	r22, r22
     8a6:	77 1f       	adc	r23, r23
     8a8:	88 1f       	adc	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	1a f0       	brmi	.+6      	; 0x8b4 <__fixunssfsi+0x24>
     8ae:	ba 95       	dec	r27
     8b0:	c9 f7       	brne	.-14     	; 0x8a4 <__fixunssfsi+0x14>
     8b2:	14 c0       	rjmp	.+40     	; 0x8dc <__fixunssfsi+0x4c>
     8b4:	b1 30       	cpi	r27, 0x01	; 1
     8b6:	91 f0       	breq	.+36     	; 0x8dc <__fixunssfsi+0x4c>
     8b8:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_zero>
     8bc:	b1 e0       	ldi	r27, 0x01	; 1
     8be:	08 95       	ret
     8c0:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__fp_zero>
     8c4:	67 2f       	mov	r22, r23
     8c6:	78 2f       	mov	r23, r24
     8c8:	88 27       	eor	r24, r24
     8ca:	b8 5f       	subi	r27, 0xF8	; 248
     8cc:	39 f0       	breq	.+14     	; 0x8dc <__fixunssfsi+0x4c>
     8ce:	b9 3f       	cpi	r27, 0xF9	; 249
     8d0:	cc f3       	brlt	.-14     	; 0x8c4 <__fixunssfsi+0x34>
     8d2:	86 95       	lsr	r24
     8d4:	77 95       	ror	r23
     8d6:	67 95       	ror	r22
     8d8:	b3 95       	inc	r27
     8da:	d9 f7       	brne	.-10     	; 0x8d2 <__fixunssfsi+0x42>
     8dc:	3e f4       	brtc	.+14     	; 0x8ec <__fixunssfsi+0x5c>
     8de:	90 95       	com	r25
     8e0:	80 95       	com	r24
     8e2:	70 95       	com	r23
     8e4:	61 95       	neg	r22
     8e6:	7f 4f       	sbci	r23, 0xFF	; 255
     8e8:	8f 4f       	sbci	r24, 0xFF	; 255
     8ea:	9f 4f       	sbci	r25, 0xFF	; 255
     8ec:	08 95       	ret

000008ee <__floatunsisf>:
     8ee:	e8 94       	clt
     8f0:	09 c0       	rjmp	.+18     	; 0x904 <__stack+0x5>

000008f2 <__floatsisf>:
     8f2:	97 fb       	bst	r25, 7
     8f4:	3e f4       	brtc	.+14     	; 0x904 <__stack+0x5>
     8f6:	90 95       	com	r25
     8f8:	80 95       	com	r24
     8fa:	70 95       	com	r23
     8fc:	61 95       	neg	r22
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
     900:	8f 4f       	sbci	r24, 0xFF	; 255
     902:	9f 4f       	sbci	r25, 0xFF	; 255
     904:	99 23       	and	r25, r25
     906:	a9 f0       	breq	.+42     	; 0x932 <__stack+0x33>
     908:	f9 2f       	mov	r31, r25
     90a:	96 e9       	ldi	r25, 0x96	; 150
     90c:	bb 27       	eor	r27, r27
     90e:	93 95       	inc	r25
     910:	f6 95       	lsr	r31
     912:	87 95       	ror	r24
     914:	77 95       	ror	r23
     916:	67 95       	ror	r22
     918:	b7 95       	ror	r27
     91a:	f1 11       	cpse	r31, r1
     91c:	f8 cf       	rjmp	.-16     	; 0x90e <__stack+0xf>
     91e:	fa f4       	brpl	.+62     	; 0x95e <__stack+0x5f>
     920:	bb 0f       	add	r27, r27
     922:	11 f4       	brne	.+4      	; 0x928 <__stack+0x29>
     924:	60 ff       	sbrs	r22, 0
     926:	1b c0       	rjmp	.+54     	; 0x95e <__stack+0x5f>
     928:	6f 5f       	subi	r22, 0xFF	; 255
     92a:	7f 4f       	sbci	r23, 0xFF	; 255
     92c:	8f 4f       	sbci	r24, 0xFF	; 255
     92e:	9f 4f       	sbci	r25, 0xFF	; 255
     930:	16 c0       	rjmp	.+44     	; 0x95e <__stack+0x5f>
     932:	88 23       	and	r24, r24
     934:	11 f0       	breq	.+4      	; 0x93a <__stack+0x3b>
     936:	96 e9       	ldi	r25, 0x96	; 150
     938:	11 c0       	rjmp	.+34     	; 0x95c <__stack+0x5d>
     93a:	77 23       	and	r23, r23
     93c:	21 f0       	breq	.+8      	; 0x946 <__stack+0x47>
     93e:	9e e8       	ldi	r25, 0x8E	; 142
     940:	87 2f       	mov	r24, r23
     942:	76 2f       	mov	r23, r22
     944:	05 c0       	rjmp	.+10     	; 0x950 <__stack+0x51>
     946:	66 23       	and	r22, r22
     948:	71 f0       	breq	.+28     	; 0x966 <__stack+0x67>
     94a:	96 e8       	ldi	r25, 0x86	; 134
     94c:	86 2f       	mov	r24, r22
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	2a f0       	brmi	.+10     	; 0x95e <__stack+0x5f>
     954:	9a 95       	dec	r25
     956:	66 0f       	add	r22, r22
     958:	77 1f       	adc	r23, r23
     95a:	88 1f       	adc	r24, r24
     95c:	da f7       	brpl	.-10     	; 0x954 <__stack+0x55>
     95e:	88 0f       	add	r24, r24
     960:	96 95       	lsr	r25
     962:	87 95       	ror	r24
     964:	97 f9       	bld	r25, 7
     966:	08 95       	ret

00000968 <__fp_split3>:
     968:	57 fd       	sbrc	r21, 7
     96a:	90 58       	subi	r25, 0x80	; 128
     96c:	44 0f       	add	r20, r20
     96e:	55 1f       	adc	r21, r21
     970:	59 f0       	breq	.+22     	; 0x988 <__fp_splitA+0x10>
     972:	5f 3f       	cpi	r21, 0xFF	; 255
     974:	71 f0       	breq	.+28     	; 0x992 <__fp_splitA+0x1a>
     976:	47 95       	ror	r20

00000978 <__fp_splitA>:
     978:	88 0f       	add	r24, r24
     97a:	97 fb       	bst	r25, 7
     97c:	99 1f       	adc	r25, r25
     97e:	61 f0       	breq	.+24     	; 0x998 <__fp_splitA+0x20>
     980:	9f 3f       	cpi	r25, 0xFF	; 255
     982:	79 f0       	breq	.+30     	; 0x9a2 <__fp_splitA+0x2a>
     984:	87 95       	ror	r24
     986:	08 95       	ret
     988:	12 16       	cp	r1, r18
     98a:	13 06       	cpc	r1, r19
     98c:	14 06       	cpc	r1, r20
     98e:	55 1f       	adc	r21, r21
     990:	f2 cf       	rjmp	.-28     	; 0x976 <__fp_split3+0xe>
     992:	46 95       	lsr	r20
     994:	f1 df       	rcall	.-30     	; 0x978 <__fp_splitA>
     996:	08 c0       	rjmp	.+16     	; 0x9a8 <__fp_splitA+0x30>
     998:	16 16       	cp	r1, r22
     99a:	17 06       	cpc	r1, r23
     99c:	18 06       	cpc	r1, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	f1 cf       	rjmp	.-30     	; 0x984 <__fp_splitA+0xc>
     9a2:	86 95       	lsr	r24
     9a4:	71 05       	cpc	r23, r1
     9a6:	61 05       	cpc	r22, r1
     9a8:	08 94       	sec
     9aa:	08 95       	ret

000009ac <__fp_zero>:
     9ac:	e8 94       	clt

000009ae <__fp_szero>:
     9ae:	bb 27       	eor	r27, r27
     9b0:	66 27       	eor	r22, r22
     9b2:	77 27       	eor	r23, r23
     9b4:	cb 01       	movw	r24, r22
     9b6:	97 f9       	bld	r25, 7
     9b8:	08 95       	ret

000009ba <__mulsf3>:
     9ba:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__mulsf3x>
     9be:	0c 94 61 05 	jmp	0xac2	; 0xac2 <__fp_round>
     9c2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__fp_pscA>
     9c6:	38 f0       	brcs	.+14     	; 0x9d6 <__mulsf3+0x1c>
     9c8:	0e 94 5a 05 	call	0xab4	; 0xab4 <__fp_pscB>
     9cc:	20 f0       	brcs	.+8      	; 0x9d6 <__mulsf3+0x1c>
     9ce:	95 23       	and	r25, r21
     9d0:	11 f0       	breq	.+4      	; 0x9d6 <__mulsf3+0x1c>
     9d2:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_inf>
     9d6:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_nan>
     9da:	11 24       	eor	r1, r1
     9dc:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__fp_szero>

000009e0 <__mulsf3x>:
     9e0:	0e 94 b4 04 	call	0x968	; 0x968 <__fp_split3>
     9e4:	70 f3       	brcs	.-36     	; 0x9c2 <__mulsf3+0x8>

000009e6 <__mulsf3_pse>:
     9e6:	95 9f       	mul	r25, r21
     9e8:	c1 f3       	breq	.-16     	; 0x9da <__mulsf3+0x20>
     9ea:	95 0f       	add	r25, r21
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	55 1f       	adc	r21, r21
     9f0:	62 9f       	mul	r22, r18
     9f2:	f0 01       	movw	r30, r0
     9f4:	72 9f       	mul	r23, r18
     9f6:	bb 27       	eor	r27, r27
     9f8:	f0 0d       	add	r31, r0
     9fa:	b1 1d       	adc	r27, r1
     9fc:	63 9f       	mul	r22, r19
     9fe:	aa 27       	eor	r26, r26
     a00:	f0 0d       	add	r31, r0
     a02:	b1 1d       	adc	r27, r1
     a04:	aa 1f       	adc	r26, r26
     a06:	64 9f       	mul	r22, r20
     a08:	66 27       	eor	r22, r22
     a0a:	b0 0d       	add	r27, r0
     a0c:	a1 1d       	adc	r26, r1
     a0e:	66 1f       	adc	r22, r22
     a10:	82 9f       	mul	r24, r18
     a12:	22 27       	eor	r18, r18
     a14:	b0 0d       	add	r27, r0
     a16:	a1 1d       	adc	r26, r1
     a18:	62 1f       	adc	r22, r18
     a1a:	73 9f       	mul	r23, r19
     a1c:	b0 0d       	add	r27, r0
     a1e:	a1 1d       	adc	r26, r1
     a20:	62 1f       	adc	r22, r18
     a22:	83 9f       	mul	r24, r19
     a24:	a0 0d       	add	r26, r0
     a26:	61 1d       	adc	r22, r1
     a28:	22 1f       	adc	r18, r18
     a2a:	74 9f       	mul	r23, r20
     a2c:	33 27       	eor	r19, r19
     a2e:	a0 0d       	add	r26, r0
     a30:	61 1d       	adc	r22, r1
     a32:	23 1f       	adc	r18, r19
     a34:	84 9f       	mul	r24, r20
     a36:	60 0d       	add	r22, r0
     a38:	21 1d       	adc	r18, r1
     a3a:	82 2f       	mov	r24, r18
     a3c:	76 2f       	mov	r23, r22
     a3e:	6a 2f       	mov	r22, r26
     a40:	11 24       	eor	r1, r1
     a42:	9f 57       	subi	r25, 0x7F	; 127
     a44:	50 40       	sbci	r21, 0x00	; 0
     a46:	9a f0       	brmi	.+38     	; 0xa6e <__mulsf3_pse+0x88>
     a48:	f1 f0       	breq	.+60     	; 0xa86 <__mulsf3_pse+0xa0>
     a4a:	88 23       	and	r24, r24
     a4c:	4a f0       	brmi	.+18     	; 0xa60 <__mulsf3_pse+0x7a>
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	bb 1f       	adc	r27, r27
     a54:	66 1f       	adc	r22, r22
     a56:	77 1f       	adc	r23, r23
     a58:	88 1f       	adc	r24, r24
     a5a:	91 50       	subi	r25, 0x01	; 1
     a5c:	50 40       	sbci	r21, 0x00	; 0
     a5e:	a9 f7       	brne	.-22     	; 0xa4a <__mulsf3_pse+0x64>
     a60:	9e 3f       	cpi	r25, 0xFE	; 254
     a62:	51 05       	cpc	r21, r1
     a64:	80 f0       	brcs	.+32     	; 0xa86 <__mulsf3_pse+0xa0>
     a66:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__fp_inf>
     a6a:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__fp_szero>
     a6e:	5f 3f       	cpi	r21, 0xFF	; 255
     a70:	e4 f3       	brlt	.-8      	; 0xa6a <__mulsf3_pse+0x84>
     a72:	98 3e       	cpi	r25, 0xE8	; 232
     a74:	d4 f3       	brlt	.-12     	; 0xa6a <__mulsf3_pse+0x84>
     a76:	86 95       	lsr	r24
     a78:	77 95       	ror	r23
     a7a:	67 95       	ror	r22
     a7c:	b7 95       	ror	r27
     a7e:	f7 95       	ror	r31
     a80:	e7 95       	ror	r30
     a82:	9f 5f       	subi	r25, 0xFF	; 255
     a84:	c1 f7       	brne	.-16     	; 0xa76 <__mulsf3_pse+0x90>
     a86:	fe 2b       	or	r31, r30
     a88:	88 0f       	add	r24, r24
     a8a:	91 1d       	adc	r25, r1
     a8c:	96 95       	lsr	r25
     a8e:	87 95       	ror	r24
     a90:	97 f9       	bld	r25, 7
     a92:	08 95       	ret

00000a94 <__fp_inf>:
     a94:	97 f9       	bld	r25, 7
     a96:	9f 67       	ori	r25, 0x7F	; 127
     a98:	80 e8       	ldi	r24, 0x80	; 128
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	08 95       	ret

00000aa0 <__fp_nan>:
     aa0:	9f ef       	ldi	r25, 0xFF	; 255
     aa2:	80 ec       	ldi	r24, 0xC0	; 192
     aa4:	08 95       	ret

00000aa6 <__fp_pscA>:
     aa6:	00 24       	eor	r0, r0
     aa8:	0a 94       	dec	r0
     aaa:	16 16       	cp	r1, r22
     aac:	17 06       	cpc	r1, r23
     aae:	18 06       	cpc	r1, r24
     ab0:	09 06       	cpc	r0, r25
     ab2:	08 95       	ret

00000ab4 <__fp_pscB>:
     ab4:	00 24       	eor	r0, r0
     ab6:	0a 94       	dec	r0
     ab8:	12 16       	cp	r1, r18
     aba:	13 06       	cpc	r1, r19
     abc:	14 06       	cpc	r1, r20
     abe:	05 06       	cpc	r0, r21
     ac0:	08 95       	ret

00000ac2 <__fp_round>:
     ac2:	09 2e       	mov	r0, r25
     ac4:	03 94       	inc	r0
     ac6:	00 0c       	add	r0, r0
     ac8:	11 f4       	brne	.+4      	; 0xace <__fp_round+0xc>
     aca:	88 23       	and	r24, r24
     acc:	52 f0       	brmi	.+20     	; 0xae2 <__fp_round+0x20>
     ace:	bb 0f       	add	r27, r27
     ad0:	40 f4       	brcc	.+16     	; 0xae2 <__fp_round+0x20>
     ad2:	bf 2b       	or	r27, r31
     ad4:	11 f4       	brne	.+4      	; 0xada <__fp_round+0x18>
     ad6:	60 ff       	sbrs	r22, 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__fp_round+0x20>
     ada:	6f 5f       	subi	r22, 0xFF	; 255
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	8f 4f       	sbci	r24, 0xFF	; 255
     ae0:	9f 4f       	sbci	r25, 0xFF	; 255
     ae2:	08 95       	ret

00000ae4 <__udivmodsi4>:
     ae4:	a1 e2       	ldi	r26, 0x21	; 33
     ae6:	1a 2e       	mov	r1, r26
     ae8:	aa 1b       	sub	r26, r26
     aea:	bb 1b       	sub	r27, r27
     aec:	fd 01       	movw	r30, r26
     aee:	0d c0       	rjmp	.+26     	; 0xb0a <__udivmodsi4_ep>

00000af0 <__udivmodsi4_loop>:
     af0:	aa 1f       	adc	r26, r26
     af2:	bb 1f       	adc	r27, r27
     af4:	ee 1f       	adc	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	a2 17       	cp	r26, r18
     afa:	b3 07       	cpc	r27, r19
     afc:	e4 07       	cpc	r30, r20
     afe:	f5 07       	cpc	r31, r21
     b00:	20 f0       	brcs	.+8      	; 0xb0a <__udivmodsi4_ep>
     b02:	a2 1b       	sub	r26, r18
     b04:	b3 0b       	sbc	r27, r19
     b06:	e4 0b       	sbc	r30, r20
     b08:	f5 0b       	sbc	r31, r21

00000b0a <__udivmodsi4_ep>:
     b0a:	66 1f       	adc	r22, r22
     b0c:	77 1f       	adc	r23, r23
     b0e:	88 1f       	adc	r24, r24
     b10:	99 1f       	adc	r25, r25
     b12:	1a 94       	dec	r1
     b14:	69 f7       	brne	.-38     	; 0xaf0 <__udivmodsi4_loop>
     b16:	60 95       	com	r22
     b18:	70 95       	com	r23
     b1a:	80 95       	com	r24
     b1c:	90 95       	com	r25
     b1e:	9b 01       	movw	r18, r22
     b20:	ac 01       	movw	r20, r24
     b22:	bd 01       	movw	r22, r26
     b24:	cf 01       	movw	r24, r30
     b26:	08 95       	ret

00000b28 <sprintf>:
     b28:	ae e0       	ldi	r26, 0x0E	; 14
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	ea e9       	ldi	r30, 0x9A	; 154
     b2e:	f5 e0       	ldi	r31, 0x05	; 5
     b30:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__prologue_saves__+0x1c>
     b34:	0d 89       	ldd	r16, Y+21	; 0x15
     b36:	1e 89       	ldd	r17, Y+22	; 0x16
     b38:	86 e0       	ldi	r24, 0x06	; 6
     b3a:	8c 83       	std	Y+4, r24	; 0x04
     b3c:	1a 83       	std	Y+2, r17	; 0x02
     b3e:	09 83       	std	Y+1, r16	; 0x01
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	9f e7       	ldi	r25, 0x7F	; 127
     b44:	9e 83       	std	Y+6, r25	; 0x06
     b46:	8d 83       	std	Y+5, r24	; 0x05
     b48:	ae 01       	movw	r20, r28
     b4a:	47 5e       	subi	r20, 0xE7	; 231
     b4c:	5f 4f       	sbci	r21, 0xFF	; 255
     b4e:	6f 89       	ldd	r22, Y+23	; 0x17
     b50:	78 8d       	ldd	r23, Y+24	; 0x18
     b52:	ce 01       	movw	r24, r28
     b54:	01 96       	adiw	r24, 0x01	; 1
     b56:	0e 94 b7 05 	call	0xb6e	; 0xb6e <vfprintf>
     b5a:	2f 81       	ldd	r18, Y+7	; 0x07
     b5c:	38 85       	ldd	r19, Y+8	; 0x08
     b5e:	f8 01       	movw	r30, r16
     b60:	e2 0f       	add	r30, r18
     b62:	f3 1f       	adc	r31, r19
     b64:	10 82       	st	Z, r1
     b66:	2e 96       	adiw	r28, 0x0e	; 14
     b68:	e4 e0       	ldi	r30, 0x04	; 4
     b6a:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__epilogue_restores__+0x1c>

00000b6e <vfprintf>:
     b6e:	ac e0       	ldi	r26, 0x0C	; 12
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	ed eb       	ldi	r30, 0xBD	; 189
     b74:	f5 e0       	ldi	r31, 0x05	; 5
     b76:	0c 94 35 08 	jmp	0x106a	; 0x106a <__prologue_saves__>
     b7a:	7c 01       	movw	r14, r24
     b7c:	6b 01       	movw	r12, r22
     b7e:	8a 01       	movw	r16, r20
     b80:	fc 01       	movw	r30, r24
     b82:	17 82       	std	Z+7, r1	; 0x07
     b84:	16 82       	std	Z+6, r1	; 0x06
     b86:	83 81       	ldd	r24, Z+3	; 0x03
     b88:	81 ff       	sbrs	r24, 1
     b8a:	bd c1       	rjmp	.+890    	; 0xf06 <vfprintf+0x398>
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	4c 01       	movw	r8, r24
     b92:	f7 01       	movw	r30, r14
     b94:	93 81       	ldd	r25, Z+3	; 0x03
     b96:	f6 01       	movw	r30, r12
     b98:	93 fd       	sbrc	r25, 3
     b9a:	85 91       	lpm	r24, Z+
     b9c:	93 ff       	sbrs	r25, 3
     b9e:	81 91       	ld	r24, Z+
     ba0:	6f 01       	movw	r12, r30
     ba2:	88 23       	and	r24, r24
     ba4:	09 f4       	brne	.+2      	; 0xba8 <vfprintf+0x3a>
     ba6:	ab c1       	rjmp	.+854    	; 0xefe <vfprintf+0x390>
     ba8:	85 32       	cpi	r24, 0x25	; 37
     baa:	39 f4       	brne	.+14     	; 0xbba <vfprintf+0x4c>
     bac:	93 fd       	sbrc	r25, 3
     bae:	85 91       	lpm	r24, Z+
     bb0:	93 ff       	sbrs	r25, 3
     bb2:	81 91       	ld	r24, Z+
     bb4:	6f 01       	movw	r12, r30
     bb6:	85 32       	cpi	r24, 0x25	; 37
     bb8:	29 f4       	brne	.+10     	; 0xbc4 <vfprintf+0x56>
     bba:	b7 01       	movw	r22, r14
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     bc2:	e7 cf       	rjmp	.-50     	; 0xb92 <vfprintf+0x24>
     bc4:	51 2c       	mov	r5, r1
     bc6:	31 2c       	mov	r3, r1
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	20 32       	cpi	r18, 0x20	; 32
     bcc:	a0 f4       	brcc	.+40     	; 0xbf6 <vfprintf+0x88>
     bce:	8b 32       	cpi	r24, 0x2B	; 43
     bd0:	69 f0       	breq	.+26     	; 0xbec <vfprintf+0x7e>
     bd2:	30 f4       	brcc	.+12     	; 0xbe0 <vfprintf+0x72>
     bd4:	80 32       	cpi	r24, 0x20	; 32
     bd6:	59 f0       	breq	.+22     	; 0xbee <vfprintf+0x80>
     bd8:	83 32       	cpi	r24, 0x23	; 35
     bda:	69 f4       	brne	.+26     	; 0xbf6 <vfprintf+0x88>
     bdc:	20 61       	ori	r18, 0x10	; 16
     bde:	2c c0       	rjmp	.+88     	; 0xc38 <vfprintf+0xca>
     be0:	8d 32       	cpi	r24, 0x2D	; 45
     be2:	39 f0       	breq	.+14     	; 0xbf2 <vfprintf+0x84>
     be4:	80 33       	cpi	r24, 0x30	; 48
     be6:	39 f4       	brne	.+14     	; 0xbf6 <vfprintf+0x88>
     be8:	21 60       	ori	r18, 0x01	; 1
     bea:	26 c0       	rjmp	.+76     	; 0xc38 <vfprintf+0xca>
     bec:	22 60       	ori	r18, 0x02	; 2
     bee:	24 60       	ori	r18, 0x04	; 4
     bf0:	23 c0       	rjmp	.+70     	; 0xc38 <vfprintf+0xca>
     bf2:	28 60       	ori	r18, 0x08	; 8
     bf4:	21 c0       	rjmp	.+66     	; 0xc38 <vfprintf+0xca>
     bf6:	27 fd       	sbrc	r18, 7
     bf8:	27 c0       	rjmp	.+78     	; 0xc48 <vfprintf+0xda>
     bfa:	30 ed       	ldi	r19, 0xD0	; 208
     bfc:	38 0f       	add	r19, r24
     bfe:	3a 30       	cpi	r19, 0x0A	; 10
     c00:	78 f4       	brcc	.+30     	; 0xc20 <vfprintf+0xb2>
     c02:	26 ff       	sbrs	r18, 6
     c04:	06 c0       	rjmp	.+12     	; 0xc12 <vfprintf+0xa4>
     c06:	fa e0       	ldi	r31, 0x0A	; 10
     c08:	5f 9e       	mul	r5, r31
     c0a:	30 0d       	add	r19, r0
     c0c:	11 24       	eor	r1, r1
     c0e:	53 2e       	mov	r5, r19
     c10:	13 c0       	rjmp	.+38     	; 0xc38 <vfprintf+0xca>
     c12:	8a e0       	ldi	r24, 0x0A	; 10
     c14:	38 9e       	mul	r3, r24
     c16:	30 0d       	add	r19, r0
     c18:	11 24       	eor	r1, r1
     c1a:	33 2e       	mov	r3, r19
     c1c:	20 62       	ori	r18, 0x20	; 32
     c1e:	0c c0       	rjmp	.+24     	; 0xc38 <vfprintf+0xca>
     c20:	8e 32       	cpi	r24, 0x2E	; 46
     c22:	21 f4       	brne	.+8      	; 0xc2c <vfprintf+0xbe>
     c24:	26 fd       	sbrc	r18, 6
     c26:	6b c1       	rjmp	.+726    	; 0xefe <vfprintf+0x390>
     c28:	20 64       	ori	r18, 0x40	; 64
     c2a:	06 c0       	rjmp	.+12     	; 0xc38 <vfprintf+0xca>
     c2c:	8c 36       	cpi	r24, 0x6C	; 108
     c2e:	11 f4       	brne	.+4      	; 0xc34 <vfprintf+0xc6>
     c30:	20 68       	ori	r18, 0x80	; 128
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <vfprintf+0xca>
     c34:	88 36       	cpi	r24, 0x68	; 104
     c36:	41 f4       	brne	.+16     	; 0xc48 <vfprintf+0xda>
     c38:	f6 01       	movw	r30, r12
     c3a:	93 fd       	sbrc	r25, 3
     c3c:	85 91       	lpm	r24, Z+
     c3e:	93 ff       	sbrs	r25, 3
     c40:	81 91       	ld	r24, Z+
     c42:	6f 01       	movw	r12, r30
     c44:	81 11       	cpse	r24, r1
     c46:	c1 cf       	rjmp	.-126    	; 0xbca <vfprintf+0x5c>
     c48:	98 2f       	mov	r25, r24
     c4a:	9f 7d       	andi	r25, 0xDF	; 223
     c4c:	95 54       	subi	r25, 0x45	; 69
     c4e:	93 30       	cpi	r25, 0x03	; 3
     c50:	28 f4       	brcc	.+10     	; 0xc5c <vfprintf+0xee>
     c52:	0c 5f       	subi	r16, 0xFC	; 252
     c54:	1f 4f       	sbci	r17, 0xFF	; 255
     c56:	ff e3       	ldi	r31, 0x3F	; 63
     c58:	f9 83       	std	Y+1, r31	; 0x01
     c5a:	0d c0       	rjmp	.+26     	; 0xc76 <vfprintf+0x108>
     c5c:	83 36       	cpi	r24, 0x63	; 99
     c5e:	31 f0       	breq	.+12     	; 0xc6c <vfprintf+0xfe>
     c60:	83 37       	cpi	r24, 0x73	; 115
     c62:	71 f0       	breq	.+28     	; 0xc80 <vfprintf+0x112>
     c64:	83 35       	cpi	r24, 0x53	; 83
     c66:	09 f0       	breq	.+2      	; 0xc6a <vfprintf+0xfc>
     c68:	5b c0       	rjmp	.+182    	; 0xd20 <vfprintf+0x1b2>
     c6a:	22 c0       	rjmp	.+68     	; 0xcb0 <vfprintf+0x142>
     c6c:	f8 01       	movw	r30, r16
     c6e:	80 81       	ld	r24, Z
     c70:	89 83       	std	Y+1, r24	; 0x01
     c72:	0e 5f       	subi	r16, 0xFE	; 254
     c74:	1f 4f       	sbci	r17, 0xFF	; 255
     c76:	44 24       	eor	r4, r4
     c78:	43 94       	inc	r4
     c7a:	51 2c       	mov	r5, r1
     c7c:	54 01       	movw	r10, r8
     c7e:	15 c0       	rjmp	.+42     	; 0xcaa <vfprintf+0x13c>
     c80:	38 01       	movw	r6, r16
     c82:	f2 e0       	ldi	r31, 0x02	; 2
     c84:	6f 0e       	add	r6, r31
     c86:	71 1c       	adc	r7, r1
     c88:	f8 01       	movw	r30, r16
     c8a:	a0 80       	ld	r10, Z
     c8c:	b1 80       	ldd	r11, Z+1	; 0x01
     c8e:	26 ff       	sbrs	r18, 6
     c90:	03 c0       	rjmp	.+6      	; 0xc98 <vfprintf+0x12a>
     c92:	65 2d       	mov	r22, r5
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <vfprintf+0x12e>
     c98:	6f ef       	ldi	r22, 0xFF	; 255
     c9a:	7f ef       	ldi	r23, 0xFF	; 255
     c9c:	c5 01       	movw	r24, r10
     c9e:	2c 87       	std	Y+12, r18	; 0x0c
     ca0:	0e 94 94 07 	call	0xf28	; 0xf28 <strnlen>
     ca4:	2c 01       	movw	r4, r24
     ca6:	83 01       	movw	r16, r6
     ca8:	2c 85       	ldd	r18, Y+12	; 0x0c
     caa:	2f 77       	andi	r18, 0x7F	; 127
     cac:	22 2e       	mov	r2, r18
     cae:	17 c0       	rjmp	.+46     	; 0xcde <vfprintf+0x170>
     cb0:	38 01       	movw	r6, r16
     cb2:	f2 e0       	ldi	r31, 0x02	; 2
     cb4:	6f 0e       	add	r6, r31
     cb6:	71 1c       	adc	r7, r1
     cb8:	f8 01       	movw	r30, r16
     cba:	a0 80       	ld	r10, Z
     cbc:	b1 80       	ldd	r11, Z+1	; 0x01
     cbe:	26 ff       	sbrs	r18, 6
     cc0:	03 c0       	rjmp	.+6      	; 0xcc8 <vfprintf+0x15a>
     cc2:	65 2d       	mov	r22, r5
     cc4:	70 e0       	ldi	r23, 0x00	; 0
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <vfprintf+0x15e>
     cc8:	6f ef       	ldi	r22, 0xFF	; 255
     cca:	7f ef       	ldi	r23, 0xFF	; 255
     ccc:	c5 01       	movw	r24, r10
     cce:	2c 87       	std	Y+12, r18	; 0x0c
     cd0:	0e 94 89 07 	call	0xf12	; 0xf12 <strnlen_P>
     cd4:	2c 01       	movw	r4, r24
     cd6:	2c 85       	ldd	r18, Y+12	; 0x0c
     cd8:	20 68       	ori	r18, 0x80	; 128
     cda:	22 2e       	mov	r2, r18
     cdc:	83 01       	movw	r16, r6
     cde:	23 fc       	sbrc	r2, 3
     ce0:	1b c0       	rjmp	.+54     	; 0xd18 <vfprintf+0x1aa>
     ce2:	83 2d       	mov	r24, r3
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	48 16       	cp	r4, r24
     ce8:	59 06       	cpc	r5, r25
     cea:	b0 f4       	brcc	.+44     	; 0xd18 <vfprintf+0x1aa>
     cec:	b7 01       	movw	r22, r14
     cee:	80 e2       	ldi	r24, 0x20	; 32
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     cf6:	3a 94       	dec	r3
     cf8:	f4 cf       	rjmp	.-24     	; 0xce2 <vfprintf+0x174>
     cfa:	f5 01       	movw	r30, r10
     cfc:	27 fc       	sbrc	r2, 7
     cfe:	85 91       	lpm	r24, Z+
     d00:	27 fe       	sbrs	r2, 7
     d02:	81 91       	ld	r24, Z+
     d04:	5f 01       	movw	r10, r30
     d06:	b7 01       	movw	r22, r14
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     d0e:	31 10       	cpse	r3, r1
     d10:	3a 94       	dec	r3
     d12:	f1 e0       	ldi	r31, 0x01	; 1
     d14:	4f 1a       	sub	r4, r31
     d16:	51 08       	sbc	r5, r1
     d18:	41 14       	cp	r4, r1
     d1a:	51 04       	cpc	r5, r1
     d1c:	71 f7       	brne	.-36     	; 0xcfa <vfprintf+0x18c>
     d1e:	e5 c0       	rjmp	.+458    	; 0xeea <vfprintf+0x37c>
     d20:	84 36       	cpi	r24, 0x64	; 100
     d22:	11 f0       	breq	.+4      	; 0xd28 <vfprintf+0x1ba>
     d24:	89 36       	cpi	r24, 0x69	; 105
     d26:	39 f5       	brne	.+78     	; 0xd76 <vfprintf+0x208>
     d28:	f8 01       	movw	r30, r16
     d2a:	27 ff       	sbrs	r18, 7
     d2c:	07 c0       	rjmp	.+14     	; 0xd3c <vfprintf+0x1ce>
     d2e:	60 81       	ld	r22, Z
     d30:	71 81       	ldd	r23, Z+1	; 0x01
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	93 81       	ldd	r25, Z+3	; 0x03
     d36:	0c 5f       	subi	r16, 0xFC	; 252
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	08 c0       	rjmp	.+16     	; 0xd4c <vfprintf+0x1de>
     d3c:	60 81       	ld	r22, Z
     d3e:	71 81       	ldd	r23, Z+1	; 0x01
     d40:	07 2e       	mov	r0, r23
     d42:	00 0c       	add	r0, r0
     d44:	88 0b       	sbc	r24, r24
     d46:	99 0b       	sbc	r25, r25
     d48:	0e 5f       	subi	r16, 0xFE	; 254
     d4a:	1f 4f       	sbci	r17, 0xFF	; 255
     d4c:	2f 76       	andi	r18, 0x6F	; 111
     d4e:	72 2e       	mov	r7, r18
     d50:	97 ff       	sbrs	r25, 7
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <vfprintf+0x1f8>
     d54:	90 95       	com	r25
     d56:	80 95       	com	r24
     d58:	70 95       	com	r23
     d5a:	61 95       	neg	r22
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	8f 4f       	sbci	r24, 0xFF	; 255
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	20 68       	ori	r18, 0x80	; 128
     d64:	72 2e       	mov	r7, r18
     d66:	2a e0       	ldi	r18, 0x0A	; 10
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	a4 01       	movw	r20, r8
     d6c:	0e 94 d7 07 	call	0xfae	; 0xfae <__ultoa_invert>
     d70:	a8 2e       	mov	r10, r24
     d72:	a8 18       	sub	r10, r8
     d74:	44 c0       	rjmp	.+136    	; 0xdfe <vfprintf+0x290>
     d76:	85 37       	cpi	r24, 0x75	; 117
     d78:	29 f4       	brne	.+10     	; 0xd84 <vfprintf+0x216>
     d7a:	2f 7e       	andi	r18, 0xEF	; 239
     d7c:	b2 2e       	mov	r11, r18
     d7e:	2a e0       	ldi	r18, 0x0A	; 10
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	25 c0       	rjmp	.+74     	; 0xdce <vfprintf+0x260>
     d84:	f2 2f       	mov	r31, r18
     d86:	f9 7f       	andi	r31, 0xF9	; 249
     d88:	bf 2e       	mov	r11, r31
     d8a:	8f 36       	cpi	r24, 0x6F	; 111
     d8c:	c1 f0       	breq	.+48     	; 0xdbe <vfprintf+0x250>
     d8e:	18 f4       	brcc	.+6      	; 0xd96 <vfprintf+0x228>
     d90:	88 35       	cpi	r24, 0x58	; 88
     d92:	79 f0       	breq	.+30     	; 0xdb2 <vfprintf+0x244>
     d94:	b4 c0       	rjmp	.+360    	; 0xefe <vfprintf+0x390>
     d96:	80 37       	cpi	r24, 0x70	; 112
     d98:	19 f0       	breq	.+6      	; 0xda0 <vfprintf+0x232>
     d9a:	88 37       	cpi	r24, 0x78	; 120
     d9c:	21 f0       	breq	.+8      	; 0xda6 <vfprintf+0x238>
     d9e:	af c0       	rjmp	.+350    	; 0xefe <vfprintf+0x390>
     da0:	2f 2f       	mov	r18, r31
     da2:	20 61       	ori	r18, 0x10	; 16
     da4:	b2 2e       	mov	r11, r18
     da6:	b4 fe       	sbrs	r11, 4
     da8:	0d c0       	rjmp	.+26     	; 0xdc4 <vfprintf+0x256>
     daa:	8b 2d       	mov	r24, r11
     dac:	84 60       	ori	r24, 0x04	; 4
     dae:	b8 2e       	mov	r11, r24
     db0:	09 c0       	rjmp	.+18     	; 0xdc4 <vfprintf+0x256>
     db2:	24 ff       	sbrs	r18, 4
     db4:	0a c0       	rjmp	.+20     	; 0xdca <vfprintf+0x25c>
     db6:	9f 2f       	mov	r25, r31
     db8:	96 60       	ori	r25, 0x06	; 6
     dba:	b9 2e       	mov	r11, r25
     dbc:	06 c0       	rjmp	.+12     	; 0xdca <vfprintf+0x25c>
     dbe:	28 e0       	ldi	r18, 0x08	; 8
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	05 c0       	rjmp	.+10     	; 0xdce <vfprintf+0x260>
     dc4:	20 e1       	ldi	r18, 0x10	; 16
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	02 c0       	rjmp	.+4      	; 0xdce <vfprintf+0x260>
     dca:	20 e1       	ldi	r18, 0x10	; 16
     dcc:	32 e0       	ldi	r19, 0x02	; 2
     dce:	f8 01       	movw	r30, r16
     dd0:	b7 fe       	sbrs	r11, 7
     dd2:	07 c0       	rjmp	.+14     	; 0xde2 <vfprintf+0x274>
     dd4:	60 81       	ld	r22, Z
     dd6:	71 81       	ldd	r23, Z+1	; 0x01
     dd8:	82 81       	ldd	r24, Z+2	; 0x02
     dda:	93 81       	ldd	r25, Z+3	; 0x03
     ddc:	0c 5f       	subi	r16, 0xFC	; 252
     dde:	1f 4f       	sbci	r17, 0xFF	; 255
     de0:	06 c0       	rjmp	.+12     	; 0xdee <vfprintf+0x280>
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 5f       	subi	r16, 0xFE	; 254
     dec:	1f 4f       	sbci	r17, 0xFF	; 255
     dee:	a4 01       	movw	r20, r8
     df0:	0e 94 d7 07 	call	0xfae	; 0xfae <__ultoa_invert>
     df4:	a8 2e       	mov	r10, r24
     df6:	a8 18       	sub	r10, r8
     df8:	fb 2d       	mov	r31, r11
     dfa:	ff 77       	andi	r31, 0x7F	; 127
     dfc:	7f 2e       	mov	r7, r31
     dfe:	76 fe       	sbrs	r7, 6
     e00:	0b c0       	rjmp	.+22     	; 0xe18 <vfprintf+0x2aa>
     e02:	37 2d       	mov	r19, r7
     e04:	3e 7f       	andi	r19, 0xFE	; 254
     e06:	a5 14       	cp	r10, r5
     e08:	50 f4       	brcc	.+20     	; 0xe1e <vfprintf+0x2b0>
     e0a:	74 fe       	sbrs	r7, 4
     e0c:	0a c0       	rjmp	.+20     	; 0xe22 <vfprintf+0x2b4>
     e0e:	72 fc       	sbrc	r7, 2
     e10:	08 c0       	rjmp	.+16     	; 0xe22 <vfprintf+0x2b4>
     e12:	37 2d       	mov	r19, r7
     e14:	3e 7e       	andi	r19, 0xEE	; 238
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <vfprintf+0x2b4>
     e18:	ba 2c       	mov	r11, r10
     e1a:	37 2d       	mov	r19, r7
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <vfprintf+0x2b6>
     e1e:	ba 2c       	mov	r11, r10
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <vfprintf+0x2b6>
     e22:	b5 2c       	mov	r11, r5
     e24:	34 ff       	sbrs	r19, 4
     e26:	0d c0       	rjmp	.+26     	; 0xe42 <vfprintf+0x2d4>
     e28:	fe 01       	movw	r30, r28
     e2a:	ea 0d       	add	r30, r10
     e2c:	f1 1d       	adc	r31, r1
     e2e:	80 81       	ld	r24, Z
     e30:	80 33       	cpi	r24, 0x30	; 48
     e32:	11 f4       	brne	.+4      	; 0xe38 <vfprintf+0x2ca>
     e34:	39 7e       	andi	r19, 0xE9	; 233
     e36:	09 c0       	rjmp	.+18     	; 0xe4a <vfprintf+0x2dc>
     e38:	32 ff       	sbrs	r19, 2
     e3a:	06 c0       	rjmp	.+12     	; 0xe48 <vfprintf+0x2da>
     e3c:	b3 94       	inc	r11
     e3e:	b3 94       	inc	r11
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <vfprintf+0x2dc>
     e42:	83 2f       	mov	r24, r19
     e44:	86 78       	andi	r24, 0x86	; 134
     e46:	09 f0       	breq	.+2      	; 0xe4a <vfprintf+0x2dc>
     e48:	b3 94       	inc	r11
     e4a:	33 fd       	sbrc	r19, 3
     e4c:	13 c0       	rjmp	.+38     	; 0xe74 <vfprintf+0x306>
     e4e:	30 ff       	sbrs	r19, 0
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <vfprintf+0x2f0>
     e52:	5a 2c       	mov	r5, r10
     e54:	b3 14       	cp	r11, r3
     e56:	18 f4       	brcc	.+6      	; 0xe5e <vfprintf+0x2f0>
     e58:	53 0c       	add	r5, r3
     e5a:	5b 18       	sub	r5, r11
     e5c:	b3 2c       	mov	r11, r3
     e5e:	b3 14       	cp	r11, r3
     e60:	68 f4       	brcc	.+26     	; 0xe7c <vfprintf+0x30e>
     e62:	b7 01       	movw	r22, r14
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	3c 87       	std	Y+12, r19	; 0x0c
     e6a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     e6e:	b3 94       	inc	r11
     e70:	3c 85       	ldd	r19, Y+12	; 0x0c
     e72:	f5 cf       	rjmp	.-22     	; 0xe5e <vfprintf+0x2f0>
     e74:	b3 14       	cp	r11, r3
     e76:	10 f4       	brcc	.+4      	; 0xe7c <vfprintf+0x30e>
     e78:	3b 18       	sub	r3, r11
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <vfprintf+0x310>
     e7c:	31 2c       	mov	r3, r1
     e7e:	34 ff       	sbrs	r19, 4
     e80:	12 c0       	rjmp	.+36     	; 0xea6 <vfprintf+0x338>
     e82:	b7 01       	movw	r22, r14
     e84:	80 e3       	ldi	r24, 0x30	; 48
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	3c 87       	std	Y+12, r19	; 0x0c
     e8a:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     e8e:	3c 85       	ldd	r19, Y+12	; 0x0c
     e90:	32 ff       	sbrs	r19, 2
     e92:	17 c0       	rjmp	.+46     	; 0xec2 <vfprintf+0x354>
     e94:	31 fd       	sbrc	r19, 1
     e96:	03 c0       	rjmp	.+6      	; 0xe9e <vfprintf+0x330>
     e98:	88 e7       	ldi	r24, 0x78	; 120
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 c0       	rjmp	.+4      	; 0xea2 <vfprintf+0x334>
     e9e:	88 e5       	ldi	r24, 0x58	; 88
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	b7 01       	movw	r22, r14
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <vfprintf+0x350>
     ea6:	83 2f       	mov	r24, r19
     ea8:	86 78       	andi	r24, 0x86	; 134
     eaa:	59 f0       	breq	.+22     	; 0xec2 <vfprintf+0x354>
     eac:	31 ff       	sbrs	r19, 1
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <vfprintf+0x346>
     eb0:	8b e2       	ldi	r24, 0x2B	; 43
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <vfprintf+0x348>
     eb4:	80 e2       	ldi	r24, 0x20	; 32
     eb6:	37 fd       	sbrc	r19, 7
     eb8:	8d e2       	ldi	r24, 0x2D	; 45
     eba:	b7 01       	movw	r22, r14
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     ec2:	a5 14       	cp	r10, r5
     ec4:	38 f4       	brcc	.+14     	; 0xed4 <vfprintf+0x366>
     ec6:	b7 01       	movw	r22, r14
     ec8:	80 e3       	ldi	r24, 0x30	; 48
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     ed0:	5a 94       	dec	r5
     ed2:	f7 cf       	rjmp	.-18     	; 0xec2 <vfprintf+0x354>
     ed4:	aa 94       	dec	r10
     ed6:	f4 01       	movw	r30, r8
     ed8:	ea 0d       	add	r30, r10
     eda:	f1 1d       	adc	r31, r1
     edc:	80 81       	ld	r24, Z
     ede:	b7 01       	movw	r22, r14
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     ee6:	a1 10       	cpse	r10, r1
     ee8:	f5 cf       	rjmp	.-22     	; 0xed4 <vfprintf+0x366>
     eea:	33 20       	and	r3, r3
     eec:	09 f4       	brne	.+2      	; 0xef0 <vfprintf+0x382>
     eee:	51 ce       	rjmp	.-862    	; 0xb92 <vfprintf+0x24>
     ef0:	b7 01       	movw	r22, r14
     ef2:	80 e2       	ldi	r24, 0x20	; 32
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 9f 07 	call	0xf3e	; 0xf3e <fputc>
     efa:	3a 94       	dec	r3
     efc:	f6 cf       	rjmp	.-20     	; 0xeea <vfprintf+0x37c>
     efe:	f7 01       	movw	r30, r14
     f00:	86 81       	ldd	r24, Z+6	; 0x06
     f02:	97 81       	ldd	r25, Z+7	; 0x07
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <vfprintf+0x39c>
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	9f ef       	ldi	r25, 0xFF	; 255
     f0a:	2c 96       	adiw	r28, 0x0c	; 12
     f0c:	e2 e1       	ldi	r30, 0x12	; 18
     f0e:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__epilogue_restores__>

00000f12 <strnlen_P>:
     f12:	fc 01       	movw	r30, r24
     f14:	05 90       	lpm	r0, Z+
     f16:	61 50       	subi	r22, 0x01	; 1
     f18:	70 40       	sbci	r23, 0x00	; 0
     f1a:	01 10       	cpse	r0, r1
     f1c:	d8 f7       	brcc	.-10     	; 0xf14 <strnlen_P+0x2>
     f1e:	80 95       	com	r24
     f20:	90 95       	com	r25
     f22:	8e 0f       	add	r24, r30
     f24:	9f 1f       	adc	r25, r31
     f26:	08 95       	ret

00000f28 <strnlen>:
     f28:	fc 01       	movw	r30, r24
     f2a:	61 50       	subi	r22, 0x01	; 1
     f2c:	70 40       	sbci	r23, 0x00	; 0
     f2e:	01 90       	ld	r0, Z+
     f30:	01 10       	cpse	r0, r1
     f32:	d8 f7       	brcc	.-10     	; 0xf2a <strnlen+0x2>
     f34:	80 95       	com	r24
     f36:	90 95       	com	r25
     f38:	8e 0f       	add	r24, r30
     f3a:	9f 1f       	adc	r25, r31
     f3c:	08 95       	ret

00000f3e <fputc>:
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	fb 01       	movw	r30, r22
     f48:	23 81       	ldd	r18, Z+3	; 0x03
     f4a:	21 fd       	sbrc	r18, 1
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <fputc+0x16>
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	9f ef       	ldi	r25, 0xFF	; 255
     f52:	28 c0       	rjmp	.+80     	; 0xfa4 <fputc+0x66>
     f54:	22 ff       	sbrs	r18, 2
     f56:	16 c0       	rjmp	.+44     	; 0xf84 <fputc+0x46>
     f58:	46 81       	ldd	r20, Z+6	; 0x06
     f5a:	57 81       	ldd	r21, Z+7	; 0x07
     f5c:	24 81       	ldd	r18, Z+4	; 0x04
     f5e:	35 81       	ldd	r19, Z+5	; 0x05
     f60:	42 17       	cp	r20, r18
     f62:	53 07       	cpc	r21, r19
     f64:	44 f4       	brge	.+16     	; 0xf76 <fputc+0x38>
     f66:	a0 81       	ld	r26, Z
     f68:	b1 81       	ldd	r27, Z+1	; 0x01
     f6a:	9d 01       	movw	r18, r26
     f6c:	2f 5f       	subi	r18, 0xFF	; 255
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	31 83       	std	Z+1, r19	; 0x01
     f72:	20 83       	st	Z, r18
     f74:	8c 93       	st	X, r24
     f76:	26 81       	ldd	r18, Z+6	; 0x06
     f78:	37 81       	ldd	r19, Z+7	; 0x07
     f7a:	2f 5f       	subi	r18, 0xFF	; 255
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	37 83       	std	Z+7, r19	; 0x07
     f80:	26 83       	std	Z+6, r18	; 0x06
     f82:	10 c0       	rjmp	.+32     	; 0xfa4 <fputc+0x66>
     f84:	eb 01       	movw	r28, r22
     f86:	09 2f       	mov	r16, r25
     f88:	18 2f       	mov	r17, r24
     f8a:	00 84       	ldd	r0, Z+8	; 0x08
     f8c:	f1 85       	ldd	r31, Z+9	; 0x09
     f8e:	e0 2d       	mov	r30, r0
     f90:	09 95       	icall
     f92:	89 2b       	or	r24, r25
     f94:	e1 f6       	brne	.-72     	; 0xf4e <fputc+0x10>
     f96:	8e 81       	ldd	r24, Y+6	; 0x06
     f98:	9f 81       	ldd	r25, Y+7	; 0x07
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	9f 83       	std	Y+7, r25	; 0x07
     f9e:	8e 83       	std	Y+6, r24	; 0x06
     fa0:	81 2f       	mov	r24, r17
     fa2:	90 2f       	mov	r25, r16
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <__ultoa_invert>:
     fae:	fa 01       	movw	r30, r20
     fb0:	aa 27       	eor	r26, r26
     fb2:	28 30       	cpi	r18, 0x08	; 8
     fb4:	51 f1       	breq	.+84     	; 0x100a <__ultoa_invert+0x5c>
     fb6:	20 31       	cpi	r18, 0x10	; 16
     fb8:	81 f1       	breq	.+96     	; 0x101a <__ultoa_invert+0x6c>
     fba:	e8 94       	clt
     fbc:	6f 93       	push	r22
     fbe:	6e 7f       	andi	r22, 0xFE	; 254
     fc0:	6e 5f       	subi	r22, 0xFE	; 254
     fc2:	7f 4f       	sbci	r23, 0xFF	; 255
     fc4:	8f 4f       	sbci	r24, 0xFF	; 255
     fc6:	9f 4f       	sbci	r25, 0xFF	; 255
     fc8:	af 4f       	sbci	r26, 0xFF	; 255
     fca:	b1 e0       	ldi	r27, 0x01	; 1
     fcc:	3e d0       	rcall	.+124    	; 0x104a <__ultoa_invert+0x9c>
     fce:	b4 e0       	ldi	r27, 0x04	; 4
     fd0:	3c d0       	rcall	.+120    	; 0x104a <__ultoa_invert+0x9c>
     fd2:	67 0f       	add	r22, r23
     fd4:	78 1f       	adc	r23, r24
     fd6:	89 1f       	adc	r24, r25
     fd8:	9a 1f       	adc	r25, r26
     fda:	a1 1d       	adc	r26, r1
     fdc:	68 0f       	add	r22, r24
     fde:	79 1f       	adc	r23, r25
     fe0:	8a 1f       	adc	r24, r26
     fe2:	91 1d       	adc	r25, r1
     fe4:	a1 1d       	adc	r26, r1
     fe6:	6a 0f       	add	r22, r26
     fe8:	71 1d       	adc	r23, r1
     fea:	81 1d       	adc	r24, r1
     fec:	91 1d       	adc	r25, r1
     fee:	a1 1d       	adc	r26, r1
     ff0:	20 d0       	rcall	.+64     	; 0x1032 <__ultoa_invert+0x84>
     ff2:	09 f4       	brne	.+2      	; 0xff6 <__ultoa_invert+0x48>
     ff4:	68 94       	set
     ff6:	3f 91       	pop	r19
     ff8:	2a e0       	ldi	r18, 0x0A	; 10
     ffa:	26 9f       	mul	r18, r22
     ffc:	11 24       	eor	r1, r1
     ffe:	30 19       	sub	r19, r0
    1000:	30 5d       	subi	r19, 0xD0	; 208
    1002:	31 93       	st	Z+, r19
    1004:	de f6       	brtc	.-74     	; 0xfbc <__ultoa_invert+0xe>
    1006:	cf 01       	movw	r24, r30
    1008:	08 95       	ret
    100a:	46 2f       	mov	r20, r22
    100c:	47 70       	andi	r20, 0x07	; 7
    100e:	40 5d       	subi	r20, 0xD0	; 208
    1010:	41 93       	st	Z+, r20
    1012:	b3 e0       	ldi	r27, 0x03	; 3
    1014:	0f d0       	rcall	.+30     	; 0x1034 <__ultoa_invert+0x86>
    1016:	c9 f7       	brne	.-14     	; 0x100a <__ultoa_invert+0x5c>
    1018:	f6 cf       	rjmp	.-20     	; 0x1006 <__ultoa_invert+0x58>
    101a:	46 2f       	mov	r20, r22
    101c:	4f 70       	andi	r20, 0x0F	; 15
    101e:	40 5d       	subi	r20, 0xD0	; 208
    1020:	4a 33       	cpi	r20, 0x3A	; 58
    1022:	18 f0       	brcs	.+6      	; 0x102a <__ultoa_invert+0x7c>
    1024:	49 5d       	subi	r20, 0xD9	; 217
    1026:	31 fd       	sbrc	r19, 1
    1028:	40 52       	subi	r20, 0x20	; 32
    102a:	41 93       	st	Z+, r20
    102c:	02 d0       	rcall	.+4      	; 0x1032 <__ultoa_invert+0x84>
    102e:	a9 f7       	brne	.-22     	; 0x101a <__ultoa_invert+0x6c>
    1030:	ea cf       	rjmp	.-44     	; 0x1006 <__ultoa_invert+0x58>
    1032:	b4 e0       	ldi	r27, 0x04	; 4
    1034:	a6 95       	lsr	r26
    1036:	97 95       	ror	r25
    1038:	87 95       	ror	r24
    103a:	77 95       	ror	r23
    103c:	67 95       	ror	r22
    103e:	ba 95       	dec	r27
    1040:	c9 f7       	brne	.-14     	; 0x1034 <__ultoa_invert+0x86>
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	61 05       	cpc	r22, r1
    1046:	71 05       	cpc	r23, r1
    1048:	08 95       	ret
    104a:	9b 01       	movw	r18, r22
    104c:	ac 01       	movw	r20, r24
    104e:	0a 2e       	mov	r0, r26
    1050:	06 94       	lsr	r0
    1052:	57 95       	ror	r21
    1054:	47 95       	ror	r20
    1056:	37 95       	ror	r19
    1058:	27 95       	ror	r18
    105a:	ba 95       	dec	r27
    105c:	c9 f7       	brne	.-14     	; 0x1050 <__ultoa_invert+0xa2>
    105e:	62 0f       	add	r22, r18
    1060:	73 1f       	adc	r23, r19
    1062:	84 1f       	adc	r24, r20
    1064:	95 1f       	adc	r25, r21
    1066:	a0 1d       	adc	r26, r0
    1068:	08 95       	ret

0000106a <__prologue_saves__>:
    106a:	2f 92       	push	r2
    106c:	3f 92       	push	r3
    106e:	4f 92       	push	r4
    1070:	5f 92       	push	r5
    1072:	6f 92       	push	r6
    1074:	7f 92       	push	r7
    1076:	8f 92       	push	r8
    1078:	9f 92       	push	r9
    107a:	af 92       	push	r10
    107c:	bf 92       	push	r11
    107e:	cf 92       	push	r12
    1080:	df 92       	push	r13
    1082:	ef 92       	push	r14
    1084:	ff 92       	push	r15
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	ca 1b       	sub	r28, r26
    1094:	db 0b       	sbc	r29, r27
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	09 94       	ijmp

000010a2 <__epilogue_restores__>:
    10a2:	2a 88       	ldd	r2, Y+18	; 0x12
    10a4:	39 88       	ldd	r3, Y+17	; 0x11
    10a6:	48 88       	ldd	r4, Y+16	; 0x10
    10a8:	5f 84       	ldd	r5, Y+15	; 0x0f
    10aa:	6e 84       	ldd	r6, Y+14	; 0x0e
    10ac:	7d 84       	ldd	r7, Y+13	; 0x0d
    10ae:	8c 84       	ldd	r8, Y+12	; 0x0c
    10b0:	9b 84       	ldd	r9, Y+11	; 0x0b
    10b2:	aa 84       	ldd	r10, Y+10	; 0x0a
    10b4:	b9 84       	ldd	r11, Y+9	; 0x09
    10b6:	c8 84       	ldd	r12, Y+8	; 0x08
    10b8:	df 80       	ldd	r13, Y+7	; 0x07
    10ba:	ee 80       	ldd	r14, Y+6	; 0x06
    10bc:	fd 80       	ldd	r15, Y+5	; 0x05
    10be:	0c 81       	ldd	r16, Y+4	; 0x04
    10c0:	1b 81       	ldd	r17, Y+3	; 0x03
    10c2:	aa 81       	ldd	r26, Y+2	; 0x02
    10c4:	b9 81       	ldd	r27, Y+1	; 0x01
    10c6:	ce 0f       	add	r28, r30
    10c8:	d1 1d       	adc	r29, r1
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	f8 94       	cli
    10ce:	de bf       	out	0x3e, r29	; 62
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	cd bf       	out	0x3d, r28	; 61
    10d4:	ed 01       	movw	r28, r26
    10d6:	08 95       	ret

000010d8 <_exit>:
    10d8:	f8 94       	cli

000010da <__stop_program>:
    10da:	ff cf       	rjmp	.-2      	; 0x10da <__stop_program>
