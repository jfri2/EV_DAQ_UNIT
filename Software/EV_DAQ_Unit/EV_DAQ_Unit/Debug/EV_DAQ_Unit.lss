
EV_DAQ_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800100  00000e7c  00000f10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000055  0080026e  0080026e  0000107e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000107e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001681  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b45  00000000  00000000  0000294d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000913  00000000  00000000  00003492  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000410  00000000  00000000  00003da8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000577  00000000  00000000  000041b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011da  00000000  00000000  0000472f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00005909  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 1b 03 	jmp	0x636	; 0x636 <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	12 e0       	ldi	r17, 0x02	; 2
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	fe e0       	ldi	r31, 0x0E	; 14
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 36       	cpi	r26, 0x6E	; 110
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	ae e6       	ldi	r26, 0x6E	; 110
  da:	b2 e0       	ldi	r27, 0x02	; 2
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a3 3c       	cpi	r26, 0xC3	; 195
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <main>
  ea:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <adc_init>:
* @param[in] adc_dig_disable  Digital input disable mask. ADC7=Bit7, ADC0=Bit0
* @param[in] adc_div          ADC prescalar (clock divider)
* @return void
*/
void adc_init(uint8_t adc_dig_disable, uint8_t adc_div) {
    DIDR0 = adc_dig_disable;    // Disable digital input buffer (saves power and causes PIN to always read 0)
  f2:	80 93 7e 00 	sts	0x007E, r24
  f6:	68 30       	cpi	r22, 0x08	; 8
  f8:	08 f0       	brcs	.+2      	; 0xfc <adc_init+0xa>
  fa:	67 e0       	ldi	r22, 0x07	; 7
    if(adc_div > ADC_DIV_128) {
        adc_div = ADC_DIV_128;    // Handle invalid prescalars by forcing to 128 division 
    }   
         
    ADCSRA = ((1<<ADEN) | (adc_div));   // Enable ADC and set proper prescale
  fc:	60 68       	ori	r22, 0x80	; 128
  fe:	60 93 7a 00 	sts	0x007A, r22
 102:	08 95       	ret

00000104 <adc_read_one>:
*/
uint16_t adc_read_one(uint8_t adc_mux) {
    uint16_t adc_val = 0;
    static uint8_t adc_last_adcmux;     // Holds adc_mux value from previous function call
    
    if(adc_last_adcmux != adc_mux) {    // Check if sequential function calls use same ADC channel
 104:	88 23       	and	r24, r24
 106:	69 f0       	breq	.+26     	; 0x122 <adc_read_one+0x1e>
        ADMUX = adc_mux;    // Set new ADMUX value
 108:	80 93 7c 00 	sts	0x007C, r24
 10c:	93 e0       	ldi	r25, 0x03	; 3
        for(uint8_t i=0; i < ADC_BAD_CONVERSIONS; i++) {
            /* Throw out first few conversions */
            ADCSRA |= (1<<ADSC);    // start ADC conversion.
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
            while(ADCSRA & (1<<ADSC)); // wait for conversion complete
 118:	80 81       	ld	r24, Z
 11a:	86 fd       	sbrc	r24, 6
 11c:	fd cf       	rjmp	.-6      	; 0x118 <adc_read_one+0x14>
 11e:	91 50       	subi	r25, 0x01	; 1
    uint16_t adc_val = 0;
    static uint8_t adc_last_adcmux;     // Holds adc_mux value from previous function call
    
    if(adc_last_adcmux != adc_mux) {    // Check if sequential function calls use same ADC channel
        ADMUX = adc_mux;    // Set new ADMUX value
        for(uint8_t i=0; i < ADC_BAD_CONVERSIONS; i++) {
 120:	c1 f7       	brne	.-16     	; 0x112 <adc_read_one+0xe>
            ADCSRA |= (1<<ADSC);    // start ADC conversion.
            while(ADCSRA & (1<<ADSC)); // wait for conversion complete
        }
    }
    
    ADCSRA |= (1<<ADSC);   // Start ADC conversion
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24
    while(ADCSRA & (1<<ADSC));  // Wait until conversion is complete (13 adc clock cycles)
 12c:	80 81       	ld	r24, Z
 12e:	86 fd       	sbrc	r24, 6
 130:	fd cf       	rjmp	.-6      	; 0x12c <adc_read_one+0x28>
    adc_val = ADCL;         // Read & store lower byte of adc result
 132:	80 91 78 00 	lds	r24, 0x0078
    adc_val = (ADCH<<8);    // Read & store upper two bits of adc result
 136:	90 91 79 00 	lds	r25, 0x0079
    
    return(adc_val);
}
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret

0000013e <adc_read>:
* @param[in] adc_mux    ADC channel to read
* @param[in] *adc_val   Pointer to location to store data read from ADC
* @param[in] *adc_val_len   Length of adc_val (number of reads to perform)
* @return void
*/
void adc_read(uint8_t adc_mux, uint16_t *adc_val, uint16_t adc_val_len) {
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
    for(uint16_t i=0; i < adc_val_len; i++) {
 14c:	41 15       	cp	r20, r1
 14e:	51 05       	cpc	r21, r1
 150:	89 f0       	breq	.+34     	; 0x174 <adc_read+0x36>
 152:	7a 01       	movw	r14, r20
 154:	d8 2e       	mov	r13, r24
 156:	06 2f       	mov	r16, r22
 158:	17 2f       	mov	r17, r23
 15a:	c0 e0       	ldi	r28, 0x00	; 0
 15c:	d0 e0       	ldi	r29, 0x00	; 0
        adc_val[i] = adc_read_one(adc_mux);
 15e:	8d 2d       	mov	r24, r13
 160:	0e 94 82 00 	call	0x104	; 0x104 <adc_read_one>
 164:	f8 01       	movw	r30, r16
 166:	81 93       	st	Z+, r24
 168:	91 93       	st	Z+, r25
 16a:	8f 01       	movw	r16, r30
* @param[in] *adc_val   Pointer to location to store data read from ADC
* @param[in] *adc_val_len   Length of adc_val (number of reads to perform)
* @return void
*/
void adc_read(uint8_t adc_mux, uint16_t *adc_val, uint16_t adc_val_len) {
    for(uint16_t i=0; i < adc_val_len; i++) {
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	ce 15       	cp	r28, r14
 170:	df 05       	cpc	r29, r15
 172:	a9 f7       	brne	.-22     	; 0x15e <adc_read+0x20>
        adc_val[i] = adc_read_one(adc_mux);
    }
}
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	df 90       	pop	r13
 182:	08 95       	ret

00000184 <data_insertion_sort_uint16>:
* @brief Insertion sort for uint16 array where max length is 65535 (2^16-1)
* @param[in] uint16_t *data     Pointer to array that contains data to average
* @param[in] uint16_t data_len  Length of data array
* @return void
*/
void data_insertion_sort_uint16(uint16_t *data, uint16_t data_len) {
 184:	8f 92       	push	r8
 186:	9f 92       	push	r9
 188:	af 92       	push	r10
 18a:	bf 92       	push	r11
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
    uint16_t i = 0;
    int32_t j = 0;
    uint16_t temp = 0;

    for(i=1; i < data_len; i++) {
 19c:	62 30       	cpi	r22, 0x02	; 2
 19e:	71 05       	cpc	r23, r1
 1a0:	b8 f1       	brcs	.+110    	; 0x210 <data_insertion_sort_uint16+0x8c>
 1a2:	8c 01       	movw	r16, r24
 1a4:	0e 5f       	subi	r16, 0xFE	; 254
 1a6:	1f 4f       	sbci	r17, 0xFF	; 255
 1a8:	ec 01       	movw	r28, r24
 1aa:	81 2c       	mov	r8, r1
 1ac:	91 2c       	mov	r9, r1
 1ae:	54 01       	movw	r10, r8
        temp = data[i];
 1b0:	f8 01       	movw	r30, r16
 1b2:	41 91       	ld	r20, Z+
 1b4:	51 91       	ld	r21, Z+
 1b6:	8f 01       	movw	r16, r30
        j = i - 1;
 1b8:	75 01       	movw	r14, r10
 1ba:	64 01       	movw	r12, r8
        while((temp < data[j]) && (j >= 0)) {
 1bc:	28 81       	ld	r18, Y
 1be:	39 81       	ldd	r19, Y+1	; 0x01
 1c0:	42 17       	cp	r20, r18
 1c2:	53 07       	cpc	r21, r19
 1c4:	78 f4       	brcc	.+30     	; 0x1e4 <data_insertion_sort_uint16+0x60>
 1c6:	de 01       	movw	r26, r28
            data[j+1] = data[j];
 1c8:	32 93       	st	-Z, r19
 1ca:	22 93       	st	-Z, r18
            j = j - 1;
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	c2 1a       	sub	r12, r18
 1d0:	d1 08       	sbc	r13, r1
 1d2:	e1 08       	sbc	r14, r1
 1d4:	f1 08       	sbc	r15, r1
    uint16_t temp = 0;

    for(i=1; i < data_len; i++) {
        temp = data[i];
        j = i - 1;
        while((temp < data[j]) && (j >= 0)) {
 1d6:	3e 91       	ld	r19, -X
 1d8:	2e 91       	ld	r18, -X
 1da:	42 17       	cp	r20, r18
 1dc:	53 07       	cpc	r21, r19
 1de:	10 f4       	brcc	.+4      	; 0x1e4 <data_insertion_sort_uint16+0x60>
 1e0:	ff 20       	and	r15, r15
 1e2:	94 f7       	brge	.-28     	; 0x1c8 <data_insertion_sort_uint16+0x44>
            data[j+1] = data[j];
            j = j - 1;
        }
        data[j+1] = temp;
 1e4:	ef ef       	ldi	r30, 0xFF	; 255
 1e6:	ce 1a       	sub	r12, r30
 1e8:	de 0a       	sbc	r13, r30
 1ea:	cc 0c       	add	r12, r12
 1ec:	dd 1c       	adc	r13, r13
 1ee:	fc 01       	movw	r30, r24
 1f0:	ec 0d       	add	r30, r12
 1f2:	fd 1d       	adc	r31, r13
 1f4:	51 83       	std	Z+1, r21	; 0x01
 1f6:	40 83       	st	Z, r20
 1f8:	22 96       	adiw	r28, 0x02	; 2
 1fa:	ff ef       	ldi	r31, 0xFF	; 255
 1fc:	8f 1a       	sub	r8, r31
 1fe:	9f 0a       	sbc	r9, r31
 200:	af 0a       	sbc	r10, r31
 202:	bf 0a       	sbc	r11, r31
 204:	94 01       	movw	r18, r8
 206:	2f 5f       	subi	r18, 0xFF	; 255
 208:	3f 4f       	sbci	r19, 0xFF	; 255
void data_insertion_sort_uint16(uint16_t *data, uint16_t data_len) {
    uint16_t i = 0;
    int32_t j = 0;
    uint16_t temp = 0;

    for(i=1; i < data_len; i++) {
 20a:	26 17       	cp	r18, r22
 20c:	37 07       	cpc	r19, r23
 20e:	80 f2       	brcs	.-96     	; 0x1b0 <data_insertion_sort_uint16+0x2c>
            data[j+1] = data[j];
            j = j - 1;
        }
        data[j+1] = temp;
    }
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	0f 91       	pop	r16
 218:	ff 90       	pop	r15
 21a:	ef 90       	pop	r14
 21c:	df 90       	pop	r13
 21e:	cf 90       	pop	r12
 220:	bf 90       	pop	r11
 222:	af 90       	pop	r10
 224:	9f 90       	pop	r9
 226:	8f 90       	pop	r8
 228:	08 95       	ret

0000022a <data_2n_average_uint16>:
* @brief Average a uint16 array of 2^n length where max length is 65535 (2^16-1)
* @param[in] uint16_t *data     Pointer to array that contains data to average
* @param[in] uint16_t data_len  Length of data array
* @return uint16_t   Data average over entire array length. Returns 0xFFFF if array is not power of 2. 
*/
uint16_t data_2n_average_uint16(uint16_t *data, uint16_t data_len) {
 22a:	db 01       	movw	r26, r22
    uint16_t pow2_val = 1;              // Power of two to check length of array and calculate dividing factor
    uint8_t pow2_div = 0;               // Power of two divider
    uint16_t pow2_max_val = 0xFFFF;     // Maximum value for an 16-bit unsigned integer
    
    /* Check to see how long it is */
    if(data_len <= 1) { 
 22c:	62 30       	cpi	r22, 0x02	; 2
 22e:	71 05       	cpc	r23, r1
 230:	30 f0       	brcs	.+12     	; 0x23e <data_2n_average_uint16+0x14>
        return(data[0]); // Break from function if not more than one data point 
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
 232:	10 97       	sbiw	r26, 0x00	; 0
 234:	41 f4       	brne	.+16     	; 0x246 <data_2n_average_uint16+0x1c>
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	ba 01       	movw	r22, r20
 23c:	2c c0       	rjmp	.+88     	; 0x296 <data_2n_average_uint16+0x6c>
    uint8_t pow2_div = 0;               // Power of two divider
    uint16_t pow2_max_val = 0xFFFF;     // Maximum value for an 16-bit unsigned integer
    
    /* Check to see how long it is */
    if(data_len <= 1) { 
        return(data[0]); // Break from function if not more than one data point 
 23e:	fc 01       	movw	r30, r24
 240:	80 81       	ld	r24, Z
 242:	91 81       	ldd	r25, Z+1	; 0x01
 244:	08 95       	ret
 246:	fc 01       	movw	r30, r24
 248:	9b 01       	movw	r18, r22
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	82 0f       	add	r24, r18
 250:	93 1f       	adc	r25, r19
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	ba 01       	movw	r22, r20
        avg_acc += data[i];
 258:	21 91       	ld	r18, Z+
 25a:	31 91       	ld	r19, Z+
 25c:	42 0f       	add	r20, r18
 25e:	53 1f       	adc	r21, r19
 260:	61 1d       	adc	r22, r1
 262:	71 1d       	adc	r23, r1
    if(data_len <= 1) { 
        return(data[0]); // Break from function if not more than one data point 
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
 264:	e8 17       	cp	r30, r24
 266:	f9 07       	cpc	r31, r25
 268:	b9 f7       	brne	.-18     	; 0x258 <data_2n_average_uint16+0x2e>
 26a:	15 c0       	rjmp	.+42     	; 0x296 <data_2n_average_uint16+0x6c>
        avg_acc += data[i];
    }
    
    /* Find power2_div where 2^power2_div is length of array */
    while((pow2_val < data_len) && (pow2_val <= pow2_max_val)) {
        pow2_val *= 2;  // Increment pow2_val by next power of 2
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
        pow2_div++;     // Increment divider by one
 270:	8f 5f       	subi	r24, 0xFF	; 255
    for(uint16_t i = 0; i < data_len; i++) {
        avg_acc += data[i];
    }
    
    /* Find power2_div where 2^power2_div is length of array */
    while((pow2_val < data_len) && (pow2_val <= pow2_max_val)) {
 272:	2a 17       	cp	r18, r26
 274:	3b 07       	cpc	r19, r27
 276:	d0 f3       	brcs	.-12     	; 0x26c <data_2n_average_uint16+0x42>
        pow2_val *= 2;  // Increment pow2_val by next power of 2
        pow2_div++;     // Increment divider by one
    }
    
    /* Break from function and return 0xFFFF if array is actually not a power of 2 */
    if(pow2_val != data_len) {
 278:	2a 17       	cp	r18, r26
 27a:	3b 07       	cpc	r19, r27
 27c:	49 f4       	brne	.+18     	; 0x290 <data_2n_average_uint16+0x66>
        return(0xFFFF);
    }

    /* Average and return accumulated value */
    return((uint16_t)(avg_acc >> pow2_div));
 27e:	04 c0       	rjmp	.+8      	; 0x288 <data_2n_average_uint16+0x5e>
 280:	76 95       	lsr	r23
 282:	67 95       	ror	r22
 284:	57 95       	ror	r21
 286:	47 95       	ror	r20
 288:	8a 95       	dec	r24
 28a:	d2 f7       	brpl	.-12     	; 0x280 <data_2n_average_uint16+0x56>
 28c:	ca 01       	movw	r24, r20
 28e:	08 95       	ret
        pow2_div++;     // Increment divider by one
    }
    
    /* Break from function and return 0xFFFF if array is actually not a power of 2 */
    if(pow2_val != data_len) {
        return(0xFFFF);
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	9f ef       	ldi	r25, 0xFF	; 255
 294:	08 95       	ret
    if(data_len <= 1) { 
        return(data[0]); // Break from function if not more than one data point 
    }      
        
    /* Sum entire array */
    for(uint16_t i = 0; i < data_len; i++) {
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	e7 cf       	rjmp	.-50     	; 0x26c <data_2n_average_uint16+0x42>

0000029e <data_trim_uint16>:
* @param[in] uint16_t trim_val      Amount to trim from both sides of array (ex. 2 will eliminate data_from[0, 1] and data_to[n, n-1])
* @return void
*/
// TODO: test this function. trim_val in the for loop may need to be altered
void data_trim_uint16(uint16_t *data_from, uint16_t *data_to, uint16_t raw_len, uint16_t trim_val) {
    for(uint16_t i=trim_val; i < (raw_len - trim_val); i++) {
 29e:	42 1b       	sub	r20, r18
 2a0:	53 0b       	sbc	r21, r19
 2a2:	24 17       	cp	r18, r20
 2a4:	35 07       	cpc	r19, r21
 2a6:	98 f4       	brcc	.+38     	; 0x2ce <data_trim_uint16+0x30>
 2a8:	22 0f       	add	r18, r18
 2aa:	33 1f       	adc	r19, r19
 2ac:	fc 01       	movw	r30, r24
 2ae:	e2 0f       	add	r30, r18
 2b0:	f3 1f       	adc	r31, r19
 2b2:	db 01       	movw	r26, r22
 2b4:	a2 0f       	add	r26, r18
 2b6:	b3 1f       	adc	r27, r19
 2b8:	44 0f       	add	r20, r20
 2ba:	55 1f       	adc	r21, r21
 2bc:	84 0f       	add	r24, r20
 2be:	95 1f       	adc	r25, r21
        data_to[i] = data_from[i];
 2c0:	21 91       	ld	r18, Z+
 2c2:	31 91       	ld	r19, Z+
 2c4:	2d 93       	st	X+, r18
 2c6:	3d 93       	st	X+, r19
* @param[in] uint16_t trim_val      Amount to trim from both sides of array (ex. 2 will eliminate data_from[0, 1] and data_to[n, n-1])
* @return void
*/
// TODO: test this function. trim_val in the for loop may need to be altered
void data_trim_uint16(uint16_t *data_from, uint16_t *data_to, uint16_t raw_len, uint16_t trim_val) {
    for(uint16_t i=trim_val; i < (raw_len - trim_val); i++) {
 2c8:	e8 17       	cp	r30, r24
 2ca:	f9 07       	cpc	r31, r25
 2cc:	c9 f7       	brne	.-14     	; 0x2c0 <data_trim_uint16+0x22>
 2ce:	08 95       	ret

000002d0 <i2c1_init>:
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return uint8_t   Division factor
*/
uint8_t i2c_calc_br_div(uint32_t cpu_freq, uint32_t i2c_freq) {
    return((uint8_t)(((cpu_freq/i2c_freq) - 16)>>1));
 2d0:	0e 94 1f 04 	call	0x83e	; 0x83e <__udivmodsi4>
 2d4:	da 01       	movw	r26, r20
 2d6:	c9 01       	movw	r24, r18
 2d8:	40 97       	sbiw	r24, 0x10	; 16
 2da:	a1 09       	sbc	r26, r1
 2dc:	b1 09       	sbc	r27, r1
 2de:	b6 95       	lsr	r27
 2e0:	a7 95       	ror	r26
 2e2:	97 95       	ror	r25
 2e4:	87 95       	ror	r24
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return void
*/
void i2c1_init(uint32_t cpu_freq, uint32_t i2c_freq) {
    TWBR1 = i2c_calc_br_div(cpu_freq, i2c_freq);   // Set I2C SCL to correct value
 2e6:	80 93 d8 00 	sts	0x00D8, r24
    TWCR1 |= (1<<TWIE); // Enable TWI interrupt
 2ea:	ec ed       	ldi	r30, 0xDC	; 220
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	81 60       	ori	r24, 0x01	; 1
 2f2:	80 83       	st	Z, r24
 2f4:	08 95       	ret

000002f6 <i2c1_tx>:
* @brief Start I2C master tx event
* @param[in] i2c_event   Type of I2C event
* @return uint8_t I2C status register
*/
uint8_t i2c1_tx(uint8_t i2c_event) {
    switch(i2c_event) {
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	41 f0       	breq	.+16     	; 0x30a <i2c1_tx+0x14>
 2fa:	18 f0       	brcs	.+6      	; 0x302 <i2c1_tx+0xc>
 2fc:	82 30       	cpi	r24, 0x02	; 2
 2fe:	49 f0       	breq	.+18     	; 0x312 <i2c1_tx+0x1c>
 300:	0b c0       	rjmp	.+22     	; 0x318 <i2c1_tx+0x22>
        case I2C_START:
            TWCR1 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);    // Tx start condition
 302:	84 ea       	ldi	r24, 0xA4	; 164
 304:	80 93 dc 00 	sts	0x00DC, r24
            break;
 308:	07 c0       	rjmp	.+14     	; 0x318 <i2c1_tx+0x22>
        case I2C_DATA:
            TWCR1 = (1<<TWINT) | (1<<TWEN);                 // Tx data
 30a:	84 e8       	ldi	r24, 0x84	; 132
 30c:	80 93 dc 00 	sts	0x00DC, r24
            break;
 310:	03 c0       	rjmp	.+6      	; 0x318 <i2c1_tx+0x22>
        case I2C_STOP:
            TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);    // Tx stop condition
 312:	84 e9       	ldi	r24, 0x94	; 148
 314:	80 93 dc 00 	sts	0x00DC, r24
            break;
    }
    while (!(TWCR1 & (1 << TWINT))); // Wait for current request to process
 318:	ec ed       	ldi	r30, 0xDC	; 220
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	88 23       	and	r24, r24
 320:	ec f7       	brge	.-6      	; 0x31c <i2c1_tx+0x26>
    return(TWSR1 & I2C_STATUS_REG_MASK);     // Return only status bits in status reg
 322:	80 91 d9 00 	lds	r24, 0x00D9
}
 326:	88 7f       	andi	r24, 0xF8	; 248
 328:	08 95       	ret

0000032a <i2c1_write>:
* @param[in] i2c_device_addr  I2C Device Address (7-bit, right justified)
* @param[in] p_i2c_data       Pointer to I2C message to write
* @param[in] num_i2c_bytes    Number of data bytes to write to I2C device (not counting I2C device address)
* @return uint8_t I2C status. 0x00 if write was successful, others=I2C Status register value on failure
*/
uint8_t i2c1_write(uint8_t i2c_device_addr, uint8_t *p_i2c_data, uint32_t num_i2c_bytes) {
 32a:	8f 92       	push	r8
 32c:	9f 92       	push	r9
 32e:	af 92       	push	r10
 330:	bf 92       	push	r11
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	c8 2f       	mov	r28, r24
 344:	06 2f       	mov	r16, r22
 346:	17 2f       	mov	r17, r23
 348:	69 01       	movw	r12, r18
 34a:	7a 01       	movw	r14, r20
    uint8_t i2c_status = 0;
    
    // I2C Start
    i2c_status = i2c1_tx(I2C_START);  // Start I2C Event
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c1_tx>
    if(i2c_status != I2C_STATUS_START) {
 352:	88 30       	cpi	r24, 0x08	; 8
 354:	11 f0       	breq	.+4      	; 0x35a <i2c1_write+0x30>
        return(i2c_status | I2C_STATUS_FAIL_MASK);    // Break from function if I2C start condition isn't reflected in status reg
 356:	81 60       	ori	r24, 0x01	; 1
 358:	2f c0       	rjmp	.+94     	; 0x3b8 <i2c1_write+0x8e>
    }   
     
    // I2C SLA+R/W
    TWDR1 = ((i2c_device_addr<<1) | I2C_WRITE);    // Set destination addr to device addr (7-bit, left justified), set I2C write condition
 35a:	cc 0f       	add	r28, r28
 35c:	c0 93 db 00 	sts	0x00DB, r28
    i2c_status = i2c1_tx(I2C_DATA);
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c1_tx>
    if(i2c_status != I2C_STATUS_DATA_ACK) {
 366:	88 32       	cpi	r24, 0x28	; 40
 368:	31 f4       	brne	.+12     	; 0x376 <i2c1_write+0x4c>
        return(i2c_status | I2C_STATUS_FAIL_MASK);    // Break from function if I2C data ack isn't reflected in status reg
    }
    
    // I2C Data Transfer
    for(uint32_t i = 0; i < num_i2c_bytes; i++) {
 36a:	c1 14       	cp	r12, r1
 36c:	d1 04       	cpc	r13, r1
 36e:	e1 04       	cpc	r14, r1
 370:	f1 04       	cpc	r15, r1
 372:	19 f4       	brne	.+6      	; 0x37a <i2c1_write+0x50>
 374:	1d c0       	rjmp	.+58     	; 0x3b0 <i2c1_write+0x86>
     
    // I2C SLA+R/W
    TWDR1 = ((i2c_device_addr<<1) | I2C_WRITE);    // Set destination addr to device addr (7-bit, left justified), set I2C write condition
    i2c_status = i2c1_tx(I2C_DATA);
    if(i2c_status != I2C_STATUS_DATA_ACK) {
        return(i2c_status | I2C_STATUS_FAIL_MASK);    // Break from function if I2C data ack isn't reflected in status reg
 376:	81 60       	ori	r24, 0x01	; 1
 378:	1f c0       	rjmp	.+62     	; 0x3b8 <i2c1_write+0x8e>
 37a:	c0 2f       	mov	r28, r16
 37c:	d1 2f       	mov	r29, r17
    }
    
    // I2C Data Transfer
    for(uint32_t i = 0; i < num_i2c_bytes; i++) {
 37e:	81 2c       	mov	r8, r1
 380:	91 2c       	mov	r9, r1
 382:	54 01       	movw	r10, r8
        TWDR1 = p_i2c_data[i];    // Load I2C data into register
 384:	0b ed       	ldi	r16, 0xDB	; 219
 386:	10 e0       	ldi	r17, 0x00	; 0
 388:	89 91       	ld	r24, Y+
 38a:	f8 01       	movw	r30, r16
 38c:	80 83       	st	Z, r24
        i2c_status = i2c1_tx(I2C_DATA);
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c1_tx>
        if(i2c_status != I2C_STATUS_DATA_ACK) {
 394:	88 32       	cpi	r24, 0x28	; 40
 396:	11 f0       	breq	.+4      	; 0x39c <i2c1_write+0x72>
            return(i2c_status | I2C_STATUS_FAIL_MASK);    // Break from function if I2C data ack isn't reflected in status reg
 398:	81 60       	ori	r24, 0x01	; 1
 39a:	0e c0       	rjmp	.+28     	; 0x3b8 <i2c1_write+0x8e>
    if(i2c_status != I2C_STATUS_DATA_ACK) {
        return(i2c_status | I2C_STATUS_FAIL_MASK);    // Break from function if I2C data ack isn't reflected in status reg
    }
    
    // I2C Data Transfer
    for(uint32_t i = 0; i < num_i2c_bytes; i++) {
 39c:	ff ef       	ldi	r31, 0xFF	; 255
 39e:	8f 1a       	sub	r8, r31
 3a0:	9f 0a       	sbc	r9, r31
 3a2:	af 0a       	sbc	r10, r31
 3a4:	bf 0a       	sbc	r11, r31
 3a6:	8c 14       	cp	r8, r12
 3a8:	9d 04       	cpc	r9, r13
 3aa:	ae 04       	cpc	r10, r14
 3ac:	bf 04       	cpc	r11, r15
 3ae:	61 f7       	brne	.-40     	; 0x388 <i2c1_write+0x5e>
            return(i2c_status | I2C_STATUS_FAIL_MASK);    // Break from function if I2C data ack isn't reflected in status reg
        }
    }    
    
    // I2C Stop Condition
    i2c_status = i2c1_tx(I2C_STOP);
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <i2c1_tx>
    return(0);  // Return 0 if write operation was successful
 3b6:	80 e0       	ldi	r24, 0x00	; 0
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	ff 90       	pop	r15
 3c2:	ef 90       	pop	r14
 3c4:	df 90       	pop	r13
 3c6:	cf 90       	pop	r12
 3c8:	bf 90       	pop	r11
 3ca:	af 90       	pop	r10
 3cc:	9f 90       	pop	r9
 3ce:	8f 90       	pop	r8
 3d0:	08 95       	ret

000003d2 <lcd_init>:

/*!
* @brief Initialize LCD
* @return void
*/
void lcd_init(void) {
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	cd b7       	in	r28, 0x3d	; 61
 3d8:	de b7       	in	r29, 0x3e	; 62
 3da:	2a 97       	sbiw	r28, 0x0a	; 10
 3dc:	0f b6       	in	r0, 0x3f	; 63
 3de:	f8 94       	cli
 3e0:	de bf       	out	0x3e, r29	; 62
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	cd bf       	out	0x3d, r28	; 61
    // This function isn't quite right, needs updating once hardware is in
    uint32_t temp_ms = 0;
    
    uint8_t lcd_config_1[2] = {0x00, 0x38};
 3e6:	19 82       	std	Y+1, r1	; 0x01
 3e8:	88 e3       	ldi	r24, 0x38	; 56
 3ea:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t lcd_config_2[1] = {0x39};
 3ec:	89 e3       	ldi	r24, 0x39	; 57
 3ee:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t lcd_config_3[7] = {0x14, 0x78, 0x5E, 0x6D, 0x0C, 0x01, 0x06};
 3f0:	87 e0       	ldi	r24, 0x07	; 7
 3f2:	ee e0       	ldi	r30, 0x0E	; 14
 3f4:	f1 e0       	ldi	r31, 0x01	; 1
 3f6:	de 01       	movw	r26, r28
 3f8:	14 96       	adiw	r26, 0x04	; 4
 3fa:	01 90       	ld	r0, Z+
 3fc:	0d 92       	st	X+, r0
 3fe:	8a 95       	dec	r24
 400:	e1 f7       	brne	.-8      	; 0x3fa <lcd_init+0x28>
        
    i2c1_write(LCD_I2C_ADDR, lcd_config_1, 2);  // Write first commands
 402:	22 e0       	ldi	r18, 0x02	; 2
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	40 e0       	ldi	r20, 0x00	; 0
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	be 01       	movw	r22, r28
 40c:	6f 5f       	subi	r22, 0xFF	; 255
 40e:	7f 4f       	sbci	r23, 0xFF	; 255
 410:	8c e7       	ldi	r24, 0x7C	; 124
 412:	0e 94 95 01 	call	0x32a	; 0x32a <i2c1_write>
    temp_ms = systck;   // Get current time
 416:	80 91 bf 02 	lds	r24, 0x02BF
 41a:	90 91 c0 02 	lds	r25, 0x02C0
 41e:	a0 91 c1 02 	lds	r26, 0x02C1
 422:	b0 91 c2 02 	lds	r27, 0x02C2
    while(systck < (temp_ms + 10));     // Wait for command to process
 426:	ac 01       	movw	r20, r24
 428:	bd 01       	movw	r22, r26
 42a:	46 5f       	subi	r20, 0xF6	; 246
 42c:	5f 4f       	sbci	r21, 0xFF	; 255
 42e:	6f 4f       	sbci	r22, 0xFF	; 255
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	84 17       	cp	r24, r20
 434:	95 07       	cpc	r25, r21
 436:	a6 07       	cpc	r26, r22
 438:	b7 07       	cpc	r27, r23
 43a:	d8 f3       	brcs	.-10     	; 0x432 <lcd_init+0x60>
    
    i2c1_write(LCD_I2C_ADDR, lcd_config_2, 1);  // Write second commands
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	40 e0       	ldi	r20, 0x00	; 0
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	be 01       	movw	r22, r28
 446:	6d 5f       	subi	r22, 0xFD	; 253
 448:	7f 4f       	sbci	r23, 0xFF	; 255
 44a:	8c e7       	ldi	r24, 0x7C	; 124
 44c:	0e 94 95 01 	call	0x32a	; 0x32a <i2c1_write>
    temp_ms = systck;   // Get current time
 450:	80 91 bf 02 	lds	r24, 0x02BF
 454:	90 91 c0 02 	lds	r25, 0x02C0
 458:	a0 91 c1 02 	lds	r26, 0x02C1
 45c:	b0 91 c2 02 	lds	r27, 0x02C2
    while(systck < (temp_ms + 10));     // Wait for command to process
 460:	ac 01       	movw	r20, r24
 462:	bd 01       	movw	r22, r26
 464:	46 5f       	subi	r20, 0xF6	; 246
 466:	5f 4f       	sbci	r21, 0xFF	; 255
 468:	6f 4f       	sbci	r22, 0xFF	; 255
 46a:	7f 4f       	sbci	r23, 0xFF	; 255
 46c:	84 17       	cp	r24, r20
 46e:	95 07       	cpc	r25, r21
 470:	a6 07       	cpc	r26, r22
 472:	b7 07       	cpc	r27, r23
 474:	d8 f3       	brcs	.-10     	; 0x46c <lcd_init+0x9a>
    
    i2c1_write(LCD_I2C_ADDR, lcd_config_3, 7);  // Write third commands
 476:	27 e0       	ldi	r18, 0x07	; 7
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	50 e0       	ldi	r21, 0x00	; 0
 47e:	be 01       	movw	r22, r28
 480:	6c 5f       	subi	r22, 0xFC	; 252
 482:	7f 4f       	sbci	r23, 0xFF	; 255
 484:	8c e7       	ldi	r24, 0x7C	; 124
 486:	0e 94 95 01 	call	0x32a	; 0x32a <i2c1_write>
}
 48a:	2a 96       	adiw	r28, 0x0a	; 10
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	08 95       	ret

0000049c <lc_get>:
uint16_t lc_get(uint8_t lc_adc_mux) {
    // Local variables
    static uint16_t lc_raw[LC_RAW_LEN] = {0};       // Stores raw values read from ADC
    static uint16_t lc_trim[LC_TRIM_LEN] = {0};     // Stores trimmed values read from ADC
    
    adc_read(lc_adc_mux, lc_raw, LC_RAW_LEN);               // Get LC_RAW_LEN values from ADC
 49c:	44 e1       	ldi	r20, 0x14	; 20
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	6e e8       	ldi	r22, 0x8E	; 142
 4a2:	72 e0       	ldi	r23, 0x02	; 2
 4a4:	0e 94 9f 00 	call	0x13e	; 0x13e <adc_read>
    data_insertion_sort_uint16(lc_raw, LC_RAW_LEN);    // Sort raw values from lowest to highest
 4a8:	64 e1       	ldi	r22, 0x14	; 20
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	8e e8       	ldi	r24, 0x8E	; 142
 4ae:	92 e0       	ldi	r25, 0x02	; 2
 4b0:	0e 94 c2 00 	call	0x184	; 0x184 <data_insertion_sort_uint16>
    data_trim_uint16(lc_raw, lc_trim, LC_RAW_LEN, LC_TRIM_VAL);     // Eliminate 2 highest and 2 lowest values in array
 4b4:	22 e0       	ldi	r18, 0x02	; 2
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	44 e1       	ldi	r20, 0x14	; 20
 4ba:	50 e0       	ldi	r21, 0x00	; 0
 4bc:	6e e6       	ldi	r22, 0x6E	; 110
 4be:	72 e0       	ldi	r23, 0x02	; 2
 4c0:	8e e8       	ldi	r24, 0x8E	; 142
 4c2:	92 e0       	ldi	r25, 0x02	; 2
 4c4:	0e 94 4f 01 	call	0x29e	; 0x29e <data_trim_uint16>
    return(data_2n_average_uint16(lc_trim, LC_TRIM_LEN));      // Average and return array
 4c8:	60 e1       	ldi	r22, 0x10	; 16
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	8e e6       	ldi	r24, 0x6E	; 110
 4ce:	92 e0       	ldi	r25, 0x02	; 2
 4d0:	0e 94 15 01 	call	0x22a	; 0x22a <data_2n_average_uint16>
}
 4d4:	08 95       	ret

000004d6 <main>:

uint16_t lc_adc_val = 0;

int main(void) {
    /* Initialization Routines */
    timer1_1ms_init();
 4d6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <timer1_1ms_init>
    uart0_init(F_CPU, UART_BAUD, TRUE);
 4da:	01 e0       	ldi	r16, 0x01	; 1
 4dc:	20 e0       	ldi	r18, 0x00	; 0
 4de:	32 ec       	ldi	r19, 0xC2	; 194
 4e0:	41 e0       	ldi	r20, 0x01	; 1
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	74 e2       	ldi	r23, 0x24	; 36
 4e8:	84 ef       	ldi	r24, 0xF4	; 244
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 97 03 	call	0x72e	; 0x72e <uart0_init>
    i2c1_init(F_CPU, I2C_SCL_FREQ);
 4f0:	20 ea       	ldi	r18, 0xA0	; 160
 4f2:	36 e8       	ldi	r19, 0x86	; 134
 4f4:	41 e0       	ldi	r20, 0x01	; 1
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	74 e2       	ldi	r23, 0x24	; 36
 4fc:	84 ef       	ldi	r24, 0xF4	; 244
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c1_init>
    adc_init((ADC_DIG_DIS_LC | ADC_DIG_DIS_HE), ADC_DIV_128);
 504:	67 e0       	ldi	r22, 0x07	; 7
 506:	87 ec       	ldi	r24, 0xC7	; 199
 508:	0e 94 79 00 	call	0xf2	; 0xf2 <adc_init>
    lcd_init();
 50c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <lcd_init>
    
    PRINT_PROJECT_HEADER(STDIO_UART);
 510:	20 e0       	ldi	r18, 0x00	; 0
 512:	31 e0       	ldi	r19, 0x01	; 1
 514:	4f e2       	ldi	r20, 0x2F	; 47
 516:	50 e0       	ldi	r21, 0x00	; 0
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	85 e1       	ldi	r24, 0x15	; 21
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	0e 94 53 04 	call	0x8a6	; 0x8a6 <fwrite>
 524:	20 e0       	ldi	r18, 0x00	; 0
 526:	31 e0       	ldi	r19, 0x01	; 1
 528:	4f e2       	ldi	r20, 0x2F	; 47
 52a:	50 e0       	ldi	r21, 0x00	; 0
 52c:	61 e0       	ldi	r22, 0x01	; 1
 52e:	70 e0       	ldi	r23, 0x00	; 0
 530:	85 e4       	ldi	r24, 0x45	; 69
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	0e 94 53 04 	call	0x8a6	; 0x8a6 <fwrite>
 538:	20 e0       	ldi	r18, 0x00	; 0
 53a:	31 e0       	ldi	r19, 0x01	; 1
 53c:	4f e2       	ldi	r20, 0x2F	; 47
 53e:	50 e0       	ldi	r21, 0x00	; 0
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	85 e7       	ldi	r24, 0x75	; 117
 546:	91 e0       	ldi	r25, 0x01	; 1
 548:	0e 94 53 04 	call	0x8a6	; 0x8a6 <fwrite>
 54c:	20 e0       	ldi	r18, 0x00	; 0
 54e:	31 e0       	ldi	r19, 0x01	; 1
 550:	4f e2       	ldi	r20, 0x2F	; 47
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	61 e0       	ldi	r22, 0x01	; 1
 556:	70 e0       	ldi	r23, 0x00	; 0
 558:	85 ea       	ldi	r24, 0xA5	; 165
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <fwrite>
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	31 e0       	ldi	r19, 0x01	; 1
 564:	4f e2       	ldi	r20, 0x2F	; 47
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	85 e7       	ldi	r24, 0x75	; 117
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	0e 94 53 04 	call	0x8a6	; 0x8a6 <fwrite>
 574:	20 e0       	ldi	r18, 0x00	; 0
 576:	31 e0       	ldi	r19, 0x01	; 1
 578:	4f e2       	ldi	r20, 0x2F	; 47
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	85 ed       	ldi	r24, 0xD5	; 213
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 53 04 	call	0x8a6	; 0x8a6 <fwrite>
 588:	20 e0       	ldi	r18, 0x00	; 0
 58a:	31 e0       	ldi	r19, 0x01	; 1
 58c:	40 e3       	ldi	r20, 0x30	; 48
 58e:	50 e0       	ldi	r21, 0x00	; 0
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	85 e0       	ldi	r24, 0x05	; 5
 596:	92 e0       	ldi	r25, 0x02	; 2
 598:	0e 94 53 04 	call	0x8a6	; 0x8a6 <fwrite>
    
    while(1) {
        lc_adc_val = lc_get(LC_ADC_40);        
        PRINT_SYSTIME(STDIO_UART);
 59c:	0f 2e       	mov	r0, r31
 59e:	f6 e3       	ldi	r31, 0x36	; 54
 5a0:	ef 2e       	mov	r14, r31
 5a2:	f2 e0       	ldi	r31, 0x02	; 2
 5a4:	ff 2e       	mov	r15, r31
 5a6:	f0 2d       	mov	r31, r0
 5a8:	c0 e0       	ldi	r28, 0x00	; 0
 5aa:	d1 e0       	ldi	r29, 0x01	; 1
        fprintf(STDIO_UART, "Filtered 40Hz ADC read: %d", lc_adc_val);
 5ac:	02 e5       	ldi	r16, 0x52	; 82
 5ae:	12 e0       	ldi	r17, 0x02	; 2
    lcd_init();
    
    PRINT_PROJECT_HEADER(STDIO_UART);
    
    while(1) {
        lc_adc_val = lc_get(LC_ADC_40);        
 5b0:	87 e0       	ldi	r24, 0x07	; 7
 5b2:	0e 94 4e 02 	call	0x49c	; 0x49c <lc_get>
 5b6:	90 93 b7 02 	sts	0x02B7, r25
 5ba:	80 93 b6 02 	sts	0x02B6, r24
        PRINT_SYSTIME(STDIO_UART);
 5be:	80 91 be 02 	lds	r24, 0x02BE
 5c2:	8f 93       	push	r24
 5c4:	80 91 bd 02 	lds	r24, 0x02BD
 5c8:	8f 93       	push	r24
 5ca:	80 91 bc 02 	lds	r24, 0x02BC
 5ce:	1f 92       	push	r1
 5d0:	8f 93       	push	r24
 5d2:	80 91 bb 02 	lds	r24, 0x02BB
 5d6:	1f 92       	push	r1
 5d8:	8f 93       	push	r24
 5da:	80 91 ba 02 	lds	r24, 0x02BA
 5de:	1f 92       	push	r1
 5e0:	8f 93       	push	r24
 5e2:	80 91 b9 02 	lds	r24, 0x02B9
 5e6:	8f 93       	push	r24
 5e8:	80 91 b8 02 	lds	r24, 0x02B8
 5ec:	8f 93       	push	r24
 5ee:	ff 92       	push	r15
 5f0:	ef 92       	push	r14
 5f2:	df 93       	push	r29
 5f4:	cf 93       	push	r28
 5f6:	0e 94 41 04 	call	0x882	; 0x882 <fprintf>
        fprintf(STDIO_UART, "Filtered 40Hz ADC read: %d", lc_adc_val);
 5fa:	80 91 b7 02 	lds	r24, 0x02B7
 5fe:	8f 93       	push	r24
 600:	80 91 b6 02 	lds	r24, 0x02B6
 604:	8f 93       	push	r24
 606:	1f 93       	push	r17
 608:	0f 93       	push	r16
 60a:	df 93       	push	r29
 60c:	cf 93       	push	r28
 60e:	0e 94 41 04 	call	0x882	; 0x882 <fprintf>
        
        // TODO Test & Everything else
        // TODO Add state machine for general program flow
    }
 612:	8d b7       	in	r24, 0x3d	; 61
 614:	9e b7       	in	r25, 0x3e	; 62
 616:	44 96       	adiw	r24, 0x14	; 20
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	9e bf       	out	0x3e, r25	; 62
 61e:	0f be       	out	0x3f, r0	; 63
 620:	8d bf       	out	0x3d, r24	; 61
 622:	c6 cf       	rjmp	.-116    	; 0x5b0 <main+0xda>

00000624 <stdio_uart_put>:
* @param[in] uint8_t ch     Character to write
* @param[in] FILE *stream   Pointer to stream location for stdio
* @return uint8_t
*/
uint8_t stdio_uart_put(uint8_t ch, FILE *stream) {
    uart0_put(ch, TRUE);
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	0e 94 c4 03 	call	0x788	; 0x788 <uart0_put>
    return(0);
}
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	08 95       	ret

0000062e <stdio_uart_get>:
* @brief Read data over UART0 (stdio)
* @param[in] FILE *stream   Pointer to stream location for stdio
* @return uint8_t
*/
uint8_t stdio_uart_get(FILE *stream) {
    uint8_t ch = uart0_get(TRUE);
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	0e 94 0d 04 	call	0x81a	; 0x81a <uart0_get>
    return(ch);
}
 634:	08 95       	ret

00000636 <__vector_11>:
uint8_t systime_s = 0;
uint8_t systime_m = 0;
uint8_t systime_h = 0;
uint16_t systime_d = 0;

ISR(TIMER1_COMPA_vect) {
 636:	1f 92       	push	r1
 638:	0f 92       	push	r0
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	0f 92       	push	r0
 63e:	11 24       	eor	r1, r1
 640:	2f 93       	push	r18
 642:	8f 93       	push	r24
 644:	9f 93       	push	r25
 646:	af 93       	push	r26
 648:	bf 93       	push	r27
    /* Increment systck global vars to keep system time */
    systck++;
 64a:	80 91 bf 02 	lds	r24, 0x02BF
 64e:	90 91 c0 02 	lds	r25, 0x02C0
 652:	a0 91 c1 02 	lds	r26, 0x02C1
 656:	b0 91 c2 02 	lds	r27, 0x02C2
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	a1 1d       	adc	r26, r1
 65e:	b1 1d       	adc	r27, r1
 660:	80 93 bf 02 	sts	0x02BF, r24
 664:	90 93 c0 02 	sts	0x02C0, r25
 668:	a0 93 c1 02 	sts	0x02C1, r26
 66c:	b0 93 c2 02 	sts	0x02C2, r27
    systime_ms++;
 670:	80 91 bd 02 	lds	r24, 0x02BD
 674:	90 91 be 02 	lds	r25, 0x02BE
 678:	01 96       	adiw	r24, 0x01	; 1
    if(systime_ms >= 1000) {
 67a:	88 3e       	cpi	r24, 0xE8	; 232
 67c:	23 e0       	ldi	r18, 0x03	; 3
 67e:	92 07       	cpc	r25, r18
 680:	28 f4       	brcc	.+10     	; 0x68c <__vector_11+0x56>
uint16_t systime_d = 0;

ISR(TIMER1_COMPA_vect) {
    /* Increment systck global vars to keep system time */
    systck++;
    systime_ms++;
 682:	90 93 be 02 	sts	0x02BE, r25
 686:	80 93 bd 02 	sts	0x02BD, r24
 68a:	2b c0       	rjmp	.+86     	; 0x6e2 <__vector_11+0xac>
    if(systime_ms >= 1000) {
        systime_ms = 0;
 68c:	10 92 be 02 	sts	0x02BE, r1
 690:	10 92 bd 02 	sts	0x02BD, r1
        systime_s++;
 694:	80 91 bc 02 	lds	r24, 0x02BC
 698:	8f 5f       	subi	r24, 0xFF	; 255
        if(systime_s >= 60) {
 69a:	8c 33       	cpi	r24, 0x3C	; 60
 69c:	18 f4       	brcc	.+6      	; 0x6a4 <__vector_11+0x6e>
    /* Increment systck global vars to keep system time */
    systck++;
    systime_ms++;
    if(systime_ms >= 1000) {
        systime_ms = 0;
        systime_s++;
 69e:	80 93 bc 02 	sts	0x02BC, r24
 6a2:	1f c0       	rjmp	.+62     	; 0x6e2 <__vector_11+0xac>
        if(systime_s >= 60) {
            systime_s = 0;
 6a4:	10 92 bc 02 	sts	0x02BC, r1
            systime_m++;
 6a8:	80 91 bb 02 	lds	r24, 0x02BB
 6ac:	8f 5f       	subi	r24, 0xFF	; 255
            if(systime_m >= 60) {
 6ae:	8c 33       	cpi	r24, 0x3C	; 60
 6b0:	18 f4       	brcc	.+6      	; 0x6b8 <__vector_11+0x82>
    if(systime_ms >= 1000) {
        systime_ms = 0;
        systime_s++;
        if(systime_s >= 60) {
            systime_s = 0;
            systime_m++;
 6b2:	80 93 bb 02 	sts	0x02BB, r24
 6b6:	15 c0       	rjmp	.+42     	; 0x6e2 <__vector_11+0xac>
            if(systime_m >= 60) {
                systime_m = 0;
 6b8:	10 92 bb 02 	sts	0x02BB, r1
                systime_h++;
 6bc:	80 91 ba 02 	lds	r24, 0x02BA
 6c0:	8f 5f       	subi	r24, 0xFF	; 255
                if(systime_h >= 24) {
 6c2:	88 31       	cpi	r24, 0x18	; 24
 6c4:	18 f4       	brcc	.+6      	; 0x6cc <__vector_11+0x96>
        if(systime_s >= 60) {
            systime_s = 0;
            systime_m++;
            if(systime_m >= 60) {
                systime_m = 0;
                systime_h++;
 6c6:	80 93 ba 02 	sts	0x02BA, r24
 6ca:	0b c0       	rjmp	.+22     	; 0x6e2 <__vector_11+0xac>
                if(systime_h >= 24) {
                    systime_h = 0;
 6cc:	10 92 ba 02 	sts	0x02BA, r1
                    systime_d++;                    
 6d0:	80 91 b8 02 	lds	r24, 0x02B8
 6d4:	90 91 b9 02 	lds	r25, 0x02B9
 6d8:	01 96       	adiw	r24, 0x01	; 1
 6da:	90 93 b9 02 	sts	0x02B9, r25
 6de:	80 93 b8 02 	sts	0x02B8, r24
                }
            }
        }        
    }
}
 6e2:	bf 91       	pop	r27
 6e4:	af 91       	pop	r26
 6e6:	9f 91       	pop	r25
 6e8:	8f 91       	pop	r24
 6ea:	2f 91       	pop	r18
 6ec:	0f 90       	pop	r0
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	0f 90       	pop	r0
 6f2:	1f 90       	pop	r1
 6f4:	18 95       	reti

000006f6 <timer1_1ms_init>:
/*!
* @brief Disable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_disable(void) {
    TIMSK1 &= ~(1<<OCIE1A); // Disable Output compare Interrupt on Match A
 6f6:	af e6       	ldi	r26, 0x6F	; 111
 6f8:	b0 e0       	ldi	r27, 0x00	; 0
 6fa:	8c 91       	ld	r24, X
 6fc:	8d 7f       	andi	r24, 0xFD	; 253
 6fe:	8c 93       	st	X, r24
    TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10)); // Disable timer1 clock source (disables timer)
 700:	e1 e8       	ldi	r30, 0x81	; 129
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	88 7f       	andi	r24, 0xF8	; 248
 708:	80 83       	st	Z, r24
*/
void timer1_1ms_init(void) {
    static uint16_t timer1_1ms_compare_value = 250-1;
        
    timer1_disable();
    TCCR1A = 0x00;  // Make sure no pins are set to output
 70a:	10 92 80 00 	sts	0x0080, r1
    TCCR1B |= (1<<WGM12) | TIMER1_PRESCALE_MASK;  // Set CTC, prescalar to clk(io)/64 (250 counts per 1ms)
 70e:	80 81       	ld	r24, Z
 710:	8b 60       	ori	r24, 0x0B	; 11
 712:	80 83       	st	Z, r24
    OCR1A = timer1_1ms_compare_value;    
 714:	89 ef       	ldi	r24, 0xF9	; 249
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	90 93 89 00 	sts	0x0089, r25
 71c:	80 93 88 00 	sts	0x0088, r24
/*!
* @brief Enable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_enable(void) {
    TIMSK1 |= (1<<OCIE1A);  // Enable Output Compare Interrupt on Match A
 720:	8c 91       	ld	r24, X
 722:	82 60       	ori	r24, 0x02	; 2
 724:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_PRESCALE_MASK; // Enable timer1 clock source (disables timer)
 726:	80 81       	ld	r24, Z
 728:	83 60       	ori	r24, 0x03	; 3
 72a:	80 83       	st	Z, r24
 72c:	08 95       	ret

0000072e <uart0_init>:
* @param[in] uint32_t cpu_freq      Frequency of CPU in Hz
* @param[in] uint32_t uart_baud     Desired UART baud rate
* @param[in] bool b_flow_ctrl    HW Flow control used? (T/F)
* @return void
*/
void uart0_init(uint32_t cpu_freq, uint32_t uart_baud, bool b_flow_ctrl) {    
 72e:	0f 93       	push	r16
    // Set UART0 to no parity, 8 data bits, 1 stop bit
    // Enable Tx & Rx UART
    UCSR0A = 0x00;
 730:	10 92 c0 00 	sts	0x00C0, r1
    UCSR0B = 0x18;
 734:	e8 e1       	ldi	r30, 0x18	; 24
 736:	e0 93 c1 00 	sts	0x00C1, r30
    UCSR0C = 0x06;
 73a:	e6 e0       	ldi	r30, 0x06	; 6
 73c:	e0 93 c2 00 	sts	0x00C2, r30
    
    // Set UART0 Baud Rate
    UBRR0H = (((cpu_freq/uart_baud)/32)-1)>>8;  // Set baud rate div (upper register)
 740:	0e 94 1f 04 	call	0x83e	; 0x83e <__udivmodsi4>
 744:	ba 01       	movw	r22, r20
 746:	a9 01       	movw	r20, r18
 748:	68 94       	set
 74a:	14 f8       	bld	r1, 4
 74c:	76 95       	lsr	r23
 74e:	67 95       	ror	r22
 750:	57 95       	ror	r21
 752:	47 95       	ror	r20
 754:	16 94       	lsr	r1
 756:	d1 f7       	brne	.-12     	; 0x74c <uart0_init+0x1e>
 758:	db 01       	movw	r26, r22
 75a:	ca 01       	movw	r24, r20
 75c:	01 97       	sbiw	r24, 0x01	; 1
 75e:	a1 09       	sbc	r26, r1
 760:	b1 09       	sbc	r27, r1
 762:	89 2f       	mov	r24, r25
 764:	9a 2f       	mov	r25, r26
 766:	ab 2f       	mov	r26, r27
 768:	bb 27       	eor	r27, r27
 76a:	80 93 c5 00 	sts	0x00C5, r24
    UBRR0L = (((cpu_freq/uart_baud)/32)-1);     // Set baud rate div (lower register)   
 76e:	2f ef       	ldi	r18, 0xFF	; 255
 770:	24 0f       	add	r18, r20
 772:	20 93 c4 00 	sts	0x00C4, r18
    
    // Initialize hardware flow control gpio
    if(b_flow_ctrl != FALSE) {
 776:	00 23       	and	r16, r16
 778:	29 f0       	breq	.+10     	; 0x784 <uart0_init+0x56>
        UART_DDR |= UART_RTS;   // Set UART RTS as output
 77a:	52 9a       	sbi	0x0a, 2	; 10
        UART_DDR &= ~UART_CTS;  // Set UART CTS as input
 77c:	53 98       	cbi	0x0a, 3	; 10
        UART_PORT |= (UART_CTS | UART_RTS);  // Turn CTS pullup resistors on, tells host cannot accept data
 77e:	8b b1       	in	r24, 0x0b	; 11
 780:	8c 60       	ori	r24, 0x0C	; 12
 782:	8b b9       	out	0x0b, r24	; 11
    }
}
 784:	0f 91       	pop	r16
 786:	08 95       	ret

00000788 <uart0_put>:
* @brief Write byte over UART0
* @param[in] uint8_t ch     Byte to write
* @param[in] bool b_flow_ctrl    HW Flow control used? (T/F)
* @return uint8_t   0 if write operation successful, 0xFF if operation timeout
*/
uint8_t uart0_put(uint8_t ch, bool b_flow_ctrl) {
 788:	0f 93       	push	r16
 78a:	1f 93       	push	r17
 78c:	96 2f       	mov	r25, r22
    uint32_t uart_start_ms = systck;    // Store start time of operation    
 78e:	40 91 bf 02 	lds	r20, 0x02BF
 792:	50 91 c0 02 	lds	r21, 0x02C0
 796:	60 91 c1 02 	lds	r22, 0x02C1
 79a:	70 91 c2 02 	lds	r23, 0x02C2
    
    if(b_flow_ctrl) {
 79e:	99 23       	and	r25, r25
 7a0:	39 f1       	breq	.+78     	; 0x7f0 <uart0_put+0x68>
        /* Flow Control Implementation */
        UART_ASSRT_RTS();     // Send request to send signal        
 7a2:	9b b1       	in	r25, 0x0b	; 11
 7a4:	94 70       	andi	r25, 0x04	; 4
 7a6:	9b b9       	out	0x0b, r25	; 11
        while(UART_GET_CTS() == 0) {      // Wait for clear to send signal from downstream device (active low)
            if(systck > (uart_start_ms + UART_TOUT_MS)) {
 7a8:	00 91 bf 02 	lds	r16, 0x02BF
 7ac:	10 91 c0 02 	lds	r17, 0x02C0
 7b0:	20 91 c1 02 	lds	r18, 0x02C1
 7b4:	30 91 c2 02 	lds	r19, 0x02C2
 7b8:	4b 5f       	subi	r20, 0xFB	; 251
 7ba:	5f 4f       	sbci	r21, 0xFF	; 255
 7bc:	6f 4f       	sbci	r22, 0xFF	; 255
 7be:	7f 4f       	sbci	r23, 0xFF	; 255
    uint32_t uart_start_ms = systck;    // Store start time of operation    
    
    if(b_flow_ctrl) {
        /* Flow Control Implementation */
        UART_ASSRT_RTS();     // Send request to send signal        
        while(UART_GET_CTS() == 0) {      // Wait for clear to send signal from downstream device (active low)
 7c0:	05 c0       	rjmp	.+10     	; 0x7cc <uart0_put+0x44>
            if(systck > (uart_start_ms + UART_TOUT_MS)) {
 7c2:	40 17       	cp	r20, r16
 7c4:	51 07       	cpc	r21, r17
 7c6:	62 07       	cpc	r22, r18
 7c8:	73 07       	cpc	r23, r19
 7ca:	08 f1       	brcs	.+66     	; 0x80e <uart0_put+0x86>
    uint32_t uart_start_ms = systck;    // Store start time of operation    
    
    if(b_flow_ctrl) {
        /* Flow Control Implementation */
        UART_ASSRT_RTS();     // Send request to send signal        
        while(UART_GET_CTS() == 0) {      // Wait for clear to send signal from downstream device (active low)
 7cc:	4b 9b       	sbis	0x09, 3	; 9
 7ce:	f9 cf       	rjmp	.-14     	; 0x7c2 <uart0_put+0x3a>
            if(systck > (uart_start_ms + UART_TOUT_MS)) {
                return(0xFF);   // Break from function and return error if timeout
            }
        }
        while((UCSR0A & (1<<UDRE0)) == 0x00);    // Wait until tx buffer is empty
 7d0:	e0 ec       	ldi	r30, 0xC0	; 192
 7d2:	f0 e0       	ldi	r31, 0x00	; 0
 7d4:	90 81       	ld	r25, Z
 7d6:	95 ff       	sbrs	r25, 5
 7d8:	fd cf       	rjmp	.-6      	; 0x7d4 <uart0_put+0x4c>
        UDR0 = ch;      // Load tx buffer with character to send
 7da:	80 93 c6 00 	sts	0x00C6, r24
        UART_DSSRT_RTS();     // De-assert RTS signal
 7de:	5a 9a       	sbi	0x0b, 2	; 11
        return(0);  // Return successful write                       
 7e0:	80 e0       	ldi	r24, 0x00	; 0
 7e2:	18 c0       	rjmp	.+48     	; 0x814 <uart0_put+0x8c>
    } else {
        /* Normal Implementation */
        while((UCSR0A & (1<<UDRE0)) == 0x00) {      // Wait until tx buffer is empty
            if(systck > (uart_start_ms + UART_TOUT_MS)) {
 7e4:	04 17       	cp	r16, r20
 7e6:	15 07       	cpc	r17, r21
 7e8:	26 07       	cpc	r18, r22
 7ea:	37 07       	cpc	r19, r23
 7ec:	48 f4       	brcc	.+18     	; 0x800 <uart0_put+0x78>
 7ee:	11 c0       	rjmp	.+34     	; 0x812 <uart0_put+0x8a>
        UDR0 = ch;      // Load tx buffer with character to send
        UART_DSSRT_RTS();     // De-assert RTS signal
        return(0);  // Return successful write                       
    } else {
        /* Normal Implementation */
        while((UCSR0A & (1<<UDRE0)) == 0x00) {      // Wait until tx buffer is empty
 7f0:	e0 ec       	ldi	r30, 0xC0	; 192
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
            if(systck > (uart_start_ms + UART_TOUT_MS)) {
 7f4:	8a 01       	movw	r16, r20
 7f6:	9b 01       	movw	r18, r22
 7f8:	0b 5f       	subi	r16, 0xFB	; 251
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
 7fc:	2f 4f       	sbci	r18, 0xFF	; 255
 7fe:	3f 4f       	sbci	r19, 0xFF	; 255
        UDR0 = ch;      // Load tx buffer with character to send
        UART_DSSRT_RTS();     // De-assert RTS signal
        return(0);  // Return successful write                       
    } else {
        /* Normal Implementation */
        while((UCSR0A & (1<<UDRE0)) == 0x00) {      // Wait until tx buffer is empty
 800:	90 81       	ld	r25, Z
 802:	95 ff       	sbrs	r25, 5
 804:	ef cf       	rjmp	.-34     	; 0x7e4 <uart0_put+0x5c>
            if(systck > (uart_start_ms + UART_TOUT_MS)) {
               return(0xFF);    // Break from function and return error if timeout
            }
        }                           
        UDR0 = ch;      // Load tx buffer with character to send
 806:	80 93 c6 00 	sts	0x00C6, r24
        return(0);  // Return successful write
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	03 c0       	rjmp	.+6      	; 0x814 <uart0_put+0x8c>
    if(b_flow_ctrl) {
        /* Flow Control Implementation */
        UART_ASSRT_RTS();     // Send request to send signal        
        while(UART_GET_CTS() == 0) {      // Wait for clear to send signal from downstream device (active low)
            if(systck > (uart_start_ms + UART_TOUT_MS)) {
                return(0xFF);   // Break from function and return error if timeout
 80e:	8f ef       	ldi	r24, 0xFF	; 255
 810:	01 c0       	rjmp	.+2      	; 0x814 <uart0_put+0x8c>
        return(0);  // Return successful write                       
    } else {
        /* Normal Implementation */
        while((UCSR0A & (1<<UDRE0)) == 0x00) {      // Wait until tx buffer is empty
            if(systck > (uart_start_ms + UART_TOUT_MS)) {
               return(0xFF);    // Break from function and return error if timeout
 812:	8f ef       	ldi	r24, 0xFF	; 255
            }
        }                           
        UDR0 = ch;      // Load tx buffer with character to send
        return(0);  // Return successful write
    }        
}
 814:	1f 91       	pop	r17
 816:	0f 91       	pop	r16
 818:	08 95       	ret

0000081a <uart0_get>:
* @brief Get uint8_t over UART0
* @return uint8_t   Value from UART0
* @param[in] bool b_flow_ctrl    HW Flow control used? (T/F)
*/
uint8_t uart0_get(bool b_flow_ctrl) {
    if(b_flow_ctrl != FALSE) {
 81a:	88 23       	and	r24, r24
 81c:	41 f0       	breq	.+16     	; 0x82e <uart0_get+0x14>
        // TODO
        while((UCSR0A & (1<<RXC0)) == 0x00);    // Wait until rx char flag is set
 81e:	e0 ec       	ldi	r30, 0xC0	; 192
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	88 23       	and	r24, r24
 826:	ec f7       	brge	.-6      	; 0x822 <uart0_get+0x8>
        return(UDR0);
 828:	80 91 c6 00 	lds	r24, 0x00C6
 82c:	08 95       	ret
    } else {
        while((UCSR0A & (1<<RXC0)) == 0x00);    // Wait until rx char flag is set
 82e:	e0 ec       	ldi	r30, 0xC0	; 192
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	88 23       	and	r24, r24
 836:	ec f7       	brge	.-6      	; 0x832 <uart0_get+0x18>
        return(UDR0);           
 838:	80 91 c6 00 	lds	r24, 0x00C6
    }
}
 83c:	08 95       	ret

0000083e <__udivmodsi4>:
 83e:	a1 e2       	ldi	r26, 0x21	; 33
 840:	1a 2e       	mov	r1, r26
 842:	aa 1b       	sub	r26, r26
 844:	bb 1b       	sub	r27, r27
 846:	fd 01       	movw	r30, r26
 848:	0d c0       	rjmp	.+26     	; 0x864 <__udivmodsi4_ep>

0000084a <__udivmodsi4_loop>:
 84a:	aa 1f       	adc	r26, r26
 84c:	bb 1f       	adc	r27, r27
 84e:	ee 1f       	adc	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	a2 17       	cp	r26, r18
 854:	b3 07       	cpc	r27, r19
 856:	e4 07       	cpc	r30, r20
 858:	f5 07       	cpc	r31, r21
 85a:	20 f0       	brcs	.+8      	; 0x864 <__udivmodsi4_ep>
 85c:	a2 1b       	sub	r26, r18
 85e:	b3 0b       	sbc	r27, r19
 860:	e4 0b       	sbc	r30, r20
 862:	f5 0b       	sbc	r31, r21

00000864 <__udivmodsi4_ep>:
 864:	66 1f       	adc	r22, r22
 866:	77 1f       	adc	r23, r23
 868:	88 1f       	adc	r24, r24
 86a:	99 1f       	adc	r25, r25
 86c:	1a 94       	dec	r1
 86e:	69 f7       	brne	.-38     	; 0x84a <__udivmodsi4_loop>
 870:	60 95       	com	r22
 872:	70 95       	com	r23
 874:	80 95       	com	r24
 876:	90 95       	com	r25
 878:	9b 01       	movw	r18, r22
 87a:	ac 01       	movw	r20, r24
 87c:	bd 01       	movw	r22, r26
 87e:	cf 01       	movw	r24, r30
 880:	08 95       	ret

00000882 <fprintf>:
 882:	a0 e0       	ldi	r26, 0x00	; 0
 884:	b0 e0       	ldi	r27, 0x00	; 0
 886:	e7 e4       	ldi	r30, 0x47	; 71
 888:	f4 e0       	ldi	r31, 0x04	; 4
 88a:	0c 94 15 07 	jmp	0xe2a	; 0xe2a <__prologue_saves__+0x20>
 88e:	ae 01       	movw	r20, r28
 890:	47 5f       	subi	r20, 0xF7	; 247
 892:	5f 4f       	sbci	r21, 0xFF	; 255
 894:	6f 81       	ldd	r22, Y+7	; 0x07
 896:	78 85       	ldd	r23, Y+8	; 0x08
 898:	8d 81       	ldd	r24, Y+5	; 0x05
 89a:	9e 81       	ldd	r25, Y+6	; 0x06
 89c:	0e 94 87 04 	call	0x90e	; 0x90e <vfprintf>
 8a0:	e2 e0       	ldi	r30, 0x02	; 2
 8a2:	0c 94 31 07 	jmp	0xe62	; 0xe62 <__epilogue_restores__+0x20>

000008a6 <fwrite>:
 8a6:	a0 e0       	ldi	r26, 0x00	; 0
 8a8:	b0 e0       	ldi	r27, 0x00	; 0
 8aa:	e9 e5       	ldi	r30, 0x59	; 89
 8ac:	f4 e0       	ldi	r31, 0x04	; 4
 8ae:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <__prologue_saves__+0xc>
 8b2:	5b 01       	movw	r10, r22
 8b4:	4a 01       	movw	r8, r20
 8b6:	79 01       	movw	r14, r18
 8b8:	d9 01       	movw	r26, r18
 8ba:	13 96       	adiw	r26, 0x03	; 3
 8bc:	2c 91       	ld	r18, X
 8be:	21 ff       	sbrs	r18, 1
 8c0:	1d c0       	rjmp	.+58     	; 0x8fc <fwrite+0x56>
 8c2:	c0 e0       	ldi	r28, 0x00	; 0
 8c4:	d0 e0       	ldi	r29, 0x00	; 0
 8c6:	c8 15       	cp	r28, r8
 8c8:	d9 05       	cpc	r29, r9
 8ca:	d9 f0       	breq	.+54     	; 0x902 <__stack+0x3>
 8cc:	8c 01       	movw	r16, r24
 8ce:	6c 01       	movw	r12, r24
 8d0:	ca 0c       	add	r12, r10
 8d2:	db 1c       	adc	r13, r11
 8d4:	c8 01       	movw	r24, r16
 8d6:	0c 15       	cp	r16, r12
 8d8:	1d 05       	cpc	r17, r13
 8da:	71 f0       	breq	.+28     	; 0x8f8 <fwrite+0x52>
 8dc:	0f 5f       	subi	r16, 0xFF	; 255
 8de:	1f 4f       	sbci	r17, 0xFF	; 255
 8e0:	d7 01       	movw	r26, r14
 8e2:	18 96       	adiw	r26, 0x08	; 8
 8e4:	ed 91       	ld	r30, X+
 8e6:	fc 91       	ld	r31, X
 8e8:	19 97       	sbiw	r26, 0x09	; 9
 8ea:	b7 01       	movw	r22, r14
 8ec:	dc 01       	movw	r26, r24
 8ee:	8c 91       	ld	r24, X
 8f0:	09 95       	icall
 8f2:	89 2b       	or	r24, r25
 8f4:	79 f3       	breq	.-34     	; 0x8d4 <fwrite+0x2e>
 8f6:	05 c0       	rjmp	.+10     	; 0x902 <__stack+0x3>
 8f8:	21 96       	adiw	r28, 0x01	; 1
 8fa:	e5 cf       	rjmp	.-54     	; 0x8c6 <fwrite+0x20>
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	01 c0       	rjmp	.+2      	; 0x904 <__stack+0x5>
 902:	ce 01       	movw	r24, r28
 904:	cd b7       	in	r28, 0x3d	; 61
 906:	de b7       	in	r29, 0x3e	; 62
 908:	ec e0       	ldi	r30, 0x0C	; 12
 90a:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__epilogue_restores__+0xc>

0000090e <vfprintf>:
 90e:	ac e0       	ldi	r26, 0x0C	; 12
 910:	b0 e0       	ldi	r27, 0x00	; 0
 912:	ed e8       	ldi	r30, 0x8D	; 141
 914:	f4 e0       	ldi	r31, 0x04	; 4
 916:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__prologue_saves__>
 91a:	7c 01       	movw	r14, r24
 91c:	6b 01       	movw	r12, r22
 91e:	8a 01       	movw	r16, r20
 920:	fc 01       	movw	r30, r24
 922:	17 82       	std	Z+7, r1	; 0x07
 924:	16 82       	std	Z+6, r1	; 0x06
 926:	83 81       	ldd	r24, Z+3	; 0x03
 928:	81 ff       	sbrs	r24, 1
 92a:	bd c1       	rjmp	.+890    	; 0xca6 <vfprintf+0x398>
 92c:	ce 01       	movw	r24, r28
 92e:	01 96       	adiw	r24, 0x01	; 1
 930:	4c 01       	movw	r8, r24
 932:	f7 01       	movw	r30, r14
 934:	93 81       	ldd	r25, Z+3	; 0x03
 936:	f6 01       	movw	r30, r12
 938:	93 fd       	sbrc	r25, 3
 93a:	85 91       	lpm	r24, Z+
 93c:	93 ff       	sbrs	r25, 3
 93e:	81 91       	ld	r24, Z+
 940:	6f 01       	movw	r12, r30
 942:	88 23       	and	r24, r24
 944:	09 f4       	brne	.+2      	; 0x948 <vfprintf+0x3a>
 946:	ab c1       	rjmp	.+854    	; 0xc9e <vfprintf+0x390>
 948:	85 32       	cpi	r24, 0x25	; 37
 94a:	39 f4       	brne	.+14     	; 0x95a <vfprintf+0x4c>
 94c:	93 fd       	sbrc	r25, 3
 94e:	85 91       	lpm	r24, Z+
 950:	93 ff       	sbrs	r25, 3
 952:	81 91       	ld	r24, Z+
 954:	6f 01       	movw	r12, r30
 956:	85 32       	cpi	r24, 0x25	; 37
 958:	29 f4       	brne	.+10     	; 0x964 <vfprintf+0x56>
 95a:	b7 01       	movw	r22, r14
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 962:	e7 cf       	rjmp	.-50     	; 0x932 <vfprintf+0x24>
 964:	51 2c       	mov	r5, r1
 966:	31 2c       	mov	r3, r1
 968:	20 e0       	ldi	r18, 0x00	; 0
 96a:	20 32       	cpi	r18, 0x20	; 32
 96c:	a0 f4       	brcc	.+40     	; 0x996 <vfprintf+0x88>
 96e:	8b 32       	cpi	r24, 0x2B	; 43
 970:	69 f0       	breq	.+26     	; 0x98c <vfprintf+0x7e>
 972:	30 f4       	brcc	.+12     	; 0x980 <vfprintf+0x72>
 974:	80 32       	cpi	r24, 0x20	; 32
 976:	59 f0       	breq	.+22     	; 0x98e <vfprintf+0x80>
 978:	83 32       	cpi	r24, 0x23	; 35
 97a:	69 f4       	brne	.+26     	; 0x996 <vfprintf+0x88>
 97c:	20 61       	ori	r18, 0x10	; 16
 97e:	2c c0       	rjmp	.+88     	; 0x9d8 <vfprintf+0xca>
 980:	8d 32       	cpi	r24, 0x2D	; 45
 982:	39 f0       	breq	.+14     	; 0x992 <vfprintf+0x84>
 984:	80 33       	cpi	r24, 0x30	; 48
 986:	39 f4       	brne	.+14     	; 0x996 <vfprintf+0x88>
 988:	21 60       	ori	r18, 0x01	; 1
 98a:	26 c0       	rjmp	.+76     	; 0x9d8 <vfprintf+0xca>
 98c:	22 60       	ori	r18, 0x02	; 2
 98e:	24 60       	ori	r18, 0x04	; 4
 990:	23 c0       	rjmp	.+70     	; 0x9d8 <vfprintf+0xca>
 992:	28 60       	ori	r18, 0x08	; 8
 994:	21 c0       	rjmp	.+66     	; 0x9d8 <vfprintf+0xca>
 996:	27 fd       	sbrc	r18, 7
 998:	27 c0       	rjmp	.+78     	; 0x9e8 <vfprintf+0xda>
 99a:	30 ed       	ldi	r19, 0xD0	; 208
 99c:	38 0f       	add	r19, r24
 99e:	3a 30       	cpi	r19, 0x0A	; 10
 9a0:	78 f4       	brcc	.+30     	; 0x9c0 <vfprintf+0xb2>
 9a2:	26 ff       	sbrs	r18, 6
 9a4:	06 c0       	rjmp	.+12     	; 0x9b2 <vfprintf+0xa4>
 9a6:	fa e0       	ldi	r31, 0x0A	; 10
 9a8:	5f 9e       	mul	r5, r31
 9aa:	30 0d       	add	r19, r0
 9ac:	11 24       	eor	r1, r1
 9ae:	53 2e       	mov	r5, r19
 9b0:	13 c0       	rjmp	.+38     	; 0x9d8 <vfprintf+0xca>
 9b2:	8a e0       	ldi	r24, 0x0A	; 10
 9b4:	38 9e       	mul	r3, r24
 9b6:	30 0d       	add	r19, r0
 9b8:	11 24       	eor	r1, r1
 9ba:	33 2e       	mov	r3, r19
 9bc:	20 62       	ori	r18, 0x20	; 32
 9be:	0c c0       	rjmp	.+24     	; 0x9d8 <vfprintf+0xca>
 9c0:	8e 32       	cpi	r24, 0x2E	; 46
 9c2:	21 f4       	brne	.+8      	; 0x9cc <vfprintf+0xbe>
 9c4:	26 fd       	sbrc	r18, 6
 9c6:	6b c1       	rjmp	.+726    	; 0xc9e <vfprintf+0x390>
 9c8:	20 64       	ori	r18, 0x40	; 64
 9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <vfprintf+0xca>
 9cc:	8c 36       	cpi	r24, 0x6C	; 108
 9ce:	11 f4       	brne	.+4      	; 0x9d4 <vfprintf+0xc6>
 9d0:	20 68       	ori	r18, 0x80	; 128
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <vfprintf+0xca>
 9d4:	88 36       	cpi	r24, 0x68	; 104
 9d6:	41 f4       	brne	.+16     	; 0x9e8 <vfprintf+0xda>
 9d8:	f6 01       	movw	r30, r12
 9da:	93 fd       	sbrc	r25, 3
 9dc:	85 91       	lpm	r24, Z+
 9de:	93 ff       	sbrs	r25, 3
 9e0:	81 91       	ld	r24, Z+
 9e2:	6f 01       	movw	r12, r30
 9e4:	81 11       	cpse	r24, r1
 9e6:	c1 cf       	rjmp	.-126    	; 0x96a <vfprintf+0x5c>
 9e8:	98 2f       	mov	r25, r24
 9ea:	9f 7d       	andi	r25, 0xDF	; 223
 9ec:	95 54       	subi	r25, 0x45	; 69
 9ee:	93 30       	cpi	r25, 0x03	; 3
 9f0:	28 f4       	brcc	.+10     	; 0x9fc <vfprintf+0xee>
 9f2:	0c 5f       	subi	r16, 0xFC	; 252
 9f4:	1f 4f       	sbci	r17, 0xFF	; 255
 9f6:	ff e3       	ldi	r31, 0x3F	; 63
 9f8:	f9 83       	std	Y+1, r31	; 0x01
 9fa:	0d c0       	rjmp	.+26     	; 0xa16 <vfprintf+0x108>
 9fc:	83 36       	cpi	r24, 0x63	; 99
 9fe:	31 f0       	breq	.+12     	; 0xa0c <vfprintf+0xfe>
 a00:	83 37       	cpi	r24, 0x73	; 115
 a02:	71 f0       	breq	.+28     	; 0xa20 <vfprintf+0x112>
 a04:	83 35       	cpi	r24, 0x53	; 83
 a06:	09 f0       	breq	.+2      	; 0xa0a <vfprintf+0xfc>
 a08:	5b c0       	rjmp	.+182    	; 0xac0 <vfprintf+0x1b2>
 a0a:	22 c0       	rjmp	.+68     	; 0xa50 <vfprintf+0x142>
 a0c:	f8 01       	movw	r30, r16
 a0e:	80 81       	ld	r24, Z
 a10:	89 83       	std	Y+1, r24	; 0x01
 a12:	0e 5f       	subi	r16, 0xFE	; 254
 a14:	1f 4f       	sbci	r17, 0xFF	; 255
 a16:	44 24       	eor	r4, r4
 a18:	43 94       	inc	r4
 a1a:	51 2c       	mov	r5, r1
 a1c:	54 01       	movw	r10, r8
 a1e:	15 c0       	rjmp	.+42     	; 0xa4a <vfprintf+0x13c>
 a20:	38 01       	movw	r6, r16
 a22:	f2 e0       	ldi	r31, 0x02	; 2
 a24:	6f 0e       	add	r6, r31
 a26:	71 1c       	adc	r7, r1
 a28:	f8 01       	movw	r30, r16
 a2a:	a0 80       	ld	r10, Z
 a2c:	b1 80       	ldd	r11, Z+1	; 0x01
 a2e:	26 ff       	sbrs	r18, 6
 a30:	03 c0       	rjmp	.+6      	; 0xa38 <vfprintf+0x12a>
 a32:	65 2d       	mov	r22, r5
 a34:	70 e0       	ldi	r23, 0x00	; 0
 a36:	02 c0       	rjmp	.+4      	; 0xa3c <vfprintf+0x12e>
 a38:	6f ef       	ldi	r22, 0xFF	; 255
 a3a:	7f ef       	ldi	r23, 0xFF	; 255
 a3c:	c5 01       	movw	r24, r10
 a3e:	2c 87       	std	Y+12, r18	; 0x0c
 a40:	0e 94 64 06 	call	0xcc8	; 0xcc8 <strnlen>
 a44:	2c 01       	movw	r4, r24
 a46:	83 01       	movw	r16, r6
 a48:	2c 85       	ldd	r18, Y+12	; 0x0c
 a4a:	2f 77       	andi	r18, 0x7F	; 127
 a4c:	22 2e       	mov	r2, r18
 a4e:	17 c0       	rjmp	.+46     	; 0xa7e <vfprintf+0x170>
 a50:	38 01       	movw	r6, r16
 a52:	f2 e0       	ldi	r31, 0x02	; 2
 a54:	6f 0e       	add	r6, r31
 a56:	71 1c       	adc	r7, r1
 a58:	f8 01       	movw	r30, r16
 a5a:	a0 80       	ld	r10, Z
 a5c:	b1 80       	ldd	r11, Z+1	; 0x01
 a5e:	26 ff       	sbrs	r18, 6
 a60:	03 c0       	rjmp	.+6      	; 0xa68 <vfprintf+0x15a>
 a62:	65 2d       	mov	r22, r5
 a64:	70 e0       	ldi	r23, 0x00	; 0
 a66:	02 c0       	rjmp	.+4      	; 0xa6c <vfprintf+0x15e>
 a68:	6f ef       	ldi	r22, 0xFF	; 255
 a6a:	7f ef       	ldi	r23, 0xFF	; 255
 a6c:	c5 01       	movw	r24, r10
 a6e:	2c 87       	std	Y+12, r18	; 0x0c
 a70:	0e 94 59 06 	call	0xcb2	; 0xcb2 <strnlen_P>
 a74:	2c 01       	movw	r4, r24
 a76:	2c 85       	ldd	r18, Y+12	; 0x0c
 a78:	20 68       	ori	r18, 0x80	; 128
 a7a:	22 2e       	mov	r2, r18
 a7c:	83 01       	movw	r16, r6
 a7e:	23 fc       	sbrc	r2, 3
 a80:	1b c0       	rjmp	.+54     	; 0xab8 <vfprintf+0x1aa>
 a82:	83 2d       	mov	r24, r3
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	48 16       	cp	r4, r24
 a88:	59 06       	cpc	r5, r25
 a8a:	b0 f4       	brcc	.+44     	; 0xab8 <vfprintf+0x1aa>
 a8c:	b7 01       	movw	r22, r14
 a8e:	80 e2       	ldi	r24, 0x20	; 32
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 a96:	3a 94       	dec	r3
 a98:	f4 cf       	rjmp	.-24     	; 0xa82 <vfprintf+0x174>
 a9a:	f5 01       	movw	r30, r10
 a9c:	27 fc       	sbrc	r2, 7
 a9e:	85 91       	lpm	r24, Z+
 aa0:	27 fe       	sbrs	r2, 7
 aa2:	81 91       	ld	r24, Z+
 aa4:	5f 01       	movw	r10, r30
 aa6:	b7 01       	movw	r22, r14
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 aae:	31 10       	cpse	r3, r1
 ab0:	3a 94       	dec	r3
 ab2:	f1 e0       	ldi	r31, 0x01	; 1
 ab4:	4f 1a       	sub	r4, r31
 ab6:	51 08       	sbc	r5, r1
 ab8:	41 14       	cp	r4, r1
 aba:	51 04       	cpc	r5, r1
 abc:	71 f7       	brne	.-36     	; 0xa9a <vfprintf+0x18c>
 abe:	e5 c0       	rjmp	.+458    	; 0xc8a <vfprintf+0x37c>
 ac0:	84 36       	cpi	r24, 0x64	; 100
 ac2:	11 f0       	breq	.+4      	; 0xac8 <vfprintf+0x1ba>
 ac4:	89 36       	cpi	r24, 0x69	; 105
 ac6:	39 f5       	brne	.+78     	; 0xb16 <vfprintf+0x208>
 ac8:	f8 01       	movw	r30, r16
 aca:	27 ff       	sbrs	r18, 7
 acc:	07 c0       	rjmp	.+14     	; 0xadc <vfprintf+0x1ce>
 ace:	60 81       	ld	r22, Z
 ad0:	71 81       	ldd	r23, Z+1	; 0x01
 ad2:	82 81       	ldd	r24, Z+2	; 0x02
 ad4:	93 81       	ldd	r25, Z+3	; 0x03
 ad6:	0c 5f       	subi	r16, 0xFC	; 252
 ad8:	1f 4f       	sbci	r17, 0xFF	; 255
 ada:	08 c0       	rjmp	.+16     	; 0xaec <vfprintf+0x1de>
 adc:	60 81       	ld	r22, Z
 ade:	71 81       	ldd	r23, Z+1	; 0x01
 ae0:	07 2e       	mov	r0, r23
 ae2:	00 0c       	add	r0, r0
 ae4:	88 0b       	sbc	r24, r24
 ae6:	99 0b       	sbc	r25, r25
 ae8:	0e 5f       	subi	r16, 0xFE	; 254
 aea:	1f 4f       	sbci	r17, 0xFF	; 255
 aec:	2f 76       	andi	r18, 0x6F	; 111
 aee:	72 2e       	mov	r7, r18
 af0:	97 ff       	sbrs	r25, 7
 af2:	09 c0       	rjmp	.+18     	; 0xb06 <vfprintf+0x1f8>
 af4:	90 95       	com	r25
 af6:	80 95       	com	r24
 af8:	70 95       	com	r23
 afa:	61 95       	neg	r22
 afc:	7f 4f       	sbci	r23, 0xFF	; 255
 afe:	8f 4f       	sbci	r24, 0xFF	; 255
 b00:	9f 4f       	sbci	r25, 0xFF	; 255
 b02:	20 68       	ori	r18, 0x80	; 128
 b04:	72 2e       	mov	r7, r18
 b06:	2a e0       	ldi	r18, 0x0A	; 10
 b08:	30 e0       	ldi	r19, 0x00	; 0
 b0a:	a4 01       	movw	r20, r8
 b0c:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__ultoa_invert>
 b10:	a8 2e       	mov	r10, r24
 b12:	a8 18       	sub	r10, r8
 b14:	44 c0       	rjmp	.+136    	; 0xb9e <vfprintf+0x290>
 b16:	85 37       	cpi	r24, 0x75	; 117
 b18:	29 f4       	brne	.+10     	; 0xb24 <vfprintf+0x216>
 b1a:	2f 7e       	andi	r18, 0xEF	; 239
 b1c:	b2 2e       	mov	r11, r18
 b1e:	2a e0       	ldi	r18, 0x0A	; 10
 b20:	30 e0       	ldi	r19, 0x00	; 0
 b22:	25 c0       	rjmp	.+74     	; 0xb6e <vfprintf+0x260>
 b24:	f2 2f       	mov	r31, r18
 b26:	f9 7f       	andi	r31, 0xF9	; 249
 b28:	bf 2e       	mov	r11, r31
 b2a:	8f 36       	cpi	r24, 0x6F	; 111
 b2c:	c1 f0       	breq	.+48     	; 0xb5e <vfprintf+0x250>
 b2e:	18 f4       	brcc	.+6      	; 0xb36 <vfprintf+0x228>
 b30:	88 35       	cpi	r24, 0x58	; 88
 b32:	79 f0       	breq	.+30     	; 0xb52 <vfprintf+0x244>
 b34:	b4 c0       	rjmp	.+360    	; 0xc9e <vfprintf+0x390>
 b36:	80 37       	cpi	r24, 0x70	; 112
 b38:	19 f0       	breq	.+6      	; 0xb40 <vfprintf+0x232>
 b3a:	88 37       	cpi	r24, 0x78	; 120
 b3c:	21 f0       	breq	.+8      	; 0xb46 <vfprintf+0x238>
 b3e:	af c0       	rjmp	.+350    	; 0xc9e <vfprintf+0x390>
 b40:	2f 2f       	mov	r18, r31
 b42:	20 61       	ori	r18, 0x10	; 16
 b44:	b2 2e       	mov	r11, r18
 b46:	b4 fe       	sbrs	r11, 4
 b48:	0d c0       	rjmp	.+26     	; 0xb64 <vfprintf+0x256>
 b4a:	8b 2d       	mov	r24, r11
 b4c:	84 60       	ori	r24, 0x04	; 4
 b4e:	b8 2e       	mov	r11, r24
 b50:	09 c0       	rjmp	.+18     	; 0xb64 <vfprintf+0x256>
 b52:	24 ff       	sbrs	r18, 4
 b54:	0a c0       	rjmp	.+20     	; 0xb6a <vfprintf+0x25c>
 b56:	9f 2f       	mov	r25, r31
 b58:	96 60       	ori	r25, 0x06	; 6
 b5a:	b9 2e       	mov	r11, r25
 b5c:	06 c0       	rjmp	.+12     	; 0xb6a <vfprintf+0x25c>
 b5e:	28 e0       	ldi	r18, 0x08	; 8
 b60:	30 e0       	ldi	r19, 0x00	; 0
 b62:	05 c0       	rjmp	.+10     	; 0xb6e <vfprintf+0x260>
 b64:	20 e1       	ldi	r18, 0x10	; 16
 b66:	30 e0       	ldi	r19, 0x00	; 0
 b68:	02 c0       	rjmp	.+4      	; 0xb6e <vfprintf+0x260>
 b6a:	20 e1       	ldi	r18, 0x10	; 16
 b6c:	32 e0       	ldi	r19, 0x02	; 2
 b6e:	f8 01       	movw	r30, r16
 b70:	b7 fe       	sbrs	r11, 7
 b72:	07 c0       	rjmp	.+14     	; 0xb82 <vfprintf+0x274>
 b74:	60 81       	ld	r22, Z
 b76:	71 81       	ldd	r23, Z+1	; 0x01
 b78:	82 81       	ldd	r24, Z+2	; 0x02
 b7a:	93 81       	ldd	r25, Z+3	; 0x03
 b7c:	0c 5f       	subi	r16, 0xFC	; 252
 b7e:	1f 4f       	sbci	r17, 0xFF	; 255
 b80:	06 c0       	rjmp	.+12     	; 0xb8e <vfprintf+0x280>
 b82:	60 81       	ld	r22, Z
 b84:	71 81       	ldd	r23, Z+1	; 0x01
 b86:	80 e0       	ldi	r24, 0x00	; 0
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 5f       	subi	r16, 0xFE	; 254
 b8c:	1f 4f       	sbci	r17, 0xFF	; 255
 b8e:	a4 01       	movw	r20, r8
 b90:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__ultoa_invert>
 b94:	a8 2e       	mov	r10, r24
 b96:	a8 18       	sub	r10, r8
 b98:	fb 2d       	mov	r31, r11
 b9a:	ff 77       	andi	r31, 0x7F	; 127
 b9c:	7f 2e       	mov	r7, r31
 b9e:	76 fe       	sbrs	r7, 6
 ba0:	0b c0       	rjmp	.+22     	; 0xbb8 <vfprintf+0x2aa>
 ba2:	37 2d       	mov	r19, r7
 ba4:	3e 7f       	andi	r19, 0xFE	; 254
 ba6:	a5 14       	cp	r10, r5
 ba8:	50 f4       	brcc	.+20     	; 0xbbe <vfprintf+0x2b0>
 baa:	74 fe       	sbrs	r7, 4
 bac:	0a c0       	rjmp	.+20     	; 0xbc2 <vfprintf+0x2b4>
 bae:	72 fc       	sbrc	r7, 2
 bb0:	08 c0       	rjmp	.+16     	; 0xbc2 <vfprintf+0x2b4>
 bb2:	37 2d       	mov	r19, r7
 bb4:	3e 7e       	andi	r19, 0xEE	; 238
 bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <vfprintf+0x2b4>
 bb8:	ba 2c       	mov	r11, r10
 bba:	37 2d       	mov	r19, r7
 bbc:	03 c0       	rjmp	.+6      	; 0xbc4 <vfprintf+0x2b6>
 bbe:	ba 2c       	mov	r11, r10
 bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <vfprintf+0x2b6>
 bc2:	b5 2c       	mov	r11, r5
 bc4:	34 ff       	sbrs	r19, 4
 bc6:	0d c0       	rjmp	.+26     	; 0xbe2 <vfprintf+0x2d4>
 bc8:	fe 01       	movw	r30, r28
 bca:	ea 0d       	add	r30, r10
 bcc:	f1 1d       	adc	r31, r1
 bce:	80 81       	ld	r24, Z
 bd0:	80 33       	cpi	r24, 0x30	; 48
 bd2:	11 f4       	brne	.+4      	; 0xbd8 <vfprintf+0x2ca>
 bd4:	39 7e       	andi	r19, 0xE9	; 233
 bd6:	09 c0       	rjmp	.+18     	; 0xbea <vfprintf+0x2dc>
 bd8:	32 ff       	sbrs	r19, 2
 bda:	06 c0       	rjmp	.+12     	; 0xbe8 <vfprintf+0x2da>
 bdc:	b3 94       	inc	r11
 bde:	b3 94       	inc	r11
 be0:	04 c0       	rjmp	.+8      	; 0xbea <vfprintf+0x2dc>
 be2:	83 2f       	mov	r24, r19
 be4:	86 78       	andi	r24, 0x86	; 134
 be6:	09 f0       	breq	.+2      	; 0xbea <vfprintf+0x2dc>
 be8:	b3 94       	inc	r11
 bea:	33 fd       	sbrc	r19, 3
 bec:	13 c0       	rjmp	.+38     	; 0xc14 <vfprintf+0x306>
 bee:	30 ff       	sbrs	r19, 0
 bf0:	06 c0       	rjmp	.+12     	; 0xbfe <vfprintf+0x2f0>
 bf2:	5a 2c       	mov	r5, r10
 bf4:	b3 14       	cp	r11, r3
 bf6:	18 f4       	brcc	.+6      	; 0xbfe <vfprintf+0x2f0>
 bf8:	53 0c       	add	r5, r3
 bfa:	5b 18       	sub	r5, r11
 bfc:	b3 2c       	mov	r11, r3
 bfe:	b3 14       	cp	r11, r3
 c00:	68 f4       	brcc	.+26     	; 0xc1c <vfprintf+0x30e>
 c02:	b7 01       	movw	r22, r14
 c04:	80 e2       	ldi	r24, 0x20	; 32
 c06:	90 e0       	ldi	r25, 0x00	; 0
 c08:	3c 87       	std	Y+12, r19	; 0x0c
 c0a:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c0e:	b3 94       	inc	r11
 c10:	3c 85       	ldd	r19, Y+12	; 0x0c
 c12:	f5 cf       	rjmp	.-22     	; 0xbfe <vfprintf+0x2f0>
 c14:	b3 14       	cp	r11, r3
 c16:	10 f4       	brcc	.+4      	; 0xc1c <vfprintf+0x30e>
 c18:	3b 18       	sub	r3, r11
 c1a:	01 c0       	rjmp	.+2      	; 0xc1e <vfprintf+0x310>
 c1c:	31 2c       	mov	r3, r1
 c1e:	34 ff       	sbrs	r19, 4
 c20:	12 c0       	rjmp	.+36     	; 0xc46 <vfprintf+0x338>
 c22:	b7 01       	movw	r22, r14
 c24:	80 e3       	ldi	r24, 0x30	; 48
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	3c 87       	std	Y+12, r19	; 0x0c
 c2a:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c2e:	3c 85       	ldd	r19, Y+12	; 0x0c
 c30:	32 ff       	sbrs	r19, 2
 c32:	17 c0       	rjmp	.+46     	; 0xc62 <vfprintf+0x354>
 c34:	31 fd       	sbrc	r19, 1
 c36:	03 c0       	rjmp	.+6      	; 0xc3e <vfprintf+0x330>
 c38:	88 e7       	ldi	r24, 0x78	; 120
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	02 c0       	rjmp	.+4      	; 0xc42 <vfprintf+0x334>
 c3e:	88 e5       	ldi	r24, 0x58	; 88
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	b7 01       	movw	r22, r14
 c44:	0c c0       	rjmp	.+24     	; 0xc5e <vfprintf+0x350>
 c46:	83 2f       	mov	r24, r19
 c48:	86 78       	andi	r24, 0x86	; 134
 c4a:	59 f0       	breq	.+22     	; 0xc62 <vfprintf+0x354>
 c4c:	31 ff       	sbrs	r19, 1
 c4e:	02 c0       	rjmp	.+4      	; 0xc54 <vfprintf+0x346>
 c50:	8b e2       	ldi	r24, 0x2B	; 43
 c52:	01 c0       	rjmp	.+2      	; 0xc56 <vfprintf+0x348>
 c54:	80 e2       	ldi	r24, 0x20	; 32
 c56:	37 fd       	sbrc	r19, 7
 c58:	8d e2       	ldi	r24, 0x2D	; 45
 c5a:	b7 01       	movw	r22, r14
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c62:	a5 14       	cp	r10, r5
 c64:	38 f4       	brcc	.+14     	; 0xc74 <vfprintf+0x366>
 c66:	b7 01       	movw	r22, r14
 c68:	80 e3       	ldi	r24, 0x30	; 48
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c70:	5a 94       	dec	r5
 c72:	f7 cf       	rjmp	.-18     	; 0xc62 <vfprintf+0x354>
 c74:	aa 94       	dec	r10
 c76:	f4 01       	movw	r30, r8
 c78:	ea 0d       	add	r30, r10
 c7a:	f1 1d       	adc	r31, r1
 c7c:	80 81       	ld	r24, Z
 c7e:	b7 01       	movw	r22, r14
 c80:	90 e0       	ldi	r25, 0x00	; 0
 c82:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c86:	a1 10       	cpse	r10, r1
 c88:	f5 cf       	rjmp	.-22     	; 0xc74 <vfprintf+0x366>
 c8a:	33 20       	and	r3, r3
 c8c:	09 f4       	brne	.+2      	; 0xc90 <vfprintf+0x382>
 c8e:	51 ce       	rjmp	.-862    	; 0x932 <vfprintf+0x24>
 c90:	b7 01       	movw	r22, r14
 c92:	80 e2       	ldi	r24, 0x20	; 32
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	0e 94 6f 06 	call	0xcde	; 0xcde <fputc>
 c9a:	3a 94       	dec	r3
 c9c:	f6 cf       	rjmp	.-20     	; 0xc8a <vfprintf+0x37c>
 c9e:	f7 01       	movw	r30, r14
 ca0:	86 81       	ldd	r24, Z+6	; 0x06
 ca2:	97 81       	ldd	r25, Z+7	; 0x07
 ca4:	02 c0       	rjmp	.+4      	; 0xcaa <vfprintf+0x39c>
 ca6:	8f ef       	ldi	r24, 0xFF	; 255
 ca8:	9f ef       	ldi	r25, 0xFF	; 255
 caa:	2c 96       	adiw	r28, 0x0c	; 12
 cac:	e2 e1       	ldi	r30, 0x12	; 18
 cae:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__epilogue_restores__>

00000cb2 <strnlen_P>:
 cb2:	fc 01       	movw	r30, r24
 cb4:	05 90       	lpm	r0, Z+
 cb6:	61 50       	subi	r22, 0x01	; 1
 cb8:	70 40       	sbci	r23, 0x00	; 0
 cba:	01 10       	cpse	r0, r1
 cbc:	d8 f7       	brcc	.-10     	; 0xcb4 <strnlen_P+0x2>
 cbe:	80 95       	com	r24
 cc0:	90 95       	com	r25
 cc2:	8e 0f       	add	r24, r30
 cc4:	9f 1f       	adc	r25, r31
 cc6:	08 95       	ret

00000cc8 <strnlen>:
 cc8:	fc 01       	movw	r30, r24
 cca:	61 50       	subi	r22, 0x01	; 1
 ccc:	70 40       	sbci	r23, 0x00	; 0
 cce:	01 90       	ld	r0, Z+
 cd0:	01 10       	cpse	r0, r1
 cd2:	d8 f7       	brcc	.-10     	; 0xcca <strnlen+0x2>
 cd4:	80 95       	com	r24
 cd6:	90 95       	com	r25
 cd8:	8e 0f       	add	r24, r30
 cda:	9f 1f       	adc	r25, r31
 cdc:	08 95       	ret

00000cde <fputc>:
 cde:	0f 93       	push	r16
 ce0:	1f 93       	push	r17
 ce2:	cf 93       	push	r28
 ce4:	df 93       	push	r29
 ce6:	fb 01       	movw	r30, r22
 ce8:	23 81       	ldd	r18, Z+3	; 0x03
 cea:	21 fd       	sbrc	r18, 1
 cec:	03 c0       	rjmp	.+6      	; 0xcf4 <fputc+0x16>
 cee:	8f ef       	ldi	r24, 0xFF	; 255
 cf0:	9f ef       	ldi	r25, 0xFF	; 255
 cf2:	28 c0       	rjmp	.+80     	; 0xd44 <fputc+0x66>
 cf4:	22 ff       	sbrs	r18, 2
 cf6:	16 c0       	rjmp	.+44     	; 0xd24 <fputc+0x46>
 cf8:	46 81       	ldd	r20, Z+6	; 0x06
 cfa:	57 81       	ldd	r21, Z+7	; 0x07
 cfc:	24 81       	ldd	r18, Z+4	; 0x04
 cfe:	35 81       	ldd	r19, Z+5	; 0x05
 d00:	42 17       	cp	r20, r18
 d02:	53 07       	cpc	r21, r19
 d04:	44 f4       	brge	.+16     	; 0xd16 <fputc+0x38>
 d06:	a0 81       	ld	r26, Z
 d08:	b1 81       	ldd	r27, Z+1	; 0x01
 d0a:	9d 01       	movw	r18, r26
 d0c:	2f 5f       	subi	r18, 0xFF	; 255
 d0e:	3f 4f       	sbci	r19, 0xFF	; 255
 d10:	31 83       	std	Z+1, r19	; 0x01
 d12:	20 83       	st	Z, r18
 d14:	8c 93       	st	X, r24
 d16:	26 81       	ldd	r18, Z+6	; 0x06
 d18:	37 81       	ldd	r19, Z+7	; 0x07
 d1a:	2f 5f       	subi	r18, 0xFF	; 255
 d1c:	3f 4f       	sbci	r19, 0xFF	; 255
 d1e:	37 83       	std	Z+7, r19	; 0x07
 d20:	26 83       	std	Z+6, r18	; 0x06
 d22:	10 c0       	rjmp	.+32     	; 0xd44 <fputc+0x66>
 d24:	eb 01       	movw	r28, r22
 d26:	09 2f       	mov	r16, r25
 d28:	18 2f       	mov	r17, r24
 d2a:	00 84       	ldd	r0, Z+8	; 0x08
 d2c:	f1 85       	ldd	r31, Z+9	; 0x09
 d2e:	e0 2d       	mov	r30, r0
 d30:	09 95       	icall
 d32:	89 2b       	or	r24, r25
 d34:	e1 f6       	brne	.-72     	; 0xcee <fputc+0x10>
 d36:	8e 81       	ldd	r24, Y+6	; 0x06
 d38:	9f 81       	ldd	r25, Y+7	; 0x07
 d3a:	01 96       	adiw	r24, 0x01	; 1
 d3c:	9f 83       	std	Y+7, r25	; 0x07
 d3e:	8e 83       	std	Y+6, r24	; 0x06
 d40:	81 2f       	mov	r24, r17
 d42:	90 2f       	mov	r25, r16
 d44:	df 91       	pop	r29
 d46:	cf 91       	pop	r28
 d48:	1f 91       	pop	r17
 d4a:	0f 91       	pop	r16
 d4c:	08 95       	ret

00000d4e <__ultoa_invert>:
 d4e:	fa 01       	movw	r30, r20
 d50:	aa 27       	eor	r26, r26
 d52:	28 30       	cpi	r18, 0x08	; 8
 d54:	51 f1       	breq	.+84     	; 0xdaa <__ultoa_invert+0x5c>
 d56:	20 31       	cpi	r18, 0x10	; 16
 d58:	81 f1       	breq	.+96     	; 0xdba <__ultoa_invert+0x6c>
 d5a:	e8 94       	clt
 d5c:	6f 93       	push	r22
 d5e:	6e 7f       	andi	r22, 0xFE	; 254
 d60:	6e 5f       	subi	r22, 0xFE	; 254
 d62:	7f 4f       	sbci	r23, 0xFF	; 255
 d64:	8f 4f       	sbci	r24, 0xFF	; 255
 d66:	9f 4f       	sbci	r25, 0xFF	; 255
 d68:	af 4f       	sbci	r26, 0xFF	; 255
 d6a:	b1 e0       	ldi	r27, 0x01	; 1
 d6c:	3e d0       	rcall	.+124    	; 0xdea <__ultoa_invert+0x9c>
 d6e:	b4 e0       	ldi	r27, 0x04	; 4
 d70:	3c d0       	rcall	.+120    	; 0xdea <__ultoa_invert+0x9c>
 d72:	67 0f       	add	r22, r23
 d74:	78 1f       	adc	r23, r24
 d76:	89 1f       	adc	r24, r25
 d78:	9a 1f       	adc	r25, r26
 d7a:	a1 1d       	adc	r26, r1
 d7c:	68 0f       	add	r22, r24
 d7e:	79 1f       	adc	r23, r25
 d80:	8a 1f       	adc	r24, r26
 d82:	91 1d       	adc	r25, r1
 d84:	a1 1d       	adc	r26, r1
 d86:	6a 0f       	add	r22, r26
 d88:	71 1d       	adc	r23, r1
 d8a:	81 1d       	adc	r24, r1
 d8c:	91 1d       	adc	r25, r1
 d8e:	a1 1d       	adc	r26, r1
 d90:	20 d0       	rcall	.+64     	; 0xdd2 <__ultoa_invert+0x84>
 d92:	09 f4       	brne	.+2      	; 0xd96 <__ultoa_invert+0x48>
 d94:	68 94       	set
 d96:	3f 91       	pop	r19
 d98:	2a e0       	ldi	r18, 0x0A	; 10
 d9a:	26 9f       	mul	r18, r22
 d9c:	11 24       	eor	r1, r1
 d9e:	30 19       	sub	r19, r0
 da0:	30 5d       	subi	r19, 0xD0	; 208
 da2:	31 93       	st	Z+, r19
 da4:	de f6       	brtc	.-74     	; 0xd5c <__ultoa_invert+0xe>
 da6:	cf 01       	movw	r24, r30
 da8:	08 95       	ret
 daa:	46 2f       	mov	r20, r22
 dac:	47 70       	andi	r20, 0x07	; 7
 dae:	40 5d       	subi	r20, 0xD0	; 208
 db0:	41 93       	st	Z+, r20
 db2:	b3 e0       	ldi	r27, 0x03	; 3
 db4:	0f d0       	rcall	.+30     	; 0xdd4 <__ultoa_invert+0x86>
 db6:	c9 f7       	brne	.-14     	; 0xdaa <__ultoa_invert+0x5c>
 db8:	f6 cf       	rjmp	.-20     	; 0xda6 <__ultoa_invert+0x58>
 dba:	46 2f       	mov	r20, r22
 dbc:	4f 70       	andi	r20, 0x0F	; 15
 dbe:	40 5d       	subi	r20, 0xD0	; 208
 dc0:	4a 33       	cpi	r20, 0x3A	; 58
 dc2:	18 f0       	brcs	.+6      	; 0xdca <__ultoa_invert+0x7c>
 dc4:	49 5d       	subi	r20, 0xD9	; 217
 dc6:	31 fd       	sbrc	r19, 1
 dc8:	40 52       	subi	r20, 0x20	; 32
 dca:	41 93       	st	Z+, r20
 dcc:	02 d0       	rcall	.+4      	; 0xdd2 <__ultoa_invert+0x84>
 dce:	a9 f7       	brne	.-22     	; 0xdba <__ultoa_invert+0x6c>
 dd0:	ea cf       	rjmp	.-44     	; 0xda6 <__ultoa_invert+0x58>
 dd2:	b4 e0       	ldi	r27, 0x04	; 4
 dd4:	a6 95       	lsr	r26
 dd6:	97 95       	ror	r25
 dd8:	87 95       	ror	r24
 dda:	77 95       	ror	r23
 ddc:	67 95       	ror	r22
 dde:	ba 95       	dec	r27
 de0:	c9 f7       	brne	.-14     	; 0xdd4 <__ultoa_invert+0x86>
 de2:	00 97       	sbiw	r24, 0x00	; 0
 de4:	61 05       	cpc	r22, r1
 de6:	71 05       	cpc	r23, r1
 de8:	08 95       	ret
 dea:	9b 01       	movw	r18, r22
 dec:	ac 01       	movw	r20, r24
 dee:	0a 2e       	mov	r0, r26
 df0:	06 94       	lsr	r0
 df2:	57 95       	ror	r21
 df4:	47 95       	ror	r20
 df6:	37 95       	ror	r19
 df8:	27 95       	ror	r18
 dfa:	ba 95       	dec	r27
 dfc:	c9 f7       	brne	.-14     	; 0xdf0 <__ultoa_invert+0xa2>
 dfe:	62 0f       	add	r22, r18
 e00:	73 1f       	adc	r23, r19
 e02:	84 1f       	adc	r24, r20
 e04:	95 1f       	adc	r25, r21
 e06:	a0 1d       	adc	r26, r0
 e08:	08 95       	ret

00000e0a <__prologue_saves__>:
 e0a:	2f 92       	push	r2
 e0c:	3f 92       	push	r3
 e0e:	4f 92       	push	r4
 e10:	5f 92       	push	r5
 e12:	6f 92       	push	r6
 e14:	7f 92       	push	r7
 e16:	8f 92       	push	r8
 e18:	9f 92       	push	r9
 e1a:	af 92       	push	r10
 e1c:	bf 92       	push	r11
 e1e:	cf 92       	push	r12
 e20:	df 92       	push	r13
 e22:	ef 92       	push	r14
 e24:	ff 92       	push	r15
 e26:	0f 93       	push	r16
 e28:	1f 93       	push	r17
 e2a:	cf 93       	push	r28
 e2c:	df 93       	push	r29
 e2e:	cd b7       	in	r28, 0x3d	; 61
 e30:	de b7       	in	r29, 0x3e	; 62
 e32:	ca 1b       	sub	r28, r26
 e34:	db 0b       	sbc	r29, r27
 e36:	0f b6       	in	r0, 0x3f	; 63
 e38:	f8 94       	cli
 e3a:	de bf       	out	0x3e, r29	; 62
 e3c:	0f be       	out	0x3f, r0	; 63
 e3e:	cd bf       	out	0x3d, r28	; 61
 e40:	09 94       	ijmp

00000e42 <__epilogue_restores__>:
 e42:	2a 88       	ldd	r2, Y+18	; 0x12
 e44:	39 88       	ldd	r3, Y+17	; 0x11
 e46:	48 88       	ldd	r4, Y+16	; 0x10
 e48:	5f 84       	ldd	r5, Y+15	; 0x0f
 e4a:	6e 84       	ldd	r6, Y+14	; 0x0e
 e4c:	7d 84       	ldd	r7, Y+13	; 0x0d
 e4e:	8c 84       	ldd	r8, Y+12	; 0x0c
 e50:	9b 84       	ldd	r9, Y+11	; 0x0b
 e52:	aa 84       	ldd	r10, Y+10	; 0x0a
 e54:	b9 84       	ldd	r11, Y+9	; 0x09
 e56:	c8 84       	ldd	r12, Y+8	; 0x08
 e58:	df 80       	ldd	r13, Y+7	; 0x07
 e5a:	ee 80       	ldd	r14, Y+6	; 0x06
 e5c:	fd 80       	ldd	r15, Y+5	; 0x05
 e5e:	0c 81       	ldd	r16, Y+4	; 0x04
 e60:	1b 81       	ldd	r17, Y+3	; 0x03
 e62:	aa 81       	ldd	r26, Y+2	; 0x02
 e64:	b9 81       	ldd	r27, Y+1	; 0x01
 e66:	ce 0f       	add	r28, r30
 e68:	d1 1d       	adc	r29, r1
 e6a:	0f b6       	in	r0, 0x3f	; 63
 e6c:	f8 94       	cli
 e6e:	de bf       	out	0x3e, r29	; 62
 e70:	0f be       	out	0x3f, r0	; 63
 e72:	cd bf       	out	0x3d, r28	; 61
 e74:	ed 01       	movw	r28, r26
 e76:	08 95       	ret

00000e78 <_exit>:
 e78:	f8 94       	cli

00000e7a <__stop_program>:
 e7a:	ff cf       	rjmp	.-2      	; 0xe7a <__stop_program>
