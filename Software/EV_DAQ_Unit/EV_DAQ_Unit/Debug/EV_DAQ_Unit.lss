
EV_DAQ_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000050c  000005a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800114  00800114  000005b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000137d  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000676  00000000  00000000  00001a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000572  00000000  00000000  000020ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00002674  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bd  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007da  00000000  00000000  00002c81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000345b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e0       	ldi	r30, 0x0C	; 12
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 31       	cpi	r26, 0x14	; 20
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e1       	ldi	r26, 0x14	; 20
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	af 31       	cpi	r26, 0x1F	; 31
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <main>
  ea:	0c 94 84 02 	jmp	0x508	; 0x508 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <gpio_init>:
* @brief Initialize GPIO for EV DAQ UNIT project
* @return void
*/
void gpio_init(void) {
    /* Setup Switches */
    clrbits(SW_DDR, ((1<<SW1)|(1<<SW2))); // Set switches to input
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	8c 7f       	andi	r24, 0xFC	; 252
  f6:	84 b9       	out	0x04, r24	; 4
    sbits(SW_PORT, ((1<<SW1)|(1<<SW2)));  // Turn on pullups on switches
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	83 60       	ori	r24, 0x03	; 3
  fc:	85 b9       	out	0x05, r24	; 5
    
    /* Setup LEDs */
    sbits(LED_DDR, ((1<<LED_RED)|(1<<LED_YLW)));  // LEDs as output
  fe:	8a b1       	in	r24, 0x0a	; 10
 100:	80 6c       	ori	r24, 0xC0	; 192
 102:	8a b9       	out	0x0a, r24	; 10
    
    /* Setup LCD /RST */
    sbit(LCD_RST_DDR, LCD_RST);     // Set LCD_RST to output
 104:	22 9a       	sbi	0x04, 2	; 4
    sbit(LCD_RST_PORT, LCD_RST);    // Drive LCD_RST high    
 106:	2a 9a       	sbi	0x05, 2	; 5
 108:	08 95       	ret

0000010a <i2c1_init>:
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return uint8_t   Division factor
*/
uint8_t i2c_calc_br_div(uint32_t cpu_freq, uint32_t i2c_freq) {
    return((uint8_t)(((cpu_freq/i2c_freq) - 16)>>1));
 10a:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__udivmodsi4>
 10e:	da 01       	movw	r26, r20
 110:	c9 01       	movw	r24, r18
 112:	40 97       	sbiw	r24, 0x10	; 16
 114:	a1 09       	sbc	r26, r1
 116:	b1 09       	sbc	r27, r1
 118:	b6 95       	lsr	r27
 11a:	a7 95       	ror	r26
 11c:	97 95       	ror	r25
 11e:	87 95       	ror	r24
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return void
*/
void i2c1_init(uint32_t cpu_freq, uint32_t i2c_freq) {
    TWBR1 = i2c_calc_br_div(cpu_freq, i2c_freq);   // Set I2C SCL to correct value
 120:	80 93 d8 00 	sts	0x00D8, r24
    TWCR1 |= (1<<TWIE); // Enable TWI interrupt
 124:	ec ed       	ldi	r30, 0xDC	; 220
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <i2c1_tx>:
* @brief Start I2C master tx event
* @param[in] i2c_event   Type of I2C event
* @return uint8_t I2C status register
*/
uint8_t i2c1_tx(uint8_t i2c_event) {
    switch(i2c_event) {
 130:	81 30       	cpi	r24, 0x01	; 1
 132:	69 f0       	breq	.+26     	; 0x14e <i2c1_tx+0x1e>
 134:	18 f0       	brcs	.+6      	; 0x13c <i2c1_tx+0xc>
 136:	82 30       	cpi	r24, 0x02	; 2
 138:	99 f0       	breq	.+38     	; 0x160 <i2c1_tx+0x30>
 13a:	1a c0       	rjmp	.+52     	; 0x170 <i2c1_tx+0x40>
        case I2C_START:
            TWCR1 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);    // Tx start condition
 13c:	84 ea       	ldi	r24, 0xA4	; 164
 13e:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWINT))); // Wait for current request to process            
 142:	ec ed       	ldi	r30, 0xDC	; 220
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 23       	and	r24, r24
 14a:	ec f7       	brge	.-6      	; 0x146 <i2c1_tx+0x16>
 14c:	11 c0       	rjmp	.+34     	; 0x170 <i2c1_tx+0x40>
            break;
        case I2C_DATA:
            TWCR1 = (1<<TWINT) | (1<<TWEN);                 // Tx data
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWINT))); // Wait for current request to process
 154:	ec ed       	ldi	r30, 0xDC	; 220
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	ec f7       	brge	.-6      	; 0x158 <i2c1_tx+0x28>
 15e:	08 c0       	rjmp	.+16     	; 0x170 <i2c1_tx+0x40>
            break;
        case I2C_STOP:
            TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);    // Tx stop condition
 160:	84 e9       	ldi	r24, 0x94	; 148
 162:	80 93 dc 00 	sts	0x00DC, r24
            while(!(TWCR1 & (1<<TWSTO))); // Wait for current request to process
 166:	ec ed       	ldi	r30, 0xDC	; 220
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	84 ff       	sbrs	r24, 4
 16e:	fd cf       	rjmp	.-6      	; 0x16a <i2c1_tx+0x3a>
            break;
    }
    return(TWSR1 & I2C_STATUS_REG_MASK);     // Return only status bits in status reg
 170:	80 91 d9 00 	lds	r24, 0x00D9
}
 174:	88 7f       	andi	r24, 0xF8	; 248
 176:	08 95       	ret

00000178 <lcd_write>:
* @param uint8_t cmd_data       0 to send command, others to send data
* @param uint8_t *data          Pointer to data array to send.
* @param uint16_t num_bytes     Length of data to send.
* @return void
*/
void lcd_write(uint8_t cmd_data, uint8_t *data, uint16_t num_bytes) {
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	c8 2f       	mov	r28, r24
 186:	7b 01       	movw	r14, r22
 188:	8a 01       	movw	r16, r20
    i2c1_tx(I2C_START);     // Send start condition
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    TWDR1 = LCD_I2C_ADDR;   // Set Slave Addr
 190:	8c e7       	ldi	r24, 0x7C	; 124
 192:	80 93 db 00 	sts	0x00DB, r24
    i2c1_tx(I2C_DATA);      // Send Slave Addr
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    
    if(cmd_data == LCD_CMD) {
 19c:	c1 11       	cpse	r28, r1
 19e:	06 c0       	rjmp	.+12     	; 0x1ac <lcd_write+0x34>
        TWDR1 = LCD_CMD;    // Load "Command" byte for LCD
 1a0:	10 92 db 00 	sts	0x00DB, r1
        i2c1_tx(I2C_DATA);  // Send "Command" byte
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
 1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <lcd_write+0x40>
    } else {
        TWDR1 = LCD_DATA;   // Load "Data" byte for LCD
 1ac:	80 e4       	ldi	r24, 0x40	; 64
 1ae:	80 93 db 00 	sts	0x00DB, r24
        i2c1_tx(I2C_DATA);  // Send "Data" byte
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    }
    
    for(uint16_t i=0; i<num_bytes; i++) {   // Send bytes
 1b8:	01 15       	cp	r16, r1
 1ba:	11 05       	cpc	r17, r1
 1bc:	89 f0       	breq	.+34     	; 0x1e0 <lcd_write+0x68>
 1be:	e7 01       	movw	r28, r14
 1c0:	0e 0d       	add	r16, r14
 1c2:	1f 1d       	adc	r17, r15
        TWDR1 = data[i];
 1c4:	0f 2e       	mov	r0, r31
 1c6:	fb ed       	ldi	r31, 0xDB	; 219
 1c8:	ef 2e       	mov	r14, r31
 1ca:	f1 2c       	mov	r15, r1
 1cc:	f0 2d       	mov	r31, r0
 1ce:	89 91       	ld	r24, Y+
 1d0:	f7 01       	movw	r30, r14
 1d2:	80 83       	st	Z, r24
        i2c1_tx(I2C_DATA);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
    } else {
        TWDR1 = LCD_DATA;   // Load "Data" byte for LCD
        i2c1_tx(I2C_DATA);  // Send "Data" byte
    }
    
    for(uint16_t i=0; i<num_bytes; i++) {   // Send bytes
 1da:	c0 17       	cp	r28, r16
 1dc:	d1 07       	cpc	r29, r17
 1de:	b9 f7       	brne	.-18     	; 0x1ce <lcd_write+0x56>
        TWDR1 = data[i];
        i2c1_tx(I2C_DATA);
    }
    
    i2c1_tx(I2C_STOP);  // Send stop condition
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0e 94 98 00 	call	0x130	; 0x130 <i2c1_tx>
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	ff 90       	pop	r15
 1f0:	ef 90       	pop	r14
 1f2:	08 95       	ret

000001f4 <lcd_test>:

/*!
* @brief Test LCD (custom test)
* @return void
*/
void lcd_test(void) {
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
 1fc:	67 97       	sbiw	r28, 0x17	; 23
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	f8 94       	cli
 202:	de bf       	out	0x3e, r29	; 62
 204:	0f be       	out	0x3f, r0	; 63
 206:	cd bf       	out	0x3d, r28	; 61
    uint8_t lcd_config_1[1] = {0x38};
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	89 83       	std	Y+1, r24	; 0x01
    uint8_t lcd_config_2[1] = {0x39};
 20c:	89 e3       	ldi	r24, 0x39	; 57
 20e:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t lcd_config_3[7] = {0x14, 0x78, 0x5E, 0x6D, 0x0C, 0x01, 0x06};
 210:	97 e0       	ldi	r25, 0x07	; 7
 212:	e0 e0       	ldi	r30, 0x00	; 0
 214:	f1 e0       	ldi	r31, 0x01	; 1
 216:	de 01       	movw	r26, r28
 218:	13 96       	adiw	r26, 0x03	; 3
 21a:	01 90       	ld	r0, Z+
 21c:	0d 92       	st	X+, r0
 21e:	9a 95       	dec	r25
 220:	e1 f7       	brne	.-8      	; 0x21a <lcd_test+0x26>
    uint8_t lcd_config_4[1] = {0b01110000};
 222:	90 e7       	ldi	r25, 0x70	; 112
 224:	9a 87       	std	Y+10, r25	; 0x0a
    uint8_t lcd_config_5[2] = {0x39, 0x01};
 226:	8b 87       	std	Y+11, r24	; 0x0b
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	8c 87       	std	Y+12, r24	; 0x0c
                                
    uint8_t lcd_test_str[11] = "Hello World";
 22c:	8b e0       	ldi	r24, 0x0B	; 11
 22e:	e7 e0       	ldi	r30, 0x07	; 7
 230:	f1 e0       	ldi	r31, 0x01	; 1
 232:	de 01       	movw	r26, r28
 234:	1d 96       	adiw	r26, 0x0d	; 13
 236:	01 90       	ld	r0, Z+
 238:	0d 92       	st	X+, r0
 23a:	8a 95       	dec	r24
 23c:	e1 f7       	brne	.-8      	; 0x236 <lcd_test+0x42>
    
    lcd_write(LCD_CMD, lcd_config_1, 1);
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	be 01       	movw	r22, r28
 244:	6f 5f       	subi	r22, 0xFF	; 255
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_write>
    delay(10);
 24e:	8a e0       	ldi	r24, 0x0A	; 10
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 48 02 	call	0x490	; 0x490 <delay>
    lcd_write(LCD_CMD, lcd_config_2, 1);
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	50 e0       	ldi	r21, 0x00	; 0
 25a:	be 01       	movw	r22, r28
 25c:	6e 5f       	subi	r22, 0xFE	; 254
 25e:	7f 4f       	sbci	r23, 0xFF	; 255
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_write>
    delay(10);
 266:	8a e0       	ldi	r24, 0x0A	; 10
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 48 02 	call	0x490	; 0x490 <delay>
    lcd_write(LCD_CMD, lcd_config_3, 7);
 26e:	47 e0       	ldi	r20, 0x07	; 7
 270:	50 e0       	ldi	r21, 0x00	; 0
 272:	be 01       	movw	r22, r28
 274:	6d 5f       	subi	r22, 0xFD	; 253
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_write>
    delay(10);
 27e:	8a e0       	ldi	r24, 0x0A	; 10
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 48 02 	call	0x490	; 0x490 <delay>
    lcd_write(LCD_CMD, lcd_config_4, 1);
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	be 01       	movw	r22, r28
 28c:	66 5f       	subi	r22, 0xF6	; 246
 28e:	7f 4f       	sbci	r23, 0xFF	; 255
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_write>
    delay(10);
 296:	8a e0       	ldi	r24, 0x0A	; 10
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 48 02 	call	0x490	; 0x490 <delay>
    lcd_write(LCD_CMD, lcd_config_5, 2);
 29e:	42 e0       	ldi	r20, 0x02	; 2
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	be 01       	movw	r22, r28
 2a4:	65 5f       	subi	r22, 0xF5	; 245
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_write>
    delay(10);    
 2ae:	8a e0       	ldi	r24, 0x0A	; 10
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 48 02 	call	0x490	; 0x490 <delay>
    lcd_write(LCD_DATA, lcd_test_str, 11);
 2b6:	4b e0       	ldi	r20, 0x0B	; 11
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	be 01       	movw	r22, r28
 2bc:	63 5f       	subi	r22, 0xF3	; 243
 2be:	7f 4f       	sbci	r23, 0xFF	; 255
 2c0:	80 e4       	ldi	r24, 0x40	; 64
 2c2:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_write>
}
 2c6:	67 96       	adiw	r28, 0x17	; 23
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <main>:
uint16_t lc_adc_val = 0;
uint8_t lcd_temp[] = { 0x40, 0x46, 0x72, 0x69, 0x74, 0x7a }; // Sets line 1, Print "FRITZ"

int main(void) {
    /* Initialization Routines */
    timer1_1ms_init();
 2d8:	0e 94 2c 02 	call	0x458	; 0x458 <timer1_1ms_init>
    gpio_init();
 2dc:	0e 94 79 00 	call	0xf2	; 0xf2 <gpio_init>
    i2c1_init(F_CPU, I2C_SCL_FREQ);
 2e0:	20 ea       	ldi	r18, 0xA0	; 160
 2e2:	36 e8       	ldi	r19, 0x86	; 134
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	74 e2       	ldi	r23, 0x24	; 36
 2ec:	84 ef       	ldi	r24, 0xF4	; 244
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 85 00 	call	0x10a	; 0x10a <i2c1_init>
    sei();
 2f4:	78 94       	sei
    tbit(LED_PORT, LED_YLW);
 2f6:	8b b1       	in	r24, 0x0b	; 11
 2f8:	80 58       	subi	r24, 0x80	; 128
 2fa:	8b b9       	out	0x0b, r24	; 11

    while(1) {
        // Status LED blink
        delay(500);
        tbits(LED_PORT, ((1<<LED_YLW)|(1<<LED_RED)));     
 2fc:	c0 ec       	ldi	r28, 0xC0	; 192
    sei();
    tbit(LED_PORT, LED_YLW);

    while(1) {
        // Status LED blink
        delay(500);
 2fe:	84 ef       	ldi	r24, 0xF4	; 244
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 48 02 	call	0x490	; 0x490 <delay>
        tbits(LED_PORT, ((1<<LED_YLW)|(1<<LED_RED)));     
 306:	8b b1       	in	r24, 0x0b	; 11
 308:	8c 27       	eor	r24, r28
 30a:	8b b9       	out	0x0b, r24	; 11
         
        // Reset LCD on SW2 press
        if((chkbit(SW_PIN, SW2) == 0)) {
 30c:	19 99       	sbic	0x03, 1	; 3
 30e:	1e c0       	rjmp	.+60     	; 0x34c <main+0x74>
            clrbit(LCD_RST_PORT, LCD_RST);
 310:	2a 98       	cbi	0x05, 2	; 5
            delay(100);
 312:	84 e6       	ldi	r24, 0x64	; 100
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 48 02 	call	0x490	; 0x490 <delay>
            sbit(LCD_RST_PORT, LCD_RST);
 31a:	2a 9a       	sbi	0x05, 2	; 5
            sbits(LED_PORT, (LED_ALL));
 31c:	8b b1       	in	r24, 0x0b	; 11
 31e:	80 6c       	ori	r24, 0xC0	; 192
 320:	8b b9       	out	0x0b, r24	; 11
            delay(100);
 322:	84 e6       	ldi	r24, 0x64	; 100
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 48 02 	call	0x490	; 0x490 <delay>
            tbits(LED_PORT, (LED_ALL));
 32a:	8b b1       	in	r24, 0x0b	; 11
 32c:	8c 27       	eor	r24, r28
 32e:	8b b9       	out	0x0b, r24	; 11
            delay(100);
 330:	84 e6       	ldi	r24, 0x64	; 100
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 48 02 	call	0x490	; 0x490 <delay>
            tbits(LED_PORT, (LED_ALL));
 338:	8b b1       	in	r24, 0x0b	; 11
 33a:	8c 27       	eor	r24, r28
 33c:	8b b9       	out	0x0b, r24	; 11
            delay(100);
 33e:	84 e6       	ldi	r24, 0x64	; 100
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 48 02 	call	0x490	; 0x490 <delay>
            tbit(LED_PORT, (LED_YLW));          
 346:	8b b1       	in	r24, 0x0b	; 11
 348:	80 58       	subi	r24, 0x80	; 128
 34a:	8b b9       	out	0x0b, r24	; 11
         }
         
         // Run LCD Test on SW1 press
        if((chkbit(SW_PIN, SW1) == 0)) {
 34c:	18 99       	sbic	0x03, 0	; 3
 34e:	d7 cf       	rjmp	.-82     	; 0x2fe <main+0x26>
            lcd_test();
 350:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_test>
            delay(50);
 354:	82 e3       	ldi	r24, 0x32	; 50
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 48 02 	call	0x490	; 0x490 <delay>
            sbits(LED_PORT, (LED_ALL));
 35c:	8b b1       	in	r24, 0x0b	; 11
 35e:	80 6c       	ori	r24, 0xC0	; 192
 360:	8b b9       	out	0x0b, r24	; 11
            delay(50);
 362:	82 e3       	ldi	r24, 0x32	; 50
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 48 02 	call	0x490	; 0x490 <delay>
            tbits(LED_PORT, (LED_ALL));
 36a:	8b b1       	in	r24, 0x0b	; 11
 36c:	8c 27       	eor	r24, r28
 36e:	8b b9       	out	0x0b, r24	; 11
            delay(50);
 370:	82 e3       	ldi	r24, 0x32	; 50
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 48 02 	call	0x490	; 0x490 <delay>
            tbits(LED_PORT, (LED_ALL));
 378:	8b b1       	in	r24, 0x0b	; 11
 37a:	8c 27       	eor	r24, r28
 37c:	8b b9       	out	0x0b, r24	; 11
            delay(50);
 37e:	82 e3       	ldi	r24, 0x32	; 50
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 48 02 	call	0x490	; 0x490 <delay>
            tbit(LED_PORT, (LED_YLW));
 386:	8b b1       	in	r24, 0x0b	; 11
 388:	80 58       	subi	r24, 0x80	; 128
 38a:	8b b9       	out	0x0b, r24	; 11
 38c:	b8 cf       	rjmp	.-144    	; 0x2fe <main+0x26>

0000038e <__vector_11>:
volatile uint8_t systime_s = 0;
volatile uint8_t systime_m = 0;
volatile uint8_t systime_h = 0;
volatile uint16_t systime_d = 0;

ISR(TIMER1_COMPA_vect) {
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	2f 93       	push	r18
 39a:	8f 93       	push	r24
 39c:	9f 93       	push	r25
 39e:	af 93       	push	r26
 3a0:	bf 93       	push	r27
    /* Increment systck global vars to keep system time */
    systck++;
 3a2:	80 91 1b 01 	lds	r24, 0x011B
 3a6:	90 91 1c 01 	lds	r25, 0x011C
 3aa:	a0 91 1d 01 	lds	r26, 0x011D
 3ae:	b0 91 1e 01 	lds	r27, 0x011E
 3b2:	01 96       	adiw	r24, 0x01	; 1
 3b4:	a1 1d       	adc	r26, r1
 3b6:	b1 1d       	adc	r27, r1
 3b8:	80 93 1b 01 	sts	0x011B, r24
 3bc:	90 93 1c 01 	sts	0x011C, r25
 3c0:	a0 93 1d 01 	sts	0x011D, r26
 3c4:	b0 93 1e 01 	sts	0x011E, r27
    systime_ms++;
 3c8:	80 91 19 01 	lds	r24, 0x0119
 3cc:	90 91 1a 01 	lds	r25, 0x011A
 3d0:	01 96       	adiw	r24, 0x01	; 1
 3d2:	90 93 1a 01 	sts	0x011A, r25
 3d6:	80 93 19 01 	sts	0x0119, r24
    if(systime_ms >= 1000) {
 3da:	80 91 19 01 	lds	r24, 0x0119
 3de:	90 91 1a 01 	lds	r25, 0x011A
 3e2:	88 3e       	cpi	r24, 0xE8	; 232
 3e4:	93 40       	sbci	r25, 0x03	; 3
 3e6:	70 f1       	brcs	.+92     	; 0x444 <__vector_11+0xb6>
        systime_ms = 0;
 3e8:	10 92 1a 01 	sts	0x011A, r1
 3ec:	10 92 19 01 	sts	0x0119, r1
        systime_s++;
 3f0:	80 91 18 01 	lds	r24, 0x0118
 3f4:	8f 5f       	subi	r24, 0xFF	; 255
 3f6:	80 93 18 01 	sts	0x0118, r24
        if(systime_s >= 60) {
 3fa:	80 91 18 01 	lds	r24, 0x0118
 3fe:	8c 33       	cpi	r24, 0x3C	; 60
 400:	08 f1       	brcs	.+66     	; 0x444 <__vector_11+0xb6>
            systime_s = 0;
 402:	10 92 18 01 	sts	0x0118, r1
            systime_m++;
 406:	80 91 17 01 	lds	r24, 0x0117
 40a:	8f 5f       	subi	r24, 0xFF	; 255
 40c:	80 93 17 01 	sts	0x0117, r24
            if(systime_m >= 60) {
 410:	80 91 17 01 	lds	r24, 0x0117
 414:	8c 33       	cpi	r24, 0x3C	; 60
 416:	b0 f0       	brcs	.+44     	; 0x444 <__vector_11+0xb6>
                systime_m = 0;
 418:	10 92 17 01 	sts	0x0117, r1
                systime_h++;
 41c:	80 91 16 01 	lds	r24, 0x0116
 420:	8f 5f       	subi	r24, 0xFF	; 255
 422:	80 93 16 01 	sts	0x0116, r24
                if(systime_h >= 24) {
 426:	80 91 16 01 	lds	r24, 0x0116
 42a:	88 31       	cpi	r24, 0x18	; 24
 42c:	58 f0       	brcs	.+22     	; 0x444 <__vector_11+0xb6>
                    systime_h = 0;
 42e:	10 92 16 01 	sts	0x0116, r1
                    systime_d++;
 432:	80 91 14 01 	lds	r24, 0x0114
 436:	90 91 15 01 	lds	r25, 0x0115
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	90 93 15 01 	sts	0x0115, r25
 440:	80 93 14 01 	sts	0x0114, r24
                }
            }
        }        
    }
}
 444:	bf 91       	pop	r27
 446:	af 91       	pop	r26
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	2f 91       	pop	r18
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <timer1_1ms_init>:
/*!
* @brief Disable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_disable(void) {
    TIMSK1 &= ~(1<<OCIE1A); // Disable Output compare Interrupt on Match A
 458:	af e6       	ldi	r26, 0x6F	; 111
 45a:	b0 e0       	ldi	r27, 0x00	; 0
 45c:	8c 91       	ld	r24, X
 45e:	8d 7f       	andi	r24, 0xFD	; 253
 460:	8c 93       	st	X, r24
    TCCR1B &= ~((1<<CS12) | (1<<CS11) | (1<<CS10)); // Disable timer1 clock source (disables timer)
 462:	e1 e8       	ldi	r30, 0x81	; 129
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	80 81       	ld	r24, Z
 468:	88 7f       	andi	r24, 0xF8	; 248
 46a:	80 83       	st	Z, r24
*/
void timer1_1ms_init(void) {
    static uint16_t timer1_1ms_compare_value = 250-1;
        
    timer1_disable();
    TCCR1A = 0x00;  // Make sure no pins are set to output
 46c:	10 92 80 00 	sts	0x0080, r1
    TCCR1B |= (1<<WGM12) | TIMER1_PRESCALE_MASK;  // Set CTC, prescalar to clk(io)/64 (250 counts per 1ms)
 470:	80 81       	ld	r24, Z
 472:	8b 60       	ori	r24, 0x0B	; 11
 474:	80 83       	st	Z, r24
    OCR1A = timer1_1ms_compare_value;    
 476:	89 ef       	ldi	r24, 0xF9	; 249
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	90 93 89 00 	sts	0x0089, r25
 47e:	80 93 88 00 	sts	0x0088, r24
/*!
* @brief Enable timer1 and timer1 interrupts
* @return void
*/
inline void timer1_enable(void) {
    TIMSK1 |= (1<<OCIE1A);  // Enable Output Compare Interrupt on Match A
 482:	8c 91       	ld	r24, X
 484:	82 60       	ori	r24, 0x02	; 2
 486:	8c 93       	st	X, r24
    TCCR1B |= TIMER1_PRESCALE_MASK; // Enable timer1 clock source (disables timer)
 488:	80 81       	ld	r24, Z
 48a:	83 60       	ori	r24, 0x03	; 3
 48c:	80 83       	st	Z, r24
 48e:	08 95       	ret

00000490 <delay>:
* @brief Delay milliseconds
* @param uint16_t delay_ms  Time to delay in milliseconds
* @return void
*/
void delay(uint16_t delay_ms) {
    uint32_t systck_1 = systck;
 490:	40 91 1b 01 	lds	r20, 0x011B
 494:	50 91 1c 01 	lds	r21, 0x011C
 498:	60 91 1d 01 	lds	r22, 0x011D
 49c:	70 91 1e 01 	lds	r23, 0x011E
    while(systck < (systck_1 + delay_ms));  // delay
 4a0:	48 0f       	add	r20, r24
 4a2:	59 1f       	adc	r21, r25
 4a4:	61 1d       	adc	r22, r1
 4a6:	71 1d       	adc	r23, r1
 4a8:	80 91 1b 01 	lds	r24, 0x011B
 4ac:	90 91 1c 01 	lds	r25, 0x011C
 4b0:	a0 91 1d 01 	lds	r26, 0x011D
 4b4:	b0 91 1e 01 	lds	r27, 0x011E
 4b8:	84 17       	cp	r24, r20
 4ba:	95 07       	cpc	r25, r21
 4bc:	a6 07       	cpc	r26, r22
 4be:	b7 07       	cpc	r27, r23
 4c0:	98 f3       	brcs	.-26     	; 0x4a8 <delay+0x18>
 4c2:	08 95       	ret

000004c4 <__udivmodsi4>:
 4c4:	a1 e2       	ldi	r26, 0x21	; 33
 4c6:	1a 2e       	mov	r1, r26
 4c8:	aa 1b       	sub	r26, r26
 4ca:	bb 1b       	sub	r27, r27
 4cc:	fd 01       	movw	r30, r26
 4ce:	0d c0       	rjmp	.+26     	; 0x4ea <__udivmodsi4_ep>

000004d0 <__udivmodsi4_loop>:
 4d0:	aa 1f       	adc	r26, r26
 4d2:	bb 1f       	adc	r27, r27
 4d4:	ee 1f       	adc	r30, r30
 4d6:	ff 1f       	adc	r31, r31
 4d8:	a2 17       	cp	r26, r18
 4da:	b3 07       	cpc	r27, r19
 4dc:	e4 07       	cpc	r30, r20
 4de:	f5 07       	cpc	r31, r21
 4e0:	20 f0       	brcs	.+8      	; 0x4ea <__udivmodsi4_ep>
 4e2:	a2 1b       	sub	r26, r18
 4e4:	b3 0b       	sbc	r27, r19
 4e6:	e4 0b       	sbc	r30, r20
 4e8:	f5 0b       	sbc	r31, r21

000004ea <__udivmodsi4_ep>:
 4ea:	66 1f       	adc	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	1a 94       	dec	r1
 4f4:	69 f7       	brne	.-38     	; 0x4d0 <__udivmodsi4_loop>
 4f6:	60 95       	com	r22
 4f8:	70 95       	com	r23
 4fa:	80 95       	com	r24
 4fc:	90 95       	com	r25
 4fe:	9b 01       	movw	r18, r22
 500:	ac 01       	movw	r20, r24
 502:	bd 01       	movw	r22, r26
 504:	cf 01       	movw	r24, r30
 506:	08 95       	ret

00000508 <_exit>:
 508:	f8 94       	cli

0000050a <__stop_program>:
 50a:	ff cf       	rjmp	.-2      	; 0x50a <__stop_program>
