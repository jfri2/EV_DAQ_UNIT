
EV_DAQ_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000544  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  000005b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001345  00000000  00000000  000006d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061e  00000000  00000000  00001a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005be  00000000  00000000  0000203b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  000025fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039e  00000000  00000000  000027d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000063a  00000000  00000000  00002b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 1e 02 	jmp	0x43c	; 0x43c <__vector_11>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e4       	ldi	r30, 0x44	; 68
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 30       	cpi	r26, 0x00	; 0
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ab 30       	cpi	r26, 0x0B	; 11
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
  ea:	0c 94 a0 02 	jmp	0x540	; 0x540 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <i2c1_init>:
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return uint8_t   Division factor
*/
uint8_t i2c_calc_br_div(uint32_t cpu_freq, uint32_t i2c_freq) {
    return((uint8_t)(((cpu_freq/i2c_freq) - 16)>>1));
  f2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__udivmodsi4>
  f6:	da 01       	movw	r26, r20
  f8:	c9 01       	movw	r24, r18
  fa:	40 97       	sbiw	r24, 0x10	; 16
  fc:	a1 09       	sbc	r26, r1
  fe:	b1 09       	sbc	r27, r1
 100:	b6 95       	lsr	r27
 102:	a7 95       	ror	r26
 104:	97 95       	ror	r25
 106:	87 95       	ror	r24
* @param[in] cpu_freq   CPU frequency (usually F_CPU) in Hz
* @param[in] i2c_freq   desired I2C frequency in Hz
* @return void
*/
void i2c1_init(uint32_t cpu_freq, uint32_t i2c_freq) {
    TWBR1 = i2c_calc_br_div(cpu_freq, i2c_freq);   // Set I2C SCL to correct value
 108:	80 93 d8 00 	sts	0x00D8, r24
    TWCR1 |= (1<<TWIE); // Enable TWI interrupt
 10c:	ec ed       	ldi	r30, 0xDC	; 220
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <i2c1_tx>:
* @brief Start I2C master tx event
* @param[in] i2c_event   Type of I2C event
* @return uint8_t I2C status register
*/
uint8_t i2c1_tx(uint8_t i2c_event) {
    switch(i2c_event) {
 118:	81 30       	cpi	r24, 0x01	; 1
 11a:	41 f0       	breq	.+16     	; 0x12c <i2c1_tx+0x14>
 11c:	18 f0       	brcs	.+6      	; 0x124 <i2c1_tx+0xc>
 11e:	82 30       	cpi	r24, 0x02	; 2
 120:	49 f0       	breq	.+18     	; 0x134 <i2c1_tx+0x1c>
 122:	0b c0       	rjmp	.+22     	; 0x13a <i2c1_tx+0x22>
        case I2C_START:
            TWCR1 = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);    // Tx start condition
 124:	84 ea       	ldi	r24, 0xA4	; 164
 126:	80 93 dc 00 	sts	0x00DC, r24
            break;
 12a:	07 c0       	rjmp	.+14     	; 0x13a <i2c1_tx+0x22>
        case I2C_DATA:
            TWCR1 = (1<<TWINT) | (1<<TWEN);                 // Tx data
 12c:	84 e8       	ldi	r24, 0x84	; 132
 12e:	80 93 dc 00 	sts	0x00DC, r24
            break;
 132:	03 c0       	rjmp	.+6      	; 0x13a <i2c1_tx+0x22>
        case I2C_STOP:
            TWCR1 = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);    // Tx stop condition
 134:	84 e9       	ldi	r24, 0x94	; 148
 136:	80 93 dc 00 	sts	0x00DC, r24
            break;
    }
    while (!(TWCR1 & (1 << TWINT))); // Wait for current request to process
 13a:	ec ed       	ldi	r30, 0xDC	; 220
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	ec f7       	brge	.-6      	; 0x13e <i2c1_tx+0x26>
    return(TWSR1 & I2C_STATUS_REG_MASK);     // Return only status bits in status reg
 144:	80 91 d9 00 	lds	r24, 0x00D9
}
 148:	88 7f       	andi	r24, 0xF8	; 248
 14a:	08 95       	ret

0000014c <lcd_test>:

/*!
* @brief Test LCD
* @return void
*/
void lcd_test(void) {
 14c:	df 92       	push	r13
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
    /* Initialization Routine */
    i2c1_tx(I2C_START);    
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    /* First few bytes to send */
    TWDR1 = 0x7C; // Slave Addr
 160:	cb ed       	ldi	r28, 0xDB	; 219
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	1c e7       	ldi	r17, 0x7C	; 124
 166:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);    
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x00; // Comsend
 16e:	18 82       	st	Y, r1
    i2c1_tx(I2C_DATA);    
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x38;
 176:	0f 2e       	mov	r0, r31
 178:	f8 e3       	ldi	r31, 0x38	; 56
 17a:	df 2e       	mov	r13, r31
 17c:	f0 2d       	mov	r31, r0
 17e:	d8 82       	st	Y, r13
    i2c1_tx(I2C_DATA);    
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	8f e3       	ldi	r24, 0x3F	; 63
 188:	9c e9       	ldi	r25, 0x9C	; 156
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_test+0x3e>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <lcd_test+0x44>
 190:	00 00       	nop
    _delay_ms(10);    
    /* Next byte to send */
    TWDR1 = 0x39;
 192:	0f 2e       	mov	r0, r31
 194:	f9 e3       	ldi	r31, 0x39	; 57
 196:	ff 2e       	mov	r15, r31
 198:	f0 2d       	mov	r31, r0
 19a:	f8 82       	st	Y, r15
    i2c1_tx(I2C_DATA);    
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
 1a2:	8f e3       	ldi	r24, 0x3F	; 63
 1a4:	9c e9       	ldi	r25, 0x9C	; 156
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_test+0x5a>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <lcd_test+0x60>
 1ac:	00 00       	nop
    _delay_ms(10);    
    /* Last few bytes of initialization data */
    TWDR1 = 0x14;
 1ae:	0f 2e       	mov	r0, r31
 1b0:	f4 e1       	ldi	r31, 0x14	; 20
 1b2:	ef 2e       	mov	r14, r31
 1b4:	f0 2d       	mov	r31, r0
 1b6:	e8 82       	st	Y, r14
    i2c1_tx(I2C_DATA);
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x78;
 1be:	88 e7       	ldi	r24, 0x78	; 120
 1c0:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x5E;
 1c8:	8e e5       	ldi	r24, 0x5E	; 94
 1ca:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x6D;
 1d2:	8d e6       	ldi	r24, 0x6D	; 109
 1d4:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x0C;
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x01;
 1e6:	01 e0       	ldi	r16, 0x01	; 1
 1e8:	08 83       	st	Y, r16
    i2c1_tx(I2C_DATA);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x06;
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
 1fa:	8f e3       	ldi	r24, 0x3F	; 63
 1fc:	9c e9       	ldi	r25, 0x9C	; 156
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_test+0xb2>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_test+0xb8>
 204:	00 00       	nop
    _delay_ms(10);    
    i2c1_tx(I2C_STOP);
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
 20c:	9f ef       	ldi	r25, 0xFF	; 255
 20e:	21 ee       	ldi	r18, 0xE1	; 225
 210:	84 e0       	ldi	r24, 0x04	; 4
 212:	91 50       	subi	r25, 0x01	; 1
 214:	20 40       	sbci	r18, 0x00	; 0
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <lcd_test+0xc6>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_test+0xd0>
 21c:	00 00       	nop
    
    _delay_ms(100);
    
    /* CGRAM? */
    i2c1_tx(I2C_START);
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
 224:	8f e3       	ldi	r24, 0x3F	; 63
 226:	9c e9       	ldi	r25, 0x9C	; 156
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_test+0xdc>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_test+0xe2>
 22e:	00 00       	nop
    _delay_ms(10);
    TWDR1 = 0x7C; // Slave Addr
 230:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x00; // Comsend
 238:	18 82       	st	Y, r1
    i2c1_tx(I2C_DATA);
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x38;
 240:	d8 82       	st	Y, r13
    i2c1_tx(I2C_DATA);
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x40;
 248:	80 e4       	ldi	r24, 0x40	; 64
 24a:	88 83       	st	Y, r24
    i2c1_tx(I2C_STOP);
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
 252:	8f e3       	ldi	r24, 0x3F	; 63
 254:	9c e9       	ldi	r25, 0x9C	; 156
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_test+0x10a>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_test+0x110>
 25c:	00 00       	nop
    _delay_ms(10);    
    i2c1_tx(I2C_START);
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
 264:	8f e3       	ldi	r24, 0x3F	; 63
 266:	9c e9       	ldi	r25, 0x9C	; 156
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_test+0x11c>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_test+0x122>
 26e:	00 00       	nop
    _delay_ms(10);
    TWDR1 = 0x7C; // Slave Addr
 270:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x00; // Comsend
 278:	18 82       	st	Y, r1
    i2c1_tx(I2C_DATA);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x00;
 280:	18 82       	st	Y, r1
    i2c1_tx(I2C_DATA);
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x1E;
 288:	8e e1       	ldi	r24, 0x1E	; 30
 28a:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x18;
 292:	88 e1       	ldi	r24, 0x18	; 24
 294:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x14;
 29c:	e8 82       	st	Y, r14
    i2c1_tx(I2C_DATA);
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x12;
 2a4:	82 e1       	ldi	r24, 0x12	; 18
 2a6:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x01;
 2ae:	08 83       	st	Y, r16
    i2c1_tx(I2C_DATA);
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x00;
 2b6:	18 82       	st	Y, r1
    i2c1_tx(I2C_DATA);
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x00;   
 2be:	18 82       	st	Y, r1
    i2c1_tx(I2C_STOP);
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
 2c6:	8f e3       	ldi	r24, 0x3F	; 63
 2c8:	9c e9       	ldi	r25, 0x9C	; 156
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_test+0x17e>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <lcd_test+0x184>
 2d0:	00 00       	nop
    _delay_ms(10);        
    
    /* Set cursor back home */
    i2c1_tx(I2C_START);    
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
 2d8:	8f e3       	ldi	r24, 0x3F	; 63
 2da:	9c e9       	ldi	r25, 0x9C	; 156
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <lcd_test+0x190>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <lcd_test+0x196>
 2e2:	00 00       	nop
    _delay_ms(10);
    TWDR1 = 0x7C; // Slave Addr
 2e4:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x00; // Comsend
 2ec:	18 82       	st	Y, r1
    i2c1_tx(I2C_DATA);
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x39;
 2f4:	f8 82       	st	Y, r15
    i2c1_tx(I2C_DATA);
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x01;
 2fc:	08 83       	st	Y, r16
    i2c1_tx(I2C_DATA);    
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    i2c1_tx(I2C_STOP);
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
 30a:	8f e3       	ldi	r24, 0x3F	; 63
 30c:	9c e9       	ldi	r25, 0x9C	; 156
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <lcd_test+0x1c2>
 312:	00 c0       	rjmp	.+0      	; 0x314 <lcd_test+0x1c8>
 314:	00 00       	nop
    _delay_ms(10);
    
    /* Display test string */
    i2c1_tx(I2C_START);
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
 31c:	8f e3       	ldi	r24, 0x3F	; 63
 31e:	9c e9       	ldi	r25, 0x9C	; 156
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <lcd_test+0x1d4>
 324:	00 c0       	rjmp	.+0      	; 0x326 <lcd_test+0x1da>
 326:	00 00       	nop
    
    _delay_ms(10);
    TWDR1 = 0x7C; // Slave Addr
 328:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 0x00; // Comsend
 330:	18 82       	st	Y, r1
    i2c1_tx(I2C_DATA);    
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>

    TWDR1 = 'H';
 338:	88 e4       	ldi	r24, 0x48	; 72
 33a:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 'e';
 342:	85 e6       	ldi	r24, 0x65	; 101
 344:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 'l';
 34c:	1c e6       	ldi	r17, 0x6C	; 108
 34e:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 'l';
 356:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 'o';
 35e:	0f e6       	ldi	r16, 0x6F	; 111
 360:	08 83       	st	Y, r16
    i2c1_tx(I2C_DATA);
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = ' ';
 368:	80 e2       	ldi	r24, 0x20	; 32
 36a:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 'W';
 372:	87 e5       	ldi	r24, 0x57	; 87
 374:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 'o';
 37c:	08 83       	st	Y, r16
    i2c1_tx(I2C_DATA);
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 'r';
 384:	82 e7       	ldi	r24, 0x72	; 114
 386:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 'l';
 38e:	18 83       	st	Y, r17
    i2c1_tx(I2C_DATA);
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
    TWDR1 = 'd';
 396:	84 e6       	ldi	r24, 0x64	; 100
 398:	88 83       	st	Y, r24
    i2c1_tx(I2C_DATA);
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>

    i2c1_tx(I2C_STOP);
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	0e 94 8c 00 	call	0x118	; 0x118 <i2c1_tx>
 3a6:	8f e3       	ldi	r24, 0x3F	; 63
 3a8:	9c e9       	ldi	r25, 0x9C	; 156
 3aa:	01 97       	sbiw	r24, 0x01	; 1
 3ac:	f1 f7       	brne	.-4      	; 0x3aa <lcd_test+0x25e>
 3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <lcd_test+0x264>
 3b0:	00 00       	nop
    _delay_ms(10);   
}
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	1f 91       	pop	r17
 3b8:	0f 91       	pop	r16
 3ba:	ff 90       	pop	r15
 3bc:	ef 90       	pop	r14
 3be:	df 90       	pop	r13
 3c0:	08 95       	ret

000003c2 <main>:

int main(void) {
    /* Initialization Routines */
//    timer1_1ms_init();
//    uart0_init(F_CPU, UART_BAUD, TRUE);
    i2c1_init(F_CPU, I2C_SCL_FREQ);
 3c2:	20 ea       	ldi	r18, 0xA0	; 160
 3c4:	36 e8       	ldi	r19, 0x86	; 134
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	50 e0       	ldi	r21, 0x00	; 0
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	74 e2       	ldi	r23, 0x24	; 36
 3ce:	84 ef       	ldi	r24, 0xF4	; 244
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 79 00 	call	0xf2	; 0xf2 <i2c1_init>
//    adc_init((ADC_DIG_DIS_LC | ADC_DIG_DIS_HE), ADC_DIV_128);
//    lcd_init();
    DDRB |= (1<<PB2);
 3d6:	22 9a       	sbi	0x04, 2	; 4
    DDRB &= ~((1<<PB0)|(1<<PB1));
 3d8:	84 b1       	in	r24, 0x04	; 4
 3da:	8c 7f       	andi	r24, 0xFC	; 252
 3dc:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1<<PB2)|(1<<PB1)|(1<<PB0);
 3de:	85 b1       	in	r24, 0x05	; 5
 3e0:	87 60       	ori	r24, 0x07	; 7
 3e2:	85 b9       	out	0x05, r24	; 5
 3e4:	8f e3       	ldi	r24, 0x3F	; 63
 3e6:	9c e9       	ldi	r25, 0x9C	; 156
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <main+0x26>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x2c>
 3ee:	00 00       	nop
    _delay_ms(10);
    PORTB &= ~(1<<PB2);
 3f0:	2a 98       	cbi	0x05, 2	; 5
    PORTB |= (1<<PB2);
 3f2:	2a 9a       	sbi	0x05, 2	; 5
 3f4:	ef e3       	ldi	r30, 0x3F	; 63
 3f6:	fc e9       	ldi	r31, 0x9C	; 156
 3f8:	31 97       	sbiw	r30, 0x01	; 1
 3fa:	f1 f7       	brne	.-4      	; 0x3f8 <main+0x36>
 3fc:	00 c0       	rjmp	.+0      	; 0x3fe <main+0x3c>
 3fe:	00 00       	nop
    _delay_ms(10);
    lcd_test();
 400:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_test>
    DDRD |= (1<<PD6)|(1<<PD7);       
 404:	8a b1       	in	r24, 0x0a	; 10
 406:	80 6c       	ori	r24, 0xC0	; 192
 408:	8a b9       	out	0x0a, r24	; 10
//         systck_1 = systck;
//         while(systck < (systck_1 + 500));

        // Status LED blink
        _delay_ms(500);
        PORTD ^= (1<<PD6)|(1<<PD7);       
 40a:	90 ec       	ldi	r25, 0xC0	; 192
 40c:	ff ef       	ldi	r31, 0xFF	; 255
 40e:	29 e6       	ldi	r18, 0x69	; 105
 410:	38 e1       	ldi	r19, 0x18	; 24
 412:	f1 50       	subi	r31, 0x01	; 1
 414:	20 40       	sbci	r18, 0x00	; 0
 416:	30 40       	sbci	r19, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <main+0x50>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <main+0x5a>
 41c:	00 00       	nop
 41e:	8b b1       	in	r24, 0x0b	; 11
 420:	89 27       	eor	r24, r25
 422:	8b b9       	out	0x0b, r24	; 11
         
        // Reset LCD if a button is pressed
        if(PINB & ~((1<<PB1)|(1<<PB0))) {
 424:	83 b1       	in	r24, 0x03	; 3
 426:	8c 7f       	andi	r24, 0xFC	; 252
 428:	89 f3       	breq	.-30     	; 0x40c <main+0x4a>
            PORTB &= ~(1<<PB2);
 42a:	2a 98       	cbi	0x05, 2	; 5
 42c:	ef e3       	ldi	r30, 0x3F	; 63
 42e:	fc e9       	ldi	r31, 0x9C	; 156
 430:	31 97       	sbiw	r30, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <main+0x6e>
 434:	00 c0       	rjmp	.+0      	; 0x436 <main+0x74>
 436:	00 00       	nop
            _delay_ms(10);
            PORTB |= (1<<PB2);
 438:	2a 9a       	sbi	0x05, 2	; 5
 43a:	e8 cf       	rjmp	.-48     	; 0x40c <main+0x4a>

0000043c <__vector_11>:
uint8_t systime_s = 0;
uint8_t systime_m = 0;
uint8_t systime_h = 0;
uint16_t systime_d = 0;

ISR(TIMER1_COMPA_vect) {
 43c:	1f 92       	push	r1
 43e:	0f 92       	push	r0
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	0f 92       	push	r0
 444:	11 24       	eor	r1, r1
 446:	2f 93       	push	r18
 448:	8f 93       	push	r24
 44a:	9f 93       	push	r25
 44c:	af 93       	push	r26
 44e:	bf 93       	push	r27
    /* Increment systck global vars to keep system time */
    systck++;
 450:	80 91 07 01 	lds	r24, 0x0107
 454:	90 91 08 01 	lds	r25, 0x0108
 458:	a0 91 09 01 	lds	r26, 0x0109
 45c:	b0 91 0a 01 	lds	r27, 0x010A
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	a1 1d       	adc	r26, r1
 464:	b1 1d       	adc	r27, r1
 466:	80 93 07 01 	sts	0x0107, r24
 46a:	90 93 08 01 	sts	0x0108, r25
 46e:	a0 93 09 01 	sts	0x0109, r26
 472:	b0 93 0a 01 	sts	0x010A, r27
    systime_ms++;
 476:	80 91 05 01 	lds	r24, 0x0105
 47a:	90 91 06 01 	lds	r25, 0x0106
 47e:	01 96       	adiw	r24, 0x01	; 1
    if(systime_ms >= 1000) {
 480:	88 3e       	cpi	r24, 0xE8	; 232
 482:	23 e0       	ldi	r18, 0x03	; 3
 484:	92 07       	cpc	r25, r18
 486:	28 f4       	brcc	.+10     	; 0x492 <__vector_11+0x56>
uint16_t systime_d = 0;

ISR(TIMER1_COMPA_vect) {
    /* Increment systck global vars to keep system time */
    systck++;
    systime_ms++;
 488:	90 93 06 01 	sts	0x0106, r25
 48c:	80 93 05 01 	sts	0x0105, r24
 490:	2b c0       	rjmp	.+86     	; 0x4e8 <__vector_11+0xac>
    if(systime_ms >= 1000) {
        systime_ms = 0;
 492:	10 92 06 01 	sts	0x0106, r1
 496:	10 92 05 01 	sts	0x0105, r1
        systime_s++;
 49a:	80 91 04 01 	lds	r24, 0x0104
 49e:	8f 5f       	subi	r24, 0xFF	; 255
        if(systime_s >= 60) {
 4a0:	8c 33       	cpi	r24, 0x3C	; 60
 4a2:	18 f4       	brcc	.+6      	; 0x4aa <__vector_11+0x6e>
    /* Increment systck global vars to keep system time */
    systck++;
    systime_ms++;
    if(systime_ms >= 1000) {
        systime_ms = 0;
        systime_s++;
 4a4:	80 93 04 01 	sts	0x0104, r24
 4a8:	1f c0       	rjmp	.+62     	; 0x4e8 <__vector_11+0xac>
        if(systime_s >= 60) {
            systime_s = 0;
 4aa:	10 92 04 01 	sts	0x0104, r1
            systime_m++;
 4ae:	80 91 03 01 	lds	r24, 0x0103
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
            if(systime_m >= 60) {
 4b4:	8c 33       	cpi	r24, 0x3C	; 60
 4b6:	18 f4       	brcc	.+6      	; 0x4be <__vector_11+0x82>
    if(systime_ms >= 1000) {
        systime_ms = 0;
        systime_s++;
        if(systime_s >= 60) {
            systime_s = 0;
            systime_m++;
 4b8:	80 93 03 01 	sts	0x0103, r24
 4bc:	15 c0       	rjmp	.+42     	; 0x4e8 <__vector_11+0xac>
            if(systime_m >= 60) {
                systime_m = 0;
 4be:	10 92 03 01 	sts	0x0103, r1
                systime_h++;
 4c2:	80 91 02 01 	lds	r24, 0x0102
 4c6:	8f 5f       	subi	r24, 0xFF	; 255
                if(systime_h >= 24) {
 4c8:	88 31       	cpi	r24, 0x18	; 24
 4ca:	18 f4       	brcc	.+6      	; 0x4d2 <__vector_11+0x96>
        if(systime_s >= 60) {
            systime_s = 0;
            systime_m++;
            if(systime_m >= 60) {
                systime_m = 0;
                systime_h++;
 4cc:	80 93 02 01 	sts	0x0102, r24
 4d0:	0b c0       	rjmp	.+22     	; 0x4e8 <__vector_11+0xac>
                if(systime_h >= 24) {
                    systime_h = 0;
 4d2:	10 92 02 01 	sts	0x0102, r1
                    systime_d++;
 4d6:	80 91 00 01 	lds	r24, 0x0100
 4da:	90 91 01 01 	lds	r25, 0x0101
 4de:	01 96       	adiw	r24, 0x01	; 1
 4e0:	90 93 01 01 	sts	0x0101, r25
 4e4:	80 93 00 01 	sts	0x0100, r24
                }
            }
        }        
    }
}
 4e8:	bf 91       	pop	r27
 4ea:	af 91       	pop	r26
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	2f 91       	pop	r18
 4f2:	0f 90       	pop	r0
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	0f 90       	pop	r0
 4f8:	1f 90       	pop	r1
 4fa:	18 95       	reti

000004fc <__udivmodsi4>:
 4fc:	a1 e2       	ldi	r26, 0x21	; 33
 4fe:	1a 2e       	mov	r1, r26
 500:	aa 1b       	sub	r26, r26
 502:	bb 1b       	sub	r27, r27
 504:	fd 01       	movw	r30, r26
 506:	0d c0       	rjmp	.+26     	; 0x522 <__udivmodsi4_ep>

00000508 <__udivmodsi4_loop>:
 508:	aa 1f       	adc	r26, r26
 50a:	bb 1f       	adc	r27, r27
 50c:	ee 1f       	adc	r30, r30
 50e:	ff 1f       	adc	r31, r31
 510:	a2 17       	cp	r26, r18
 512:	b3 07       	cpc	r27, r19
 514:	e4 07       	cpc	r30, r20
 516:	f5 07       	cpc	r31, r21
 518:	20 f0       	brcs	.+8      	; 0x522 <__udivmodsi4_ep>
 51a:	a2 1b       	sub	r26, r18
 51c:	b3 0b       	sbc	r27, r19
 51e:	e4 0b       	sbc	r30, r20
 520:	f5 0b       	sbc	r31, r21

00000522 <__udivmodsi4_ep>:
 522:	66 1f       	adc	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	88 1f       	adc	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	1a 94       	dec	r1
 52c:	69 f7       	brne	.-38     	; 0x508 <__udivmodsi4_loop>
 52e:	60 95       	com	r22
 530:	70 95       	com	r23
 532:	80 95       	com	r24
 534:	90 95       	com	r25
 536:	9b 01       	movw	r18, r22
 538:	ac 01       	movw	r20, r24
 53a:	bd 01       	movw	r22, r26
 53c:	cf 01       	movw	r24, r30
 53e:	08 95       	ret

00000540 <_exit>:
 540:	f8 94       	cli

00000542 <__stop_program>:
 542:	ff cf       	rjmp	.-2      	; 0x542 <__stop_program>
